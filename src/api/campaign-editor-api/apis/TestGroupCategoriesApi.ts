/* tslint:disable */
/* eslint-disable */
/**
 * NKM RTD CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CampaignTestGroupCategoryModel,
    CampaignTestGroupCategoryModelFromJSON,
    CampaignTestGroupCategoryModelToJSON,
    TestGroupCategoryModel,
    TestGroupCategoryModelFromJSON,
    TestGroupCategoryModelToJSON,
    TestGroupCategoryModelPaginatedSearchResponse,
    TestGroupCategoryModelPaginatedSearchResponseFromJSON,
    TestGroupCategoryModelPaginatedSearchResponseToJSON,
} from '../models';

export interface CreateTestGroupCategoryRequest {
    testGroupCategoryModel?: TestGroupCategoryModel;
}

export interface DeleteTestGroupCategoryRequest {
    id: number;
}

export interface GetCampaignTestGroupCategoriesRequest {
    campaignId?: number;
}

export interface GetManyTestGroupCategoriesRequest {
    ids?: Array<number>;
}

export interface GetTestGroupCategoriesRequest {
    _queryParameters?: { [key: string]: string; };
}

export interface GetTestGroupCategoryRequest {
    id: number;
}

export interface UpdateTestGroupCategoryRequest {
    id: number;
    testGroupCategoryModel?: TestGroupCategoryModel;
}

/**
 * no description
 */
export class TestGroupCategoriesApi extends runtime.BaseAPI {

    /**
     * Creates the dedicates test group. The creation will results in an identification,  assigned to the current instance.
     */
    async createTestGroupCategoryRaw(requestParameters: CreateTestGroupCategoryRequest): Promise<runtime.ApiResponse<number>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestGroupCategories/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestGroupCategoryModelToJSON(requestParameters.testGroupCategoryModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates the dedicates test group. The creation will results in an identification,  assigned to the current instance.
     */
    async createTestGroupCategory(requestParameters: CreateTestGroupCategoryRequest): Promise<number> {
        const response = await this.createTestGroupCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g.: test group in used, result is Microsoft.AspNetCore.Mvc.ForbidResult.
     * Delete the item signed with the id.
     */
    async deleteTestGroupCategoryRaw(requestParameters: DeleteTestGroupCategoryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTestGroupCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestGroupCategories/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g.: test group in used, result is Microsoft.AspNetCore.Mvc.ForbidResult.
     * Delete the item signed with the id.
     */
    async deleteTestGroupCategory(requestParameters: DeleteTestGroupCategoryRequest): Promise<void> {
        await this.deleteTestGroupCategoryRaw(requestParameters);
    }

    /**
     * Get test group based on the campaignId.
     */
    async getCampaignTestGroupCategoriesRaw(requestParameters: GetCampaignTestGroupCategoriesRequest): Promise<runtime.ApiResponse<Array<CampaignTestGroupCategoryModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.campaignId !== undefined) {
            queryParameters['campaignId'] = requestParameters.campaignId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestGroupCategories/GetCampaignTestGroupCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CampaignTestGroupCategoryModelFromJSON));
    }

    /**
     * Get test group based on the campaignId.
     */
    async getCampaignTestGroupCategories(requestParameters: GetCampaignTestGroupCategoriesRequest): Promise<Array<CampaignTestGroupCategoryModel>> {
        const response = await this.getCampaignTestGroupCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the test groups identified by the ids.
     */
    async getManyTestGroupCategoriesRaw(requestParameters: GetManyTestGroupCategoriesRequest): Promise<runtime.ApiResponse<Array<TestGroupCategoryModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestGroupCategories/GetMany/many`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TestGroupCategoryModelFromJSON));
    }

    /**
     * Returns the test groups identified by the ids.
     */
    async getManyTestGroupCategories(requestParameters: GetManyTestGroupCategoriesRequest): Promise<Array<TestGroupCategoryModel>> {
        const response = await this.getManyTestGroupCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the test groups for the actual query.
     */
    async getTestGroupCategoriesRaw(requestParameters: GetTestGroupCategoriesRequest): Promise<runtime.ApiResponse<TestGroupCategoryModelPaginatedSearchResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters._queryParameters !== undefined) {
            queryParameters['queryParameters'] = requestParameters._queryParameters;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestGroupCategories/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TestGroupCategoryModelPaginatedSearchResponseFromJSON(jsonValue));
    }

    /**
     * Returns the test groups for the actual query.
     */
    async getTestGroupCategories(requestParameters: GetTestGroupCategoriesRequest): Promise<TestGroupCategoryModelPaginatedSearchResponse> {
        const response = await this.getTestGroupCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the requested test group, identified by id.
     */
    async getTestGroupCategoryRaw(requestParameters: GetTestGroupCategoryRequest): Promise<runtime.ApiResponse<TestGroupCategoryModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTestGroupCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestGroupCategories/GetOne/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TestGroupCategoryModelFromJSON(jsonValue));
    }

    /**
     * Gets the requested test group, identified by id.
     */
    async getTestGroupCategory(requestParameters: GetTestGroupCategoryRequest): Promise<TestGroupCategoryModel> {
        const response = await this.getTestGroupCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason the result is NKM.RTD.CampaignEditor.Prototypes.ErrorContract.
     * Update the current instance with the fulfilled model
     */
    async updateTestGroupCategoryRaw(requestParameters: UpdateTestGroupCategoryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTestGroupCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestGroupCategories/Update/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TestGroupCategoryModelToJSON(requestParameters.testGroupCategoryModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason the result is NKM.RTD.CampaignEditor.Prototypes.ErrorContract.
     * Update the current instance with the fulfilled model
     */
    async updateTestGroupCategory(requestParameters: UpdateTestGroupCategoryRequest): Promise<void> {
        await this.updateTestGroupCategoryRaw(requestParameters);
    }

}
