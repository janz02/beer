/* tslint:disable */
/* eslint-disable */
/**
 * NKM RTD CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SiteLevelSettingDto,
    SiteLevelSettingDtoFromJSON,
    SiteLevelSettingDtoToJSON,
    SiteLevelSettingDtoPaginatedSearchResponse,
    SiteLevelSettingDtoPaginatedSearchResponseFromJSON,
    SiteLevelSettingDtoPaginatedSearchResponseToJSON,
    SiteLevelSettingModel,
    SiteLevelSettingModelFromJSON,
    SiteLevelSettingModelToJSON,
} from '../models';

export interface GetSiteLevelSettingRequest {
    id: number;
}

export interface GetSiteLevelSettingsRequest {
    _queryParameters?: { [key: string]: string; };
}

export interface UpdateSiteLevelSettingRequest {
    id: number;
    siteLevelSettingModel?: SiteLevelSettingModel;
}

/**
 * no description
 */
export class SiteLevelSettingsApi extends runtime.BaseAPI {

    /**
     * Get site level setting by id
     */
    async getSiteLevelSettingRaw(requestParameters: GetSiteLevelSettingRequest): Promise<runtime.ApiResponse<SiteLevelSettingDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSiteLevelSetting.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SiteLevelSettings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteLevelSettingDtoFromJSON(jsonValue));
    }

    /**
     * Get site level setting by id
     */
    async getSiteLevelSetting(requestParameters: GetSiteLevelSettingRequest): Promise<SiteLevelSettingDto> {
        const response = await this.getSiteLevelSettingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all site level settings
     */
    async getSiteLevelSettingsRaw(requestParameters: GetSiteLevelSettingsRequest): Promise<runtime.ApiResponse<SiteLevelSettingDtoPaginatedSearchResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters._queryParameters !== undefined) {
            queryParameters['queryParameters'] = requestParameters._queryParameters;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SiteLevelSettings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteLevelSettingDtoPaginatedSearchResponseFromJSON(jsonValue));
    }

    /**
     * Get all site level settings
     */
    async getSiteLevelSettings(requestParameters: GetSiteLevelSettingsRequest): Promise<SiteLevelSettingDtoPaginatedSearchResponse> {
        const response = await this.getSiteLevelSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update site level setting item
     */
    async updateSiteLevelSettingRaw(requestParameters: UpdateSiteLevelSettingRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSiteLevelSetting.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SiteLevelSettings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SiteLevelSettingModelToJSON(requestParameters.siteLevelSettingModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update site level setting item
     */
    async updateSiteLevelSetting(requestParameters: UpdateSiteLevelSettingRequest): Promise<void> {
        await this.updateSiteLevelSettingRaw(requestParameters);
    }

}
