/* tslint:disable */
/* eslint-disable */
/**
 * NKM RTD CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SegmentationCategory,
    SegmentationCategoryFromJSON,
    SegmentationCategoryToJSON,
    SegmentationCategoryPaginatedSearchResponse,
    SegmentationCategoryPaginatedSearchResponseFromJSON,
    SegmentationCategoryPaginatedSearchResponseToJSON,
} from '../models';

export interface CreateSegmentationCategoryRequest {
    segmentationCategory?: SegmentationCategory;
}

export interface DeleteSegmentationCategoryRequest {
    id: number;
}

export interface GetManySegmentationCategoriesRequest {
    ids?: Array<number>;
}

export interface GetSegmentationCategoriesRequest {
    _queryParameters?: { [key: string]: string; };
}

export interface GetSegmentationCategoryRequest {
    id: number;
}

export interface UpdateSegmentationCategoryRequest {
    id: number;
    segmentationCategory?: SegmentationCategory;
}

/**
 * no description
 */
export class SegmentationCategoriesApi extends runtime.BaseAPI {

    /**
     * Creates the dedicates segmentation category. The creation will results in an   identification, assigned to the current instance.
     */
    async createSegmentationCategoryRaw(requestParameters: CreateSegmentationCategoryRequest): Promise<runtime.ApiResponse<number>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SegmentationCategories/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SegmentationCategoryToJSON(requestParameters.segmentationCategory),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates the dedicates segmentation category. The creation will results in an   identification, assigned to the current instance.
     */
    async createSegmentationCategory(requestParameters: CreateSegmentationCategoryRequest): Promise<number> {
        const response = await this.createSegmentationCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g.: segmentation assigned to the category, result is   Microsoft.AspNetCore.Mvc.ForbidResult.
     * Delete the item signed with the id.
     */
    async deleteSegmentationCategoryRaw(requestParameters: DeleteSegmentationCategoryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSegmentationCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SegmentationCategories/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g.: segmentation assigned to the category, result is   Microsoft.AspNetCore.Mvc.ForbidResult.
     * Delete the item signed with the id.
     */
    async deleteSegmentationCategory(requestParameters: DeleteSegmentationCategoryRequest): Promise<void> {
        await this.deleteSegmentationCategoryRaw(requestParameters);
    }

    /**
     * Returns the segmentation categories identified by the ids.
     */
    async getManySegmentationCategoriesRaw(requestParameters: GetManySegmentationCategoriesRequest): Promise<runtime.ApiResponse<Array<SegmentationCategory>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SegmentationCategories/GetMany/many`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SegmentationCategoryFromJSON));
    }

    /**
     * Returns the segmentation categories identified by the ids.
     */
    async getManySegmentationCategories(requestParameters: GetManySegmentationCategoriesRequest): Promise<Array<SegmentationCategory>> {
        const response = await this.getManySegmentationCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the segmentation categories for the actual query.
     */
    async getSegmentationCategoriesRaw(requestParameters: GetSegmentationCategoriesRequest): Promise<runtime.ApiResponse<SegmentationCategoryPaginatedSearchResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters._queryParameters !== undefined) {
            queryParameters['queryParameters'] = requestParameters._queryParameters;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SegmentationCategories/Get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SegmentationCategoryPaginatedSearchResponseFromJSON(jsonValue));
    }

    /**
     * Returns the segmentation categories for the actual query.
     */
    async getSegmentationCategories(requestParameters: GetSegmentationCategoriesRequest): Promise<SegmentationCategoryPaginatedSearchResponse> {
        const response = await this.getSegmentationCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the requested segmentation category, identified by id.
     */
    async getSegmentationCategoryRaw(requestParameters: GetSegmentationCategoryRequest): Promise<runtime.ApiResponse<SegmentationCategory>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSegmentationCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SegmentationCategories/Get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SegmentationCategoryFromJSON(jsonValue));
    }

    /**
     * Gets the requested segmentation category, identified by id.
     */
    async getSegmentationCategory(requestParameters: GetSegmentationCategoryRequest): Promise<SegmentationCategory> {
        const response = await this.getSegmentationCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason the result is NKM.RTD.CampaignEditor.Prototypes.ErrorContract.
     * Update the current instance with the fulfilled model
     */
    async updateSegmentationCategoryRaw(requestParameters: UpdateSegmentationCategoryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSegmentationCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SegmentationCategories/Update/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SegmentationCategoryToJSON(requestParameters.segmentationCategory),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason the result is NKM.RTD.CampaignEditor.Prototypes.ErrorContract.
     * Update the current instance with the fulfilled model
     */
    async updateSegmentationCategory(requestParameters: UpdateSegmentationCategoryRequest): Promise<void> {
        await this.updateSegmentationCategoryRaw(requestParameters);
    }

}
