// /* tslint:disable */
// /* eslint-disable */
// /**
//  * NKM RTD CampaignEditor API
//  * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
//  *
//  * The version of the OpenAPI document: v1
//  *
//  *
//  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
//  * https://openapi-generator.tech
//  * Do not edit the class manually.
//  */

// import * as runtime from '../runtime'
// import {
//     ChangeForgotPasswordRequest,
//     ChangeForgotPasswordRequestFromJSON,
//     ChangeForgotPasswordRequestToJSON,
//     CreateUserRequest,
//     CreateUserRequestFromJSON,
//     CreateUserRequestToJSON,
//     ForgotPasswordRequest,
//     ForgotPasswordRequestFromJSON,
//     ForgotPasswordRequestToJSON,
//     ProblemDetails,
//     ProblemDetailsFromJSON,
//     ProblemDetailsToJSON,
//     UserExtensionInfoModel,
//     UserExtensionInfoModelFromJSON,
//     UserExtensionInfoModelToJSON,
//     ValidatePasswordChangeRequest,
//     ValidatePasswordChangeRequestFromJSON,
//     ValidatePasswordChangeRequestToJSON,
// } from '../models';

// export interface ActivateStandaloneUserRequest {
//     id: number;
// }

// export interface ChangeForgotPasswordRequest {
//     changeForgotPasswordRequest?: ChangeForgotPasswordRequest;
// }

// export interface CreateStandaloneUserRequest {
//     createUserRequest?: CreateUserRequest;
// }

// export interface CreateStandaloneUserByAdminRequest {
//     createUserRequest?: CreateUserRequest;
// }

// export interface ForgotPasswordRequest {
//     forgotPasswordRequest?: ForgotPasswordRequest;
// }

// export interface GetStandaloneUserRequest {
//     id: number;
// }

// export interface SaveExtensionInfoRequest {
//     userExtensionInfoModel?: UserExtensionInfoModel;
// }

// export interface ValidatePasswordChangeRequest {
//     validatePasswordChangeRequest?: ValidatePasswordChangeRequest;
// }

// /**
//  * no description
//  */
// export class StandaloneUsersApi extends runtime.BaseAPI {

//     /**
//      * Activates a standalone user.
//      */
//     async activateStandaloneUserRaw(requestParameters: ActivateStandaloneUserRequest): Promise<runtime.ApiResponse<void>> {
//         if (requestParameters.id === null || requestParameters.id === undefined) {
//             throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling activateStandaloneUser.');
//         }

//         const queryParameters: runtime.HTTPQuery = {};

//         const headerParameters: runtime.HTTPHeaders = {};

//         if (this.configuration && this.configuration.apiKey) {
//             headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
//         }

//         const response = await this.request({
//             path: `/api/StandaloneUsers/Activate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
//             method: 'POST',
//             headers: headerParameters,
//             query: queryParameters,
//         });

//         return new runtime.VoidApiResponse(response);
//     }

//     /**
//      * Activates a standalone user.
//      */
//     async activateStandaloneUser(requestParameters: ActivateStandaloneUserRequest): Promise<void> {
//         await this.activateStandaloneUserRaw(requestParameters);
//     }

//     /**
//      * User is identified by the Guid in the request.                Validation error messages (currently with 500 status code):  - \"the request has to contain at least one property to insert or update.\"  - \"InvalidPhoneNumber\"  - \"CompanyTooLong\" - if not null and longer than 200  - \"DepartmentTooLong\" - if not null and longer than 200  - \"PositionTooLong\" - if not null and longer than 200
//      * Sets the user\'s password to the desired new password.  Optionally can be used to change a subset of the user\'s extension information.
//      */
//     async changeForgotPasswordRaw(requestParameters: ChangeForgotPasswordRequest): Promise<runtime.ApiResponse<void>> {
//         const queryParameters: runtime.HTTPQuery = {};

//         const headerParameters: runtime.HTTPHeaders = {};

//         headerParameters['Content-Type'] = 'application/json-patch+json';

//         const response = await this.request({
//             path: `/api/StandaloneUsers/ChangeForgotPassword`,
//             method: 'POST',
//             headers: headerParameters,
//             query: queryParameters,
//             body: ChangeForgotPasswordRequestToJSON(requestParameters.changeForgotPasswordRequest),
//         });

//         return new runtime.VoidApiResponse(response);
//     }

//     /**
//      * User is identified by the Guid in the request.                Validation error messages (currently with 500 status code):  - \"the request has to contain at least one property to insert or update.\"  - \"InvalidPhoneNumber\"  - \"CompanyTooLong\" - if not null and longer than 200  - \"DepartmentTooLong\" - if not null and longer than 200  - \"PositionTooLong\" - if not null and longer than 200
//      * Sets the user\'s password to the desired new password.  Optionally can be used to change a subset of the user\'s extension information.
//      */
//     async changeForgotPassword(requestParameters: ChangeForgotPasswordRequest): Promise<void> {
//         await this.changeForgotPasswordRaw(requestParameters);
//     }

//     /**
//      * Add a new Standalone user to DB requested by the user then send email to user with invitation link  (not implemented yet)
//      */
//     async createStandaloneUserRaw(requestParameters: CreateStandaloneUserRequest): Promise<runtime.ApiResponse<void>> {
//         const queryParameters: runtime.HTTPQuery = {};

//         const headerParameters: runtime.HTTPHeaders = {};

//         headerParameters['Content-Type'] = 'application/json-patch+json';

//         const response = await this.request({
//             path: `/api/StandaloneUsers/CreateUser`,
//             method: 'POST',
//             headers: headerParameters,
//             query: queryParameters,
//             body: CreateUserRequestToJSON(requestParameters.createUserRequest),
//         });

//         return new runtime.VoidApiResponse(response);
//     }

//     /**
//      * Add a new Standalone user to DB requested by the user then send email to user with invitation link  (not implemented yet)
//      */
//     async createStandaloneUser(requestParameters: CreateStandaloneUserRequest): Promise<void> {
//         await this.createStandaloneUserRaw(requestParameters);
//     }

//     /**
//      * Add new user by admin then send email (not implemented yet) to user with invitation link
//      */
//     async createStandaloneUserByAdminRaw(requestParameters: CreateStandaloneUserByAdminRequest): Promise<runtime.ApiResponse<number>> {
//         const queryParameters: runtime.HTTPQuery = {};

//         const headerParameters: runtime.HTTPHeaders = {};

//         headerParameters['Content-Type'] = 'application/json-patch+json';

//         if (this.configuration && this.configuration.apiKey) {
//             headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
//         }

//         const response = await this.request({
//             path: `/api/StandaloneUsers/CreateUserByAdmin`,
//             method: 'POST',
//             headers: headerParameters,
//             query: queryParameters,
//             body: CreateUserRequestToJSON(requestParameters.createUserRequest),
//         });

//         return new runtime.TextApiResponse(response) as any;
//     }

//     /**
//      * Add new user by admin then send email (not implemented yet) to user with invitation link
//      */
//     async createStandaloneUserByAdmin(requestParameters: CreateStandaloneUserByAdminRequest): Promise<number> {
//         const response = await this.createStandaloneUserByAdminRaw(requestParameters);
//         return await response.value();
//     }

//     /**
//      * - If there is no user for that e-mail, throws \"NoExistingUserWithTheGivenEmail\".  - If the user is inactive, throws \"UserIsInactive\".  - If there is an existing forgotten password request for the user, deletes and recreates it.
//      * Initializes a forgot password operation for the given standalone user.
//      */
//     async forgotPasswordRaw(requestParameters: ForgotPasswordRequest): Promise<runtime.ApiResponse<void>> {
//         const queryParameters: runtime.HTTPQuery = {};

//         const headerParameters: runtime.HTTPHeaders = {};

//         headerParameters['Content-Type'] = 'application/json-patch+json';

//         const response = await this.request({
//             path: `/api/StandaloneUsers/ForgotPassword`,
//             method: 'POST',
//             headers: headerParameters,
//             query: queryParameters,
//             body: ForgotPasswordRequestToJSON(requestParameters.forgotPasswordRequest),
//         });

//         return new runtime.VoidApiResponse(response);
//     }

//     /**
//      * - If there is no user for that e-mail, throws \"NoExistingUserWithTheGivenEmail\".  - If the user is inactive, throws \"UserIsInactive\".  - If there is an existing forgotten password request for the user, deletes and recreates it.
//      * Initializes a forgot password operation for the given standalone user.
//      */
//     async forgotPassword(requestParameters: ForgotPasswordRequest): Promise<void> {
//         await this.forgotPasswordRaw(requestParameters);
//     }

//     /**
//      * Inactivates a standalone user.
//      */
//     async getStandaloneUserRaw(requestParameters: GetStandaloneUserRequest): Promise<runtime.ApiResponse<void>> {
//         if (requestParameters.id === null || requestParameters.id === undefined) {
//             throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStandaloneUser.');
//         }

//         const queryParameters: runtime.HTTPQuery = {};

//         const headerParameters: runtime.HTTPHeaders = {};

//         if (this.configuration && this.configuration.apiKey) {
//             headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
//         }

//         const response = await this.request({
//             path: `/api/StandaloneUsers/Inactivate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
//             method: 'POST',
//             headers: headerParameters,
//             query: queryParameters,
//         });

//         return new runtime.VoidApiResponse(response);
//     }

//     /**
//      * Inactivates a standalone user.
//      */
//     async getStandaloneUser(requestParameters: GetStandaloneUserRequest): Promise<void> {
//         await this.getStandaloneUserRaw(requestParameters);
//     }

//     /**
//      * Validation error messages (currently with 500 status code):  - \"InputDataCannotBeNullOrEmpty\" if the whole model object is null  - \"the request has to contain at least one property to insert or update.\"  - \"InvalidPhoneNumber\"  - \"CompanyTooLong\" - if not null and longer than 200  - \"DepartmentTooLong\" - if not null and longer than 200  - \"PositionTooLong\" - if not null and longer than 200
//      * Insert or update extension info for user
//      */
//     async saveExtensionInfoRaw(requestParameters: SaveExtensionInfoRequest): Promise<runtime.ApiResponse<void>> {
//         const queryParameters: runtime.HTTPQuery = {};

//         const headerParameters: runtime.HTTPHeaders = {};

//         headerParameters['Content-Type'] = 'application/json-patch+json';

//         if (this.configuration && this.configuration.apiKey) {
//             headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
//         }

//         const response = await this.request({
//             path: `/api/StandaloneUsers/SaveExtensionInformation`,
//             method: 'POST',
//             headers: headerParameters,
//             query: queryParameters,
//             body: UserExtensionInfoModelToJSON(requestParameters.userExtensionInfoModel),
//         });

//         return new runtime.VoidApiResponse(response);
//     }

//     /**
//      * Validation error messages (currently with 500 status code):  - \"InputDataCannotBeNullOrEmpty\" if the whole model object is null  - \"the request has to contain at least one property to insert or update.\"  - \"InvalidPhoneNumber\"  - \"CompanyTooLong\" - if not null and longer than 200  - \"DepartmentTooLong\" - if not null and longer than 200  - \"PositionTooLong\" - if not null and longer than 200
//      * Insert or update extension info for user
//      */
//     async saveExtensionInfo(requestParameters: SaveExtensionInfoRequest): Promise<void> {
//         await this.saveExtensionInfoRaw(requestParameters);
//     }

//     /**
//      * Validates a password change GUID, and if it is expired, sends a new one (email sending is not implemented yet).
//      */
//     async validatePasswordChangeRaw(requestParameters: ValidatePasswordChangeRequest): Promise<runtime.ApiResponse<void>> {
//         const queryParameters: runtime.HTTPQuery = {};

//         const headerParameters: runtime.HTTPHeaders = {};

//         headerParameters['Content-Type'] = 'application/json-patch+json';

//         const response = await this.request({
//             path: `/api/StandaloneUsers/ValidatePasswordChange`,
//             method: 'POST',
//             headers: headerParameters,
//             query: queryParameters,
//             body: ValidatePasswordChangeRequestToJSON(requestParameters.validatePasswordChangeRequest),
//         });

//         return new runtime.VoidApiResponse(response);
//     }

//     /**
//      * Validates a password change GUID, and if it is expired, sends a new one (email sending is not implemented yet).
//      */
//     async validatePasswordChange(requestParameters: ValidatePasswordChangeRequest): Promise<void> {
//         await this.validatePasswordChangeRaw(requestParameters);
//     }

// }
