{
  "openapi": "3.0.1",
  "info": {
    "title": "NKM RTD CampaignEditor API",
    "description": "<h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>",
    "version": "v1"
  },
  "paths": {
    "/api/Accounts/Me": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Returns basic information about the current user. The profile will be returned.",
        "description": "Has only temporary implementation on service since there is no exact functional\r\nrequirement for the profile!",
        "operationId": "getMyAccount",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Accounts/GetUsers": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Returns all the users stored in the system.",
        "operationId": "getUserAccounts",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserVm"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Accounts/GetAllAdGroup": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Query for groups in the system which were synchronized from the domain Active Directory",
        "operationId": "getAdGroups",
        "parameters": [
          {
            "name": "permissionId",
            "in": "query",
            "description": "Permission id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AdGroupVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdGroupVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdGroupVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Accounts/GetUsersForPermission": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Query for all directly referenced users for the given permissionId.",
        "operationId": "getUsersForPermission",
        "parameters": [
          {
            "name": "permissionId",
            "in": "query",
            "description": "Permission id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Accounts/GetAllFunctionPermission": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Query for all function permission for the given permissionId.",
        "operationId": "getFunctionPermissions",
        "parameters": [
          {
            "name": "permissionId",
            "in": "query",
            "description": "Permission id",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionPermissionVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionPermissionVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionPermissionVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Accounts/Login": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Tries to authenticate with the given information against the configured Active\r\nDirectory.",
        "description": "Gives Microsoft.AspNetCore.Mvc.UnauthorizedResult in case user was not found and in case\r\nany error occurs handles as Microsoft.AspNetCore.Mvc.BadRequestResult.",
        "operationId": "login",
        "requestBody": {
          "description": "The authentication parameters fulfilled model.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/Accounts/RefreshToken": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Returns refresh token for the current user, for long term session.",
        "description": "Gives Microsoft.AspNetCore.Mvc.UnauthorizedResult in case user was not found and in case\r\nany error occurs handles as Microsoft.AspNetCore.Mvc.BadRequestResult.",
        "operationId": "refreshToken",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Accounts/Logout": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Removes the refresh token, effectively logging the user out.",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/CampaignResults/GetEvents": {
      "get": {
        "tags": [
          "CampaignResults"
        ],
        "summary": "Queries for the result information from the database with the given filters and parameters",
        "operationId": "getEvents",
        "parameters": [
          {
            "name": "CampaignId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SegmentationId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "TemplateId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BpId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResultEventVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResultEventVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResultEventVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/CampaignResults/DownloadCsv": {
      "get": {
        "tags": [
          "CampaignResults"
        ],
        "summary": "Download a CSV structured file for a campaign with a given segmentation. Provides \r\ninfromations which are already processed only.",
        "operationId": "downloadCsv",
        "parameters": [
          {
            "name": "campaignId",
            "in": "query",
            "description": "The campaign identifier",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "segmentationId",
            "in": "query",
            "description": "The corresponding segmentation identifier",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/CampaignResults/UploadCsv": {
      "post": {
        "tags": [
          "CampaignResults"
        ],
        "summary": "Upload the results made for a M:NKM.RTD.CampaignEditor.Controllers.CampaignResultsController.DownloadCsv(System.Int32,System.Int32) request to\r\na given sharepoint folder. The basic sharepoint configured in the system startup.",
        "operationId": "uploadCsvForCampaignResult",
        "requestBody": {
          "description": "The model determine the path on sharepoint and the CSV to be uploaded",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadCsvCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadCsvCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadCsvCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UploadCsvCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Campaigns/GetCampaigns": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Returns the campaigns for the actual query.",
        "description": "Ther is an implicit parameter which query NKM.RTD.CampaignEditor.Prototypes.CampaignStatus.DraftCampaign\r\nonly for the user who created the draft state, in order to protect it from other users\r\nand let a sandbox campaign designment for the end user.",
        "operationId": "getCampaigns",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsTechnical",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "TechnicalName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Responsible",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CreatedBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "StartDateFrom",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RealStartDateFrom",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "StartDateTo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RealStartDateTo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EndDateFrom",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RealEndDateFrom",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "EndDateTo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RealEndDateTo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CreatedDateFrom",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CreatedDateTo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ProductId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Statuses",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignListItemVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignListItemVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignListItemVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Campaigns/DeleteCampaign/{id}": {
      "delete": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Delete the signed campaign with the id.",
        "operationId": "deleteCampaign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identification of the campaign to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Campaigns/GetCampaignById/{id}": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Query for a dedicates campaign dentified by id.",
        "operationId": "getCampaign",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identification of the campaign to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Campaigns/Create": {
      "post": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Creates the dedicates campaign. The creation will results in an identification,\r\nassigned to the current instance.",
        "operationId": "createCampaign",
        "requestBody": {
          "description": "The campaign to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCampaignCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCampaignCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCampaignCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCampaignCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead, CampaignEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Campaigns/Update": {
      "put": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Update the current instance with the fulfilled model",
        "operationId": "updateCampaign",
        "requestBody": {
          "description": "The desired modifications to be made. All value has to be filled!",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCampaignCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCampaignCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCampaignCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCampaignCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead, CampaignEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Campaigns/Approve": {
      "put": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Dedicated endpoint for statua change from NKM.RTD.CampaignEditor.Prototypes.CampaignStatus.SentToTestGroups\r\nto NKM.RTD.CampaignEditor.Prototypes.CampaignStatus.Approved for the indicated id identified\r\ncampaign.",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.",
        "operationId": "approveCampaign",
        "requestBody": {
          "description": "The identification of the campaign to be modifies.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "text/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead, CampaignEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Campaigns/Disapprove": {
      "put": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Dedicated endpoint for statua change from NKM.RTD.CampaignEditor.Prototypes.CampaignStatus.Approved\r\nto NKM.RTD.CampaignEditor.Prototypes.CampaignStatus.Created for the indicated id identified\r\ncampaign.",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.",
        "operationId": "disapproveCampaign",
        "requestBody": {
          "description": "The identification of the campaign to be modifies.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "text/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead, CampaignEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Campaigns/StartNow": {
      "put": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Dedicated endpoint for statua change from NKM.RTD.CampaignEditor.Prototypes.CampaignStatus.Approved\r\nto NKM.RTD.CampaignEditor.Prototypes.CampaignStatus.StartedManually for the indicated id identified\r\ncampaign.",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.",
        "operationId": "startCampaignImmediately",
        "requestBody": {
          "description": "The identification of the campaign to be modifies.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "text/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead, CampaignEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Campaigns/StopNow": {
      "put": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Dedicated endpoint for statua change from NKM.RTD.CampaignEditor.Prototypes.CampaignStatus.Started or \r\nNKM.RTD.CampaignEditor.Prototypes.CampaignStatus.StartedManually to NKM.RTD.CampaignEditor.Prototypes.CampaignStatus.StoppedManually \r\nfor the indicated id identified campaign.",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.",
        "operationId": "stopCampaignImmediately",
        "requestBody": {
          "description": "The identification of the campaign to be modifies.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "text/json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead, CampaignEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Campaigns/SendToTestGroup/{CampaignId}": {
      "put": {
        "tags": [
          "Campaigns"
        ],
        "summary": "Dedicated endpoint for status change from NKM.RTD.CampaignEditor.Prototypes.CampaignStatus.Created\r\nto NKM.RTD.CampaignEditor.Prototypes.CampaignStatus.SentToTestGroups for the indicated model \r\nidentified campaign.",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.",
        "operationId": "sendCampaignToTestGroup",
        "parameters": [
          {
            "name": "CampaignId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identification of the campaign to be modified with the given options.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignTestGroupCategoriesCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignTestGroupCategoriesCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignTestGroupCategoriesCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignTestGroupCategoriesCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead, CampaignEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Channels/GetOne/{id}": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Gets the requested channel, identified by id.",
        "operationId": "getChannel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the channel to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Channels/GetAll": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Returns the channels for the actual query.",
        "operationId": "getChannels",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Channels/GetMany/many": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Returns the channels identified by the ids.",
        "operationId": "getManyChannels",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "The identifications of the channels to be returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelVm"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Emails/Send": {
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Sends the appropriate campaigns for the message processor engine.",
        "description": "Sent message not means action has been made, only has chance for an action if the\r\nappropriate conditions are met.",
        "operationId": "sendEmail",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionEvent"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionEvent"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionEvent"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [EmailSend]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Languages": {
      "get": {
        "tags": [
          "Languages"
        ],
        "summary": "Returns the languages for the actual query.",
        "operationId": "getLanguages",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LanguagesVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LanguagesVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LanguagesVm"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Localizations/QueryLocalization/{langId}": {
      "get": {
        "tags": [
          "Localizations"
        ],
        "summary": "Returns dynamic content for the frontend localization dictionaries.",
        "operationId": "getQueryLocalizations",
        "parameters": [
          {
            "name": "langId",
            "in": "path",
            "description": "the language identification. e.g.: hu-HU",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Permissions/GetAll": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Returns the permissions for the actual query.",
        "operationId": "getPermissions",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Permissions/GetOne/{id}": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Gets the requested permission, identified by id.",
        "operationId": "getPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the product to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Permissions/GetMany/many": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Returns the permissions identified by the ids.",
        "operationId": "getManyPermissions",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "The identifications of the permissions to be returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionVm"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Permissions/Create": {
      "post": {
        "tags": [
          "Permissions"
        ],
        "summary": "Creates the dedicates permisson. The creation will results in an identification,\r\nassigned to the current instance.",
        "operationId": "createPermission",
        "requestBody": {
          "description": "The permission to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdatePermissionCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdatePermissionCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdatePermissionCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdatePermissionCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Permissions/Update/{id}": {
      "put": {
        "tags": [
          "Permissions"
        ],
        "summary": "Update the current instance with the fulfilled model",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason the result is Microsoft.AspNetCore.Mvc.ForbidResult.",
        "operationId": "updatePermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identification of permission to be changed.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The desired modifications to be made. All value has to be filled!",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdatePermissionCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdatePermissionCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdatePermissionCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdatePermissionCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Permissions/Delete/{id}": {
      "delete": {
        "tags": [
          "Permissions"
        ],
        "summary": "Delete the item signed with the id.",
        "operationId": "deletePermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identification of the permissiom to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Products/GetOne/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Gets the requested product, identified by id.",
        "operationId": "getProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the product to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Products/GetAll": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Returns the products for the actual query.",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Products/GetMany/many": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Returns the products identified by the ids.",
        "operationId": "getManyProducts",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "The identifications of the products to be returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductVm"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Products/Create": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Creates the dedicates product. The creation will results in an identification,\r\nassigned to the current instance.",
        "operationId": "createProduct",
        "requestBody": {
          "description": "The product to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Products/Update/{id}": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update the current instance with the fulfilled model",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason the result is NKM.RTD.CampaignEditor.Prototypes.ErrorContract.",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identification of product to be changed.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The desired modifications to be made. All value has to be filled!",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Products/Delete/{id}": {
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete the item signed with the id.",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason - e.g.: Campaign assigned to the product, result is \r\nMicrosoft.AspNetCore.Mvc.ForbidResult.",
        "operationId": "deleteProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identification of the product to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/SegmentationCategories/GetMany/many": {
      "get": {
        "tags": [
          "SegmentationCategories"
        ],
        "summary": "Returns the segmentation categories identified by the ids.",
        "operationId": "getManySegmentationCategories",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "The identifications of the segmentation categories to be returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SegmentationCategoryVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SegmentationCategoryVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SegmentationCategoryVm"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/SegmentationCategories/Get": {
      "get": {
        "tags": [
          "SegmentationCategories"
        ],
        "summary": "Returns the segmentation categories for the actual query.",
        "operationId": "getSegmentationCategories",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationCategoryVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationCategoryVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationCategoryVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/SegmentationCategories/Get/{id}": {
      "get": {
        "tags": [
          "SegmentationCategories"
        ],
        "summary": "Gets the requested segmentation category, identified by id.",
        "operationId": "getSegmentationCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the segmentation category to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationCategoryVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationCategoryVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationCategoryVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/SegmentationCategories/Create": {
      "post": {
        "tags": [
          "SegmentationCategories"
        ],
        "summary": "Creates the dedicates segmentation category. The creation will results in an \r\nidentification, assigned to the current instance.",
        "operationId": "createSegmentationCategory",
        "requestBody": {
          "description": "The segmentation category to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentationCategoryCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentationCategoryCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentationCategoryCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentationCategoryCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/SegmentationCategories/Update/{id}": {
      "put": {
        "tags": [
          "SegmentationCategories"
        ],
        "summary": "Update the current instance with the fulfilled model",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason the result is NKM.RTD.CampaignEditor.Prototypes.ErrorContract.",
        "operationId": "updateSegmentationCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identification of segmentation category to be changed.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The desired modifications to be made. All value has to be filled!",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSegmentationCategoryCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSegmentationCategoryCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSegmentationCategoryCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSegmentationCategoryCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/SegmentationCategories/Delete/{id}": {
      "delete": {
        "tags": [
          "SegmentationCategories"
        ],
        "summary": "Delete the item signed with the id.",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason - e.g.: segmentation assigned to the category, result is \r\nMicrosoft.AspNetCore.Mvc.ForbidResult.",
        "operationId": "deleteSegmentationCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identification of the segmentation to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/SegmentationQueries/Get/{segmentationId}": {
      "get": {
        "tags": [
          "SegmentationQueries"
        ],
        "summary": "Gets the requested query, identified by segmentationId.",
        "operationId": "getSegmentationQuery",
        "parameters": [
          {
            "name": "segmentationId",
            "in": "path",
            "description": "The id of the query to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationQueryVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationQueryVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationQueryVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [SegmentationRead, SegmentationEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/SegmentationQueries/Query": {
      "post": {
        "tags": [
          "SegmentationQueries"
        ],
        "summary": "Used to query the backend for the actual result of a query builder tree/query\r\nDue to known limitations of the GET request, URL max length, used with POST \r\nto bypass the limitations. As much as GET body request is not well supported,\r\nthis violation was introduced.",
        "operationId": "querySegmentationQueries",
        "requestBody": {
          "description": "The base data to run agains the data.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryBuilderQuery"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryBuilderQuery"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryBuilderQuery"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/QueryBuilderQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SegmentationQueryResultVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SegmentationQueryResultVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SegmentationQueryResultVm"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [SegmentationRead, SegmentationEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/SegmentationQueries/QueryBuilderConfig": {
      "get": {
        "tags": [
          "SegmentationQueries"
        ],
        "summary": "Returns the configuration for the frontend controllers.",
        "description": "For further infromation https://github.com/ukrbublik/react-awesome-query-builder",
        "operationId": "getConfig",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderFieldConfigVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderFieldConfigVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBuilderFieldConfigVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [SegmentationRead, SegmentationEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/SegmentationQueries/MergeTags/{language}": {
      "get": {
        "tags": [
          "SegmentationQueries"
        ],
        "summary": "Returns a dictionary of user merge tags.\r\nKeys are displayable texts, values are column names from the top level table of the query builder config.",
        "operationId": "getMergeTags",
        "parameters": [
          {
            "name": "language",
            "in": "path",
            "description": "Language code of dictionary keys. Example: \"hu\", \"en\".",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [SegmentationRead, SegmentationEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Segmentations/Get": {
      "get": {
        "tags": [
          "Segmentations"
        ],
        "summary": "Returns the segmentation for the actual query.",
        "operationId": "getSegmentations",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CreatedDateFrom",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CreatedDateTo",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CategoryName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SegmentationCategoryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SegmentationType"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentListItemVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentListItemVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentListItemVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Segmentations/Get/{id}": {
      "get": {
        "tags": [
          "Segmentations"
        ],
        "summary": "Gets the requested segmentation, identified by id.",
        "operationId": "getSegmentation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the segmentation to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentationVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Segmentations/Create": {
      "post": {
        "tags": [
          "Segmentations"
        ],
        "summary": "Creates the dedicates segmentation. The creation will results in an identification,\r\nassigned to the current instance.",
        "operationId": "createSegmentation",
        "requestBody": {
          "description": "The segmentation to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateSegmentationCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateSegmentationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateSegmentationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateSegmentationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Segmentations/Update": {
      "post": {
        "tags": [
          "Segmentations"
        ],
        "summary": "Update the current instance with the fulfilled model",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason the result is NKM.RTD.CampaignEditor.Prototypes.ErrorContract.",
        "operationId": "updateSegmentation",
        "requestBody": {
          "description": "The desired modifications to be made. All value has to be filled!",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateSegmentationCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateSegmentationCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateSegmentationCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUpdateSegmentationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Segmentations/DownloadBusinessPartners/{id}": {
      "get": {
        "tags": [
          "Segmentations"
        ],
        "summary": "Downloads the partners who were contracted in this segmentation.",
        "description": "TODO: Investigation these to where to refact. Where they are used exactly?",
        "operationId": "downloadBusinessPartners",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the requested segmentation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Segmentations/UploadCsv": {
      "post": {
        "tags": [
          "Segmentations"
        ],
        "summary": "Upload a CSV segment which will act like a normal segmentation.",
        "description": "These partners are different than others, has to be different id's as well, \r\nalthough they will act like a normal segment partners and can have problems \r\nduring matching request from EDE",
        "operationId": "uploadCsvForSegmentation",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "contentType": "multipart/form-data",
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Segmentations/CreateFromCsv": {
      "post": {
        "tags": [
          "Segmentations"
        ],
        "summary": "Create a CSV like segment with the given partners.",
        "description": "These partners are different than others, has to be different id's as well, \r\nalthough they will act like a normal segment partners and can have problems \r\nduring matching request from EDE",
        "operationId": "createFromCsv",
        "requestBody": {
          "description": "The partner upload with the name of the extractes input.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentationFromCsvCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentationFromCsvCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentationFromCsvCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentationFromCsvCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Segmentations/GetDiscountSegmentationById/{id}": {
      "get": {
        "tags": [
          "Segmentations"
        ],
        "summary": "Get the connected discound based on the id identifier.",
        "operationId": "getDiscountSegmentation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The segmentation id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountSegmentVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountSegmentVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountSegmentVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Sharepoint/GetFileStructureFromSharepoint": {
      "get": {
        "tags": [
          "Sharepoint"
        ],
        "summary": "Returns a folder structure of a dedicated - configured sharepoint folder. The \r\nmechanism can returns to file leaf and last folder leaf, depending upon the\r\nwithoutFile.",
        "operationId": "getFileStructure",
        "parameters": [
          {
            "name": "withoutFile",
            "in": "query",
            "description": "Is the leaf should be folders or files.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeNodeVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeNodeVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TreeNodeVm"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Sharepoint/UploadFileFromSharepoint": {
      "post": {
        "tags": [
          "Sharepoint"
        ],
        "summary": "Creates segmentation via NKM.RTD.CampaignEditor.Controllers.SegmentationsController used mchanism to\r\nprocess CSV and create segment. The file which selected on sharepoint got to be \r\na CSV.",
        "operationId": "uploadFromSharepoint",
        "requestBody": {
          "description": "The relative path on the sharepoint to be target of the selected file.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string"
              }
            },
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/SiteLevelSettings": {
      "get": {
        "tags": [
          "SiteLevelSettings"
        ],
        "summary": "Get all site level settings",
        "operationId": "getSiteLevelSettings",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteLevelSettingVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteLevelSettingVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteLevelSettingVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/SiteLevelSettings/{id}": {
      "get": {
        "tags": [
          "SiteLevelSettings"
        ],
        "summary": "Get site level setting by id",
        "operationId": "getSiteLevelSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteLevelSettingVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteLevelSettingVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteLevelSettingVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "put": {
        "tags": [
          "SiteLevelSettings"
        ],
        "summary": "Update site level setting item",
        "operationId": "updateSiteLevelSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Item to updated",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSiteLevelSettingCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSiteLevelSettingCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSiteLevelSettingCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSiteLevelSettingCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/StandaloneUsers/CreateUser": {
      "post": {
        "tags": [
          "StandaloneUsers"
        ],
        "summary": "Add a new Standalone user to DB requested by the user then send email to user with invitation link\r\n(not implemented yet)",
        "operationId": "createStandaloneUser",
        "requestBody": {
          "description": "model contains basic information : name and email address",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The operation was successful."
          }
        }
      }
    },
    "/api/StandaloneUsers/Inactivate/{id}": {
      "post": {
        "tags": [
          "StandaloneUsers"
        ],
        "summary": "Inactivates a standalone user.",
        "operationId": "getStandaloneUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the standalone user.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [AdminEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/StandaloneUsers/Activate/{id}": {
      "post": {
        "tags": [
          "StandaloneUsers"
        ],
        "summary": "Activates a standalone user.",
        "operationId": "activateStandaloneUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the standalone user.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [AdminEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/StandaloneUsers/ValidatePasswordChange": {
      "post": {
        "tags": [
          "StandaloneUsers"
        ],
        "summary": "Validates a password change GUID, and if it is expired, sends a new one (email sending is not implemented yet).",
        "operationId": "validatePasswordChange",
        "requestBody": {
          "description": "Request object that contains the guid to be validated.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePasswordChangeCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePasswordChangeCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePasswordChangeCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ValidatePasswordChangeCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The password change is valid and usable"
          },
          "400": {
            "description": "\"InvalidPasswordChangeRequest\" or \"ExpiredPasswordChangeRequest\"",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/StandaloneUsers/ChangeForgotPassword": {
      "post": {
        "tags": [
          "StandaloneUsers"
        ],
        "summary": "Sets the user's password to the desired new password.\r\nOptionally can be used to change a subset of the user's extension information.",
        "description": "User is identified by the Guid in the request.\r\n            \r\nValidation error messages (currently with 500 status code):\r\n- \"the request has to contain at least one property to insert or update.\"\r\n- \"InvalidPhoneNumber\"\r\n- \"CompanyTooLong\" - if not null and longer than 200\r\n- \"DepartmentTooLong\" - if not null and longer than 200\r\n- \"PositionTooLong\" - if not null and longer than 200",
        "operationId": "changeForgotPassword",
        "requestBody": {
          "description": "The request which contains data to persist.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeForgotPasswordCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeForgotPasswordCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeForgotPasswordCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeForgotPasswordCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The operation was successful."
          }
        }
      }
    },
    "/api/StandaloneUsers/ForgotPassword": {
      "post": {
        "tags": [
          "StandaloneUsers"
        ],
        "summary": "Initializes a forgot password operation for the given standalone user.",
        "description": "- If there is no user for that e-mail, throws \"NoExistingUserWithTheGivenEmail\".\r\n- If the user is inactive, throws \"UserIsInactive\".\r\n- If there is an existing forgotten password request for the user, deletes and recreates it.",
        "operationId": "forgotPassword",
        "requestBody": {
          "description": "The request object which identifies the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/StandaloneUsers/ReSendPasswordChangeLink": {
      "post": {
        "tags": [
          "StandaloneUsers"
        ],
        "summary": "Resends the password change email to the given standalone user.",
        "description": "- If there is no user for that e-mail, throws \"NoExistingUserWithTheGivenEmail\".\r\n- If the user is inactive, throws \"UserIsInactive\".\r\n- If there is an existing password change request for the user, deletes and recreates it.",
        "operationId": "reSendPasswordChangeLink",
        "requestBody": {
          "description": "The request object which identifies the user.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResendPasswordChangeLinkCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendPasswordChangeLinkCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendPasswordChangeLinkCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResendPasswordChangeLinkCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [AdminEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/StandaloneUsers/CreateUserByAdmin": {
      "post": {
        "tags": [
          "StandaloneUsers"
        ],
        "summary": "Add new user by admin then send email (not implemented yet) to user with invitation link",
        "operationId": "createStandaloneUserByAdmin",
        "requestBody": {
          "description": "Contains BaseInformation : name and email address",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [AdminEdit]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/StandaloneUsers/SaveExtensionInformation": {
      "post": {
        "tags": [
          "StandaloneUsers"
        ],
        "summary": "Insert or update extension info for user",
        "description": "Validation error messages (currently with 500 status code):\r\n- \"InputDataCannotBeNullOrEmpty\" if the whole model object is null\r\n- \"the request has to contain at least one property to insert or update.\"\r\n- \"InvalidPhoneNumber\"\r\n- \"CompanyTooLong\" - if not null and longer than 200\r\n- \"DepartmentTooLong\" - if not null and longer than 200\r\n- \"PositionTooLong\" - if not null and longer than 200",
        "operationId": "saveExtensionInfo",
        "requestBody": {
          "description": "It contains company name, department, position, phone number and userid",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserExtensionInfoCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserExtensionInfoCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserExtensionInfoCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserExtensionInfoCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The operation was successful."
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/StandaloneUsers/GetUserExtensionInfoByPasswordChangeGuid/{guid}": {
      "get": {
        "tags": [
          "StandaloneUsers"
        ],
        "summary": "Gets the user extension info by the users password change guid.",
        "operationId": "getUserExtensionInfoByPasswordChangeGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid identifying the password change.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserExtensionInfoVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserExtensionInfoVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserExtensionInfoVm"
                }
              }
            }
          }
        }
      }
    },
    "/api/StaticMergeTags/Create": {
      "post": {
        "tags": [
          "StaticMergeTags"
        ],
        "summary": "Creates a StaticMergeTag, returning its id.",
        "operationId": "createStaticMergeTag",
        "requestBody": {
          "description": "The entity to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStaticMergeTagCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStaticMergeTagCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStaticMergeTagCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStaticMergeTagCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/StaticMergeTags/GetOne/{id}": {
      "get": {
        "tags": [
          "StaticMergeTags"
        ],
        "summary": "Gets the requested instance, identified by id.",
        "operationId": "getStaticMergeTag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the instance to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item found and returned",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StaticMergeTagVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticMergeTagVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticMergeTagVm"
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/StaticMergeTags/GetAll": {
      "get": {
        "tags": [
          "StaticMergeTags"
        ],
        "summary": "Returns the StaticMergeTags for the actual query.",
        "operationId": "getStaticMergeTags",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StaticMergeTagVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticMergeTagVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticMergeTagVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/StaticMergeTags/GetMany/many": {
      "get": {
        "tags": [
          "StaticMergeTags"
        ],
        "summary": "Returns the StaticMergeTags identified by the ids.",
        "operationId": "getManyStaticMergeTags",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "The identifications of the StaticMergeTags to be returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaticMergeTagVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaticMergeTagVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StaticMergeTagVm"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/StaticMergeTags/Update": {
      "put": {
        "tags": [
          "StaticMergeTags"
        ],
        "summary": "Update the current instance with the fulfilled model.",
        "operationId": "updateStaticMergeTag",
        "requestBody": {
          "description": "The desired modifications to be made. All value has to be filled!",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStaticMergeTagCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStaticMergeTagCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStaticMergeTagCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStaticMergeTagCommand"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Entity updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/StaticMergeTags/Delete/{id}": {
      "delete": {
        "tags": [
          "StaticMergeTags"
        ],
        "summary": "Deletes the item identified by id.",
        "operationId": "deleteStaticMergeTag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the entity to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Entity deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Templates/GetTemplateById/{id}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Gets the requested template, identified by id.",
        "operationId": "getTemplateById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the template to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Templates/GetTemplateByGuid/{guid}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Gets the requested template, identified by guid.",
        "operationId": "getTemplateByGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "The unique identifier of the template to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires a role of [CampaignRead]"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/TestGroupCategories/GetOne/{id}": {
      "get": {
        "tags": [
          "TestGroupCategories"
        ],
        "summary": "Gets the requested test group, identified by id.",
        "operationId": "getTestGroupCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the test group to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestGroupCategoryVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestGroupCategoryVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestGroupCategoryVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/TestGroupCategories/GetAll": {
      "get": {
        "tags": [
          "TestGroupCategories"
        ],
        "summary": "Returns the test groups for the actual query.",
        "operationId": "getTestGroupCategories",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestGroupCategoryVmPaginatedSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestGroupCategoryVmPaginatedSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestGroupCategoryVmPaginatedSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/TestGroupCategories/GetMany/many": {
      "get": {
        "tags": [
          "TestGroupCategories"
        ],
        "summary": "Returns the test groups identified by the ids.",
        "operationId": "getManyTestGroupCategories",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "The identifications of the test groups to be returned",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestGroupCategoryVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestGroupCategoryVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestGroupCategoryVm"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/TestGroupCategories/Create": {
      "post": {
        "tags": [
          "TestGroupCategories"
        ],
        "summary": "Creates the dedicates test group. The creation will results in an identification,\r\nassigned to the current instance.",
        "operationId": "createTestGroupCategory",
        "requestBody": {
          "description": "The test group to be created",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTestGroupCategoryCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTestGroupCategoryCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTestGroupCategoryCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTestGroupCategoryCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/TestGroupCategories/Update/{id}": {
      "put": {
        "tags": [
          "TestGroupCategories"
        ],
        "summary": "Update the current instance with the fulfilled model",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason the result is NKM.RTD.CampaignEditor.Prototypes.ErrorContract.",
        "operationId": "updateTestGroupCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identification of test group to be changed.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The desired modifications to be made. All value has to be filled!",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTestGroupCategoryCommand"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTestGroupCategoryCommand"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTestGroupCategoryCommand"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTestGroupCategoryCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/TestGroupCategories/Delete/{id}": {
      "delete": {
        "tags": [
          "TestGroupCategories"
        ],
        "summary": "Delete the item signed with the id.",
        "description": "The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was\r\nfailed for some reason - e.g.: test group in used, result is Microsoft.AspNetCore.Mvc.ForbidResult.",
        "operationId": "deleteTestGroupCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identification of the test group to be deleted.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/TestGroupCategories/GetCampaignTestGroupCategories": {
      "get": {
        "tags": [
          "TestGroupCategories"
        ],
        "summary": "Get test group based on the campaignId.",
        "operationId": "getCampaignTestGroupCategories",
        "parameters": [
          {
            "name": "campaignId",
            "in": "query",
            "description": "The identification of the campaign to determine test groups",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignTestGroupCategoryVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignTestGroupCategoryVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CampaignTestGroupCategoryVm"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/Treatments/GetByCampaignId/{id}": {
      "get": {
        "tags": [
          "Treatments"
        ],
        "summary": "Gets the requested treatment, identified by the container campaign id.",
        "operationId": "getTreatment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the container campaign to identify treatment to be returned.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TreatmentVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TreatmentVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TreatmentVm"
                }
              }
            }
          }
        }
      }
    },
    "/api/UserSettings/setlanguage/{languageId}": {
      "put": {
        "tags": [
          "UserSettings"
        ],
        "summary": "Set current user's language",
        "operationId": "setLanguage",
        "parameters": [
          {
            "name": "languageId",
            "in": "path",
            "description": "New language id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/UserSettings": {
      "get": {
        "tags": [
          "UserSettings"
        ],
        "summary": "Get current user's setting",
        "operationId": "getUserSetting",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettingsVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettingsVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettingsVm"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/ViewModels/CreateCampaign": {
      "get": {
        "tags": [
          "ViewModels"
        ],
        "summary": "Returns selection lists of controls to help the user with the options.",
        "description": "Used in the first screen of campaign creation.",
        "operationId": "createCampaignViewModel",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCampaignVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCampaignVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCampaignVm"
                }
              }
            }
          }
        }
      }
    },
    "/api/ViewModels/CreateCampaignTreatment": {
      "get": {
        "tags": [
          "ViewModels"
        ],
        "summary": "Returns selection lists of controls to help the user with the options.",
        "description": "Used in the secound screen of campaign creation.",
        "operationId": "createCampaignTreatment",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCampaignTreatmentVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCampaignTreatmentVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCampaignTreatmentVm"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ProfileVm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "job": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the user.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The natural name of the user.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email of the user.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A dto to describe a user."
      },
      "AdGroupVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the ad group.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the ad group.",
            "nullable": true
          },
          "isSelected": {
            "type": "boolean",
            "description": "Whether the connection between the ad group and the permission is 'live' or 'active'.\r\nTrue means users belonging to the group are given the permission. False means they are not."
          }
        },
        "additionalProperties": false,
        "description": "A model to describe an ad group that belongs to permissions."
      },
      "AdGroupVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdGroupVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FunctionPermissionVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isRead": {
            "type": "boolean"
          },
          "isEdit": {
            "type": "boolean"
          },
          "isExport": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "FunctionPermissionVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionPermissionVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LoginRequestCommand": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderByType": {
        "enum": [
          "Ascending",
          "Descending"
        ],
        "type": "string"
      },
      "CampaignResultEventVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "campaignName": {
            "type": "string",
            "nullable": true
          },
          "campaignTechnicalName": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "bpId": {
            "type": "string",
            "nullable": true
          },
          "contact": {
            "type": "string",
            "nullable": true
          },
          "channelId": {
            "type": "integer",
            "format": "int32"
          },
          "event": {
            "type": "string",
            "nullable": true
          },
          "eventResult": {
            "type": "string",
            "nullable": true
          },
          "campaignResult": {
            "type": "string",
            "nullable": true
          },
          "templateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CampaignResultEventVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignResultEventVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UploadCsvCommand": {
        "type": "object",
        "properties": {
          "campaignId": {
            "type": "integer",
            "format": "int32"
          },
          "segmentationId": {
            "type": "integer",
            "format": "int32"
          },
          "path": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CampaignListItemVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "realStartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "realEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "technicalName": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "responsible": {
            "type": "string",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "canBeSendOutToTestGroup": {
            "type": "boolean"
          },
          "canApprove": {
            "type": "boolean"
          },
          "canDisapprove": {
            "type": "boolean"
          },
          "canDelete": {
            "type": "boolean"
          },
          "canStart": {
            "type": "boolean"
          },
          "canStop": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CampaignListItemVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignListItemVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TimeSpan": {
        "type": "object",
        "properties": {
          "ticks": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "days": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "hours": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "milliseconds": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "minutes": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "seconds": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "totalDays": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalHours": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMilliseconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalMinutes": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "totalSeconds": {
            "type": "number",
            "format": "double",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "EmailTemplateVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "discountId": {
            "type": "integer",
            "format": "int32"
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "templateTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "unique_Identifier": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SegmentationType": {
        "enum": [
          "Query",
          "Csv",
          "TechnicalQuery"
        ],
        "type": "string"
      },
      "Condition": {
        "enum": [
          "And",
          "Or"
        ],
        "type": "string"
      },
      "Operator": {
        "enum": [
          "Equal",
          "Not_equal",
          "Less",
          "Less_or_equal",
          "Greater",
          "Greater_or_equal",
          "Like",
          "Not_like",
          "Between",
          "Not_between",
          "Range_between",
          "Range_not_between",
          "Is_empty",
          "Is_not_empty",
          "Select_equals",
          "Select_not_equals",
          "Select_any_in",
          "Select_not_any_in",
          "Multiselect_equals",
          "Multiselect_not_equals"
        ],
        "type": "string"
      },
      "ControlType": {
        "enum": [
          "Number",
          "Text",
          "Boolean",
          "Select",
          "MultiSelect",
          "Date",
          "DateTime",
          "Time"
        ],
        "type": "string"
      },
      "QueryValues": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QueryBuilderQuery": {
        "type": "object",
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Condition"
              }
            ],
            "nullable": true
          },
          "not": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "fieldName": {
            "type": "string",
            "nullable": true
          },
          "operator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Operator"
              }
            ],
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ControlType"
              }
            ],
            "nullable": true
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryBuilderQuery"
            },
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryValues"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QueryConditionOperation": {
        "enum": [
          "Preserved",
          "Added",
          "Removed",
          "Changed"
        ],
        "type": "string"
      },
      "SegmentConditionVm": {
        "type": "object",
        "properties": {
          "ruleId": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QueryConditionOperation"
              }
            ]
          },
          "operator": {
            "type": "string",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SegmentationQueryVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "segmentationId": {
            "type": "integer",
            "format": "int32"
          },
          "tree": {
            "type": "string",
            "nullable": true
          },
          "query": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QueryBuilderQuery"
              }
            ],
            "nullable": true
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentConditionVm"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DiscountSegmentVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "segmentDisplayName": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SegmentationType"
              }
            ]
          },
          "segmentationCategoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "segmentationCategoryName": {
            "type": "string",
            "nullable": true
          },
          "referenceSegmentationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "segmentSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cumulativeIntersection": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "businessPartnerCount": {
            "type": "integer",
            "format": "int64"
          },
          "query": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SegmentationQueryVm"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DiscountVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "treatmentId": {
            "type": "integer",
            "format": "int32"
          },
          "discountTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "segmentationId": {
            "type": "integer",
            "format": "int32"
          },
          "discountAmount": {
            "type": "number",
            "format": "float"
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailTemplateVm"
            },
            "nullable": true
          },
          "segment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountSegmentVm"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TreatmentVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "campaignId": {
            "type": "integer",
            "format": "int32"
          },
          "channelId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "startTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeSpan"
              }
            ],
            "nullable": true
          },
          "endTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeSpan"
              }
            ],
            "nullable": true
          },
          "emailTimeRules": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "emailResendRules": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "emailMaxResends": {
            "type": "integer",
            "format": "int32"
          },
          "emailResendFrequency": {
            "type": "integer",
            "format": "int32"
          },
          "phoneTimeRules": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "phoneRecallRules": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "phoneMaxRecalls": {
            "type": "integer",
            "format": "int32"
          },
          "phoneRecallFrequency": {
            "type": "integer",
            "format": "int32"
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountVm"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestGroupCategoryWithNameVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CampaignTestGroupCategoryVm": {
        "type": "object",
        "properties": {
          "testGroupCategory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestGroupCategoryWithNameVm"
              }
            ],
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserVm"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CampaignVm": {
        "type": "object",
        "properties": {
          "canBeSendOutToTestGroup": {
            "type": "boolean"
          },
          "canApprove": {
            "type": "boolean"
          },
          "canDisapprove": {
            "type": "boolean"
          },
          "canStart": {
            "type": "boolean"
          },
          "canStop": {
            "type": "boolean"
          },
          "readonly": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "businessTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "serviceTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "productTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "marketTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "requesterId": {
            "type": "integer",
            "format": "int32"
          },
          "departmentId": {
            "type": "integer",
            "format": "int32"
          },
          "responsibleId": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "treatment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TreatmentVm"
              }
            ],
            "nullable": true
          },
          "testGroupCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignTestGroupCategoryVm"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCampaignCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "productTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "serviceTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "marketTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "businessTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "requesterId": {
            "type": "integer",
            "format": "int32"
          },
          "departmentId": {
            "type": "integer",
            "format": "int32"
          },
          "responsibleId": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailTemplateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "discountId": {
            "type": "integer",
            "format": "int32"
          },
          "subject": {
            "type": "string",
            "nullable": true
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "templateTypeId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SegmentationQueryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "segmentationId": {
            "type": "integer",
            "format": "int32"
          },
          "tree": {
            "type": "string",
            "nullable": true
          },
          "query": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QueryBuilderQuery"
              }
            ],
            "nullable": true
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentConditionVm"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DiscountSegmentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SegmentationType"
              }
            ]
          },
          "segmentationCategoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "referenceSegmentationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "segmentSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cumulativeIntersection": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "businessPartnerCount": {
            "type": "integer",
            "format": "int64"
          },
          "query": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SegmentationQueryDto"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DiscountDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "treatmentId": {
            "type": "integer",
            "format": "int32"
          },
          "discountTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "segmentationId": {
            "type": "integer",
            "format": "int32"
          },
          "discountAmount": {
            "type": "number",
            "format": "float"
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailTemplateDto"
            },
            "nullable": true
          },
          "segment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscountSegmentDto"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TreatmentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "campaignId": {
            "type": "integer",
            "format": "int32"
          },
          "channelId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "startTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeSpan"
              }
            ],
            "nullable": true
          },
          "endTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeSpan"
              }
            ],
            "nullable": true
          },
          "emailTimeRules": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "emailResendRules": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "emailMaxResends": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "emailResendFrequency": {
            "type": "integer",
            "format": "int32"
          },
          "phoneTimeRules": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "phoneRecallRules": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "phoneMaxRecalls": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "phoneRecallFrequency": {
            "type": "integer",
            "format": "int32"
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateCampaignCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "productTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "businessTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "serviceTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "marketTypes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "productId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "requesterId": {
            "type": "integer",
            "format": "int32"
          },
          "departmentId": {
            "type": "integer",
            "format": "int32"
          },
          "responsibleId": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "treatment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TreatmentDto"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssignTestGroupCategoriesCommand": {
        "required": [
          "campaignId",
          "campaignTestGroupCategories"
        ],
        "type": "object",
        "properties": {
          "campaignId": {
            "type": "integer",
            "format": "int32"
          },
          "campaignTestGroupCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CampaignTestGroupCategoryVm"
            }
          },
          "isTestGroupMailsAlreadySentOut": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ChannelVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChannelVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ExtendedProperty": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActionEvent": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "eventType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "sourceSystemId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "userId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "extendedAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedProperty"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LanguagesVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "isoCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of permission. Should only be used if the model is describing an already existing permission.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the permission.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A model to describe the structure of Permissions."
      },
      "PermissionVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserPermissionVm": {
        "type": "object",
        "properties": {
          "isSelected": {
            "type": "boolean",
            "description": "Whether the connection between the user and the permission is 'live' or 'active'.\r\nTrue means the user is given the permission. False means they are not."
          },
          "id": {
            "type": "integer",
            "description": "The id of the user.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The natural name of the user.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email of the user.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A model to describe a user that belongs to permissions."
      },
      "CreateUpdatePermissionCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of permission. Should only be used if the model is describing an already existing permission.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the permission.",
            "nullable": true
          },
          "adGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdGroupVm"
            },
            "description": "A list of ad groups that belong to this permission.\r\nUse IsSelected to define if the connection is active.",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPermissionVm"
            },
            "description": "A list of users that belong to this permission.\r\nUse IsSelected to define if the connection is active.",
            "nullable": true
          },
          "functionPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionPermissionVm"
            },
            "description": "A list of function permissions that belong to this permission.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ProductVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateProductCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateProductCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SegmentationCategoryVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SegmentationCategoryVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentationCategoryVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateSegmentationCategoryCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateSegmentationCategoryCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SegmentationQueryResultVm": {
        "type": "object",
        "properties": {
          "ruleId": {
            "type": "string",
            "nullable": true
          },
          "segmentSize": {
            "type": "integer",
            "format": "int32"
          },
          "filteredSize": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "QueryBuilderField": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "operators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Operator"
            },
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "selectedLabel": {
            "type": "string",
            "nullable": true
          },
          "listValues": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "subFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryBuilderField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QueryBuilderFieldConfigVm": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryBuilderField"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SegmentListItemVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "segmentationCategoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "segmentSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cumulativeIntersection": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SegmentListItemVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentListItemVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BusinessPartner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "bpId": {
            "type": "string",
            "nullable": true
          },
          "superBpId": {
            "type": "string",
            "nullable": true
          },
          "contractualChargeAccountId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SegmentationVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SegmentationType"
              }
            ]
          },
          "segmentationCategoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "segmentSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cumulativeIntersection": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "referenceSegmentationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "businessPartners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessPartner"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateUpdateSegmentationCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SegmentationType"
              }
            ]
          },
          "segmentationCategoryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "segmentSize": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "cumulativeIntersection": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "referenceSegmentationId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "queryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tree": {
            "type": "string",
            "nullable": true
          },
          "query": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QueryBuilderQuery"
              }
            ],
            "nullable": true
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentConditionVm"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateSegmentationFromCsvCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "businessPartners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BusinessPartner"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TreeNodeVm": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreeNodeVm"
            },
            "nullable": true
          },
          "data": {
            "type": "string",
            "nullable": true
          },
          "isFolder": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SiteLevelSettingVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SiteLevelSettingVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteLevelSettingVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpdateSiteLevelSettingCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateUserCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "captchaToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ValidatePasswordChangeCommand": {
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "ChangeForgotPasswordUserExtensionInfoUpdateCommand": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "nullable": true,
            "example": "Grape Solutions Zrt."
          },
          "department": {
            "type": "string",
            "nullable": true,
            "example": "Application Development Department"
          },
          "position": {
            "type": "string",
            "nullable": true,
            "example": "Software Developer"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true,
            "example": "+3618809200"
          }
        },
        "additionalProperties": false
      },
      "ChangeForgotPasswordCommand": {
        "required": [
          "newPassword"
        ],
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "One-time guid that identifies the user for this operation.",
            "format": "uuid",
            "example": "0a1a91b3-fd95-466b-98cb-d36bdee6fb88"
          },
          "newPassword": {
            "maxLength": 200,
            "type": "string",
            "description": "The new password which will be set.",
            "example": "th4'qU1cKbR0WNF0xjump$0V3rth3l4zyd0g"
          },
          "extensionInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChangeForgotPasswordUserExtensionInfoUpdateCommand"
              }
            ],
            "description": "Extension object which can contain values to set.<br />\r\nSet this object only if you want to modify the user's extension information to the given values.<br />\r\nIf you do not set a property, it will not be modified.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ForgotPasswordCommand": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 500,
            "type": "string",
            "description": "Email address that identifies the standalone user",
            "example": "test@email.com"
          },
          "captchaToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResendPasswordChangeLinkCommand": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 500,
            "type": "string",
            "description": "Email address that identifies the standalone user",
            "example": "test@email.com"
          },
          "captchaToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserExtensionInfoCommand": {
        "type": "object",
        "properties": {
          "userDiscriminatorId": {
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "company": {
            "type": "string",
            "nullable": true,
            "example": "Grape Solutions Zrt."
          },
          "department": {
            "type": "string",
            "nullable": true,
            "example": "Application Development Department"
          },
          "position": {
            "type": "string",
            "nullable": true,
            "example": "Software Developer"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true,
            "example": "+3618809200"
          }
        },
        "additionalProperties": false
      },
      "UserExtensionInfoVm": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "nullable": true,
            "example": "Grape Solutions Zrt."
          },
          "department": {
            "type": "string",
            "nullable": true,
            "example": "Application Development Department"
          },
          "position": {
            "type": "string",
            "nullable": true,
            "example": "Software Developer"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true,
            "example": "+3618809200"
          },
          "userDiscriminatorId": {
            "type": "integer",
            "format": "int32",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "CreateStaticMergeTagCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StaticMergeTagVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "StaticMergeTagVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaticMergeTagVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpdateStaticMergeTagCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestGroupCategoryVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "TestGroupCategoryVmPaginatedSearchResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestGroupCategoryVm"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateTestGroupCategoryCommand": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateTestGroupCategoryCommand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserSettingsVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "userDiscriminatorId": {
            "type": "integer",
            "format": "int32"
          },
          "languageIsoCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Int32LabelValuePair": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CreateCampaignVm": {
        "type": "object",
        "properties": {
          "departments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "responsibles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "requesters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "serviceTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "businessTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "marketTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "productTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Int32LabelValueTree": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCampaignTreatmentVm": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "actionPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "emailTimeRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "emailResendRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "emailResendFrequencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValueTree"
            },
            "nullable": true
          },
          "segmentDiscountTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "phoneTimeRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "phoneRecallRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "phoneRecallFrequencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          },
          "templateTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Int32LabelValuePair"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "tags": [
    {
      "name": "Accounts",
      "description": "Defines the endpoint which is responsible for the basic authenticated user information\r\nand provide the capability to login. The M:NKM.RTD.CampaignEditor.Controllers.AccountsController.Login(NKM.RTD.CampaignEditor.Prototypes.LoginRequestCommand) API\r\nused for the basic authentication and the M:NKM.RTD.CampaignEditor.Controllers.AccountsController.RefreshToken\r\nis for refresh the actual authentication."
    },
    {
      "name": "CampaignResults",
      "description": "Handles result requests which are gets except for aharepoint result upload request.\r\nThe result schema is read only for the campaign editor. For futher info see architecture."
    },
    {
      "name": "Campaigns",
      "description": "Defines the campaign related operations for the enduser. This API endpoint is \r\nresponsible for all operation which can be made for a campaign creation or \r\nmodification. The basic usage is to create the campaign with \r\nNKM.RTD.CampaignEditor.Prototypes.CampaignStatus.DraftCampaign then create the neccesity \r\nNKM.RTD.CampaignEditor.Controllers.TreatmentsController operations, assign segment, via appropriate\r\nNKM.RTD.CampaignEditor.Controllers.SegmentationsController, update status via the appropriate method e.g.:\r\nM:NKM.RTD.CampaignEditor.Controllers.CampaignsController.Approve(System.Int32), M:NKM.RTD.CampaignEditor.Controllers.CampaignsController.StartNow(System.Int32)."
    },
    {
      "name": "Channels",
      "description": "Basic CRUD API to retrive channels. As much as this is a readonly information in the system,\r\nthe CRUD CUD parts are missing. Only read can be performed."
    },
    {
      "name": "Emails",
      "description": "The basic controller to handle mail send for the EDE."
    },
    {
      "name": "Languages",
      "description": "CRUD API for language operations. All the operations of the product are routed \r\nhere."
    },
    {
      "name": "Localizations",
      "description": "Basic controller to extend the frontend static loclization messages with dynamic \r\ncontent. The content actually contains only the appropriate language translations."
    },
    {
      "name": "Permissions",
      "description": "CRUD API for permission operations. All the operations of the permissions are routed \r\nhere."
    },
    {
      "name": "Products",
      "description": "CRUD API for product operations. All the operations of the product are routed \r\nhere."
    },
    {
      "name": "SegmentationCategories",
      "description": "CRUD API for segmentation categories operations. All the operations of the segmentation \r\ncategories are routed here."
    },
    {
      "name": "SegmentationQueries",
      "description": "Segmentation query editor, which will target partners proprties to create a group\r\nof entities. The instance is used for configuration retrieve and to run the actual\r\nquery against real data."
    },
    {
      "name": "Segmentations",
      "description": "Segmentation CRUD API with extension of file processing endpoints. This extension \r\noperation was requested for emporary solution since final implementation will be \r\nshipped.\r\n\r\nFinal concept: Query editor handling via NKM.RTD.CampaignEditor.Controllers.SegmentationQueriesController\r\nwith actual group handling. This controller objective scoped to handle query operation\r\nhandler. Deep-, shallow- Copy, campaign connection handling.\r\n\r\nSegmentation purpose: handle a group of people like a reference. All segmentation \r\ncarries a list of people with some matching elements each other. A single instance\r\ncan be part of multiple segmentations based on their properties."
    },
    {
      "name": "Sharepoint",
      "description": "Contains helper for sharepoint CSV upload. This service will provide thw basic \r\nstructure of a sharepoint folder and uploads a selected file. The operation is\r\nused by NKM.RTD.CampaignEditor.Controllers.SegmentationsController CSV extension."
    },
    {
      "name": "SiteLevelSettings",
      "description": "CRUD API for site level setting operations. All the operations of the product are routed \r\nhere."
    },
    {
      "name": "StandaloneUsers",
      "description": "This controller used for standalone user registration, request password, change password, password reset"
    },
    {
      "name": "StaticMergeTags",
      "description": "Provides CRUD operations for StaticMergeTag entities."
    },
    {
      "name": "Templates",
      "description": "API for template retrive. The basic template CRUD is hidden by enduser."
    },
    {
      "name": "Treatments",
      "description": "API for treatment retrive. The basic treatment CRUD is hidden by enduser."
    },
    {
      "name": "UserSettings",
      "description": "CRUD API for usersetting operations. All the operations of the product are routed \r\nhere."
    },
    {
      "name": "ViewModels",
      "description": "Contains helpers for the UI to be able to handle campaign creation."
    }
  ]
}