{
  "openapi": "3.0.1",
  "info": {
    "title": "NKM PKM Coupon Api",
    "version": "v1"
  },
  "paths": {
    "/api/ApplicationVersion": {
      "get": {
        "tags": [
          "ApplicationVersion"
        ],
        "operationId": "get",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInfo"
                },
                "example": {
  "serviceName": "PKM",
  "version": "4.1",
  "externalServices": [
    {
      "serviceName": "Store",
      "version": "4.0",
      "externalServices": []
    }
  ]
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInfo"
                },
                "example": {
  "serviceName": "PKM",
  "version": "4.1",
  "externalServices": [
    {
      "serviceName": "Store",
      "version": "4.0",
      "externalServices": []
    }
  ]
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInfo"
                },
                "example": {
  "serviceName": "PKM",
  "version": "4.1",
  "externalServices": [
    {
      "serviceName": "Store",
      "version": "4.0",
      "externalServices": []
    }
  ]
}
              }
            }
          }
        }
      }
    },
    "/api/Auth/RegisterPartner": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a Sme(Kkv) partner",
        "operationId": "registerPartner",
        "requestBody": {
          "description": "Details of the partner",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPartnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful registration"
          },
          "400": {
            "description": "Validation error occurred"
          }
        }
      }
    },
    "/api/Auth/RegisterPartnerContact": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a contact for a partner",
        "description": "Returns nothing, but registers a contact for the partner",
        "operationId": "registerPartnerContact",
        "requestBody": {
          "description": "Data of the contact",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPartnerContactDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful registration"
          },
          "400": {
            "description": "Invalid e-mail: error.auth.invalid-email;\r\nInvalid password: error.auth.password-format;\r\nError occured in registration: error.auth.registration-failed;\r\nInvalid partner code: error.auth.invalid-partner-code;\r\nUser already exists: error.auth.user-exists",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/RegisterUser": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a user",
        "description": "Returns nothing, but registers a user",
        "operationId": "registerUser",
        "requestBody": {
          "description": "Data of the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful registration"
          },
          "400": {
            "description": "Invalid e-mail: error.auth.invalid-email;\r\nInvalid password: error.auth.password-format;\r\nError occured in registration: error.auth.registration-failed;\r\nUser already exists: error.auth.user-exists",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/Login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs in a user",
        "description": "Returns user info about the logged in user",
        "operationId": "login",
        "requestBody": {
          "description": "Login data of the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                },
                "example": {
  "jwtToken": "ThisIsYourTotallyUniqueJwtToken",
  "refreshToken": "ThisIsYourTotallyUniqueRefreshToken"
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                },
                "example": {
  "jwtToken": "ThisIsYourTotallyUniqueJwtToken",
  "refreshToken": "ThisIsYourTotallyUniqueRefreshToken"
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                },
                "example": {
  "jwtToken": "ThisIsYourTotallyUniqueJwtToken",
  "refreshToken": "ThisIsYourTotallyUniqueRefreshToken"
}
              }
            }
          },
          "400": {
            "description": "Login failed: error.auth.login-failed;\r\nLDAP Login failed: error.auth.ldap",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/Refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refreshes the JWT token",
        "description": "Returns user info about the logged in user",
        "operationId": "refresh",
        "requestBody": {
          "description": "Refresh Token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful refresh",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                },
                "example": {
  "jwtToken": "ThisIsYourTotallyUniqueJwtToken",
  "refreshToken": "ThisIsYourTotallyUniqueRefreshToken"
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                },
                "example": {
  "jwtToken": "ThisIsYourTotallyUniqueJwtToken",
  "refreshToken": "ThisIsYourTotallyUniqueRefreshToken"
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                },
                "example": {
  "jwtToken": "ThisIsYourTotallyUniqueJwtToken",
  "refreshToken": "ThisIsYourTotallyUniqueRefreshToken"
}
              }
            }
          },
          "400": {
            "description": "Expired Refresh Token: error.auth.expired-refresh-token;\r\nInvalid Refresh Token: error.auth.invalid-refresh-token",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/ChangePassword": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Changes the password for the logged in User",
        "description": "Returns nothing",
        "operationId": "changePassword",
        "requestBody": {
          "description": "New Password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful password change"
          },
          "400": {
            "description": "Validation Error: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/GetPartnerContactState/{id}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Returns the details of a partner contact",
        "description": "Returns the details of a partner contact",
        "operationId": "getPartnerContactState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Query id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Query id",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactStateVm"
                },
                "example": {
  "id": 420,
  "name": "BlazeIt",
  "role": 100,
  "isActive": true
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactStateVm"
                },
                "example": {
  "id": 420,
  "name": "BlazeIt",
  "role": 100,
  "isActive": true
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactStateVm"
                },
                "example": {
  "id": 420,
  "name": "BlazeIt",
  "role": 100,
  "isActive": true
}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: error.not-found"
          }
        }
      }
    },
    "/api/Auth/GetPartnerContacts": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Returns the details of partner contacts",
        "description": "Returns the details of partner contacts in paginated form",
        "operationId": "getPartnerContacts",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "partnerName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "role",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Roles"
            }
          },
          {
            "name": "majorPartner",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 420,
      "name": "Snoop Dogg",
      "email": "SnoopyDoggo@cbd.hu",
      "phone": "+36204206969",
      "partnerName": "Blaze It!",
      "isActive": false,
      "role": 200
    },
    {
      "id": 42,
      "name": "Elon Musk",
      "email": "ElonGreatestMusk@tesla.hu",
      "phone": "+36204351488",
      "partnerName": "Stupid Company",
      "isActive": true,
      "role": 100
    },
    {
      "id": 666,
      "name": "Bruce Willis",
      "email": "Frank.Moses@red.hu",
      "phone": "+36201234567",
      "partnerName": "Hell",
      "isActive": true,
      "role": 1100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 3
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 420,
      "name": "Snoop Dogg",
      "email": "SnoopyDoggo@cbd.hu",
      "phone": "+36204206969",
      "partnerName": "Blaze It!",
      "isActive": false,
      "role": 200
    },
    {
      "id": 42,
      "name": "Elon Musk",
      "email": "ElonGreatestMusk@tesla.hu",
      "phone": "+36204351488",
      "partnerName": "Stupid Company",
      "isActive": true,
      "role": 100
    },
    {
      "id": 666,
      "name": "Bruce Willis",
      "email": "Frank.Moses@red.hu",
      "phone": "+36201234567",
      "partnerName": "Hell",
      "isActive": true,
      "role": 1100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 3
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 420,
      "name": "Snoop Dogg",
      "email": "SnoopyDoggo@cbd.hu",
      "phone": "+36204206969",
      "partnerName": "Blaze It!",
      "isActive": false,
      "role": 200
    },
    {
      "id": 42,
      "name": "Elon Musk",
      "email": "ElonGreatestMusk@tesla.hu",
      "phone": "+36204351488",
      "partnerName": "Stupid Company",
      "isActive": true,
      "role": 100
    },
    {
      "id": 666,
      "name": "Bruce Willis",
      "email": "Frank.Moses@red.hu",
      "phone": "+36201234567",
      "partnerName": "Hell",
      "isActive": true,
      "role": 1100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 3
}
              }
            }
          },
          "400": {
            "description": "Validation Error: validation.error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/GetNkmPartnerContacts": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Returns the details of elevated users",
        "description": "Returns the details of elevated users in paginated form",
        "operationId": "getNkmPartnerContacts",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "partnerName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "role",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Roles"
            }
          },
          {
            "name": "majorPartner",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 420,
      "name": "Snoop Dogg",
      "email": "SnoopyDoggo@cbd.hu",
      "phone": "+36204206969",
      "partnerName": "Blaze It!",
      "isActive": false,
      "role": 200
    },
    {
      "id": 42,
      "name": "Elon Musk",
      "email": "ElonGreatestMusk@tesla.hu",
      "phone": "+36204351488",
      "partnerName": "Stupid Company",
      "isActive": true,
      "role": 100
    },
    {
      "id": 666,
      "name": "Bruce Willis",
      "email": "Frank.Moses@red.hu",
      "phone": "+36201234567",
      "partnerName": "Hell",
      "isActive": true,
      "role": 1100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 3
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 420,
      "name": "Snoop Dogg",
      "email": "SnoopyDoggo@cbd.hu",
      "phone": "+36204206969",
      "partnerName": "Blaze It!",
      "isActive": false,
      "role": 200
    },
    {
      "id": 42,
      "name": "Elon Musk",
      "email": "ElonGreatestMusk@tesla.hu",
      "phone": "+36204351488",
      "partnerName": "Stupid Company",
      "isActive": true,
      "role": 100
    },
    {
      "id": 666,
      "name": "Bruce Willis",
      "email": "Frank.Moses@red.hu",
      "phone": "+36201234567",
      "partnerName": "Hell",
      "isActive": true,
      "role": 1100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 3
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 420,
      "name": "Snoop Dogg",
      "email": "SnoopyDoggo@cbd.hu",
      "phone": "+36204206969",
      "partnerName": "Blaze It!",
      "isActive": false,
      "role": 200
    },
    {
      "id": 42,
      "name": "Elon Musk",
      "email": "ElonGreatestMusk@tesla.hu",
      "phone": "+36204351488",
      "partnerName": "Stupid Company",
      "isActive": true,
      "role": 100
    },
    {
      "id": 666,
      "name": "Bruce Willis",
      "email": "Frank.Moses@red.hu",
      "phone": "+36201234567",
      "partnerName": "Hell",
      "isActive": true,
      "role": 1100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 3
}
              }
            }
          },
          "400": {
            "description": "Validation Error: validation.error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/ExportPartnerContacts": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Exports the details of partner contacts",
        "description": "Exports the details of partner contacts in a csv file",
        "operationId": "exportPartnerContacts",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "partnerName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "role",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Roles"
            }
          },
          {
            "name": "majorPartner",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful export",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": {
  "result": [
    {
      "id": 420,
      "name": "Snoop Dogg",
      "email": "SnoopyDoggo@cbd.hu",
      "phone": "+36204206969",
      "partnerName": "Blaze It!",
      "isActive": false,
      "role": 200
    },
    {
      "id": 42,
      "name": "Elon Musk",
      "email": "ElonGreatestMusk@tesla.hu",
      "phone": "+36204351488",
      "partnerName": "Stupid Company",
      "isActive": true,
      "role": 100
    },
    {
      "id": 666,
      "name": "Bruce Willis",
      "email": "Frank.Moses@red.hu",
      "phone": "+36201234567",
      "partnerName": "Hell",
      "isActive": true,
      "role": 1100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 3
}
              }
            }
          },
          "400": {
            "description": "Validation Error: validation.error"
          }
        }
      }
    },
    "/api/Auth/ExportNkmPartnerContacts": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Exports the details of elevated users",
        "description": "Exports the details of elevated users in a csv file",
        "operationId": "exportNkmPartnerContacts",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "partnerName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "role",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Roles"
            }
          },
          {
            "name": "majorPartner",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful export",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": {
  "result": [
    {
      "id": 420,
      "name": "Snoop Dogg",
      "email": "SnoopyDoggo@cbd.hu",
      "phone": "+36204206969",
      "partnerName": "Blaze It!",
      "isActive": false,
      "role": 200
    },
    {
      "id": 42,
      "name": "Elon Musk",
      "email": "ElonGreatestMusk@tesla.hu",
      "phone": "+36204351488",
      "partnerName": "Stupid Company",
      "isActive": true,
      "role": 100
    },
    {
      "id": 666,
      "name": "Bruce Willis",
      "email": "Frank.Moses@red.hu",
      "phone": "+36201234567",
      "partnerName": "Hell",
      "isActive": true,
      "role": 1100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 3
}
              }
            }
          },
          "400": {
            "description": "Validation Error: validation.error"
          }
        }
      }
    },
    "/api/Auth/UpdatePartnerContact/{id}": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Updates the details of an elevated user or partner contact",
        "description": "Updates the details of an elevated user or partner contact",
        "operationId": "updatePartnerContactState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the user",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New details of the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerContactStateDto"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Validation Error: validation.error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Successful update"
          },
          "404": {
            "description": "User not found error: error.not-found"
          }
        }
      }
    },
    "/api/Cashiers": {
      "post": {
        "tags": [
          "Cashiers"
        ],
        "summary": "Creates an entity",
        "description": "Returns the id of the entity upon success",
        "operationId": "createCashier",
        "requestBody": {
          "description": "Details of the entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CashierDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              }
            }
          },
          "400": {
            "description": "CashierId not unique :error.cashier.cashier-id-not-unique",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Cashiers"
        ],
        "summary": "Gets a list of cashiers",
        "description": "Returns the cashier list with the specified filters applied",
        "operationId": "getCashiers",
        "parameters": [
          {
            "name": "siteId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CashierVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "cashierId": "UniqueCashierIdOne",
      "digitalStampId": "UniqueDigitalStampIdOne"
    },
    {
      "id": 2,
      "cashierId": "UniqueCashierIdTwo",
      "digitalStampId": "UniqueDigitalStampIdTwo"
    },
    {
      "id": 3,
      "cashierId": "UniqueCashierIdThree",
      "digitalStampId": "UniqueDigitalStampIdThree"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 5
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashierVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "cashierId": "UniqueCashierIdOne",
      "digitalStampId": "UniqueDigitalStampIdOne"
    },
    {
      "id": 2,
      "cashierId": "UniqueCashierIdTwo",
      "digitalStampId": "UniqueDigitalStampIdTwo"
    },
    {
      "id": 3,
      "cashierId": "UniqueCashierIdThree",
      "digitalStampId": "UniqueDigitalStampIdThree"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 5
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashierVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "cashierId": "UniqueCashierIdOne",
      "digitalStampId": "UniqueDigitalStampIdOne"
    },
    {
      "id": 2,
      "cashierId": "UniqueCashierIdTwo",
      "digitalStampId": "UniqueDigitalStampIdTwo"
    },
    {
      "id": 3,
      "cashierId": "UniqueCashierIdThree",
      "digitalStampId": "UniqueDigitalStampIdThree"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 5
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Cashiers/{id}": {
      "get": {
        "tags": [
          "Cashiers"
        ],
        "summary": "Gets a cashier by Id",
        "description": "Returns the cashier with the specified Id upon success",
        "operationId": "getCashier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the cashier",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the cashier",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: cashier details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CashierVm"
                },
                "example": {
  "id": 12,
  "cashierId": "ThisIsYourUniqueCashierId",
  "digitalStampId": "ThisIsYourUniqueDigitalStampId"
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashierVm"
                },
                "example": {
  "id": 12,
  "cashierId": "ThisIsYourUniqueCashierId",
  "digitalStampId": "ThisIsYourUniqueDigitalStampId"
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashierVm"
                },
                "example": {
  "id": 12,
  "cashierId": "ThisIsYourUniqueCashierId",
  "digitalStampId": "ThisIsYourUniqueDigitalStampId"
}
              }
            }
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cashiers"
        ],
        "summary": "Updates a cashier",
        "description": "Updates a cashier with the given id",
        "operationId": "updateCashier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the cashier to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the cashier to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New cashier details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CashierDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful update"
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cashiers"
        ],
        "summary": "Deletes a cashier",
        "description": "Deletes a cashier with the given id",
        "operationId": "deleteCashier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the cashier to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the cashier to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        }
      }
    },
    "/api/Cashiers/ExportCashiers": {
      "get": {
        "tags": [
          "Cashiers"
        ],
        "summary": "Exports a Cashier entity list sorted and filtered",
        "description": "Export the Cashier list with the specified filters applied in a csv file",
        "operationId": "exportCashiers",
        "parameters": [
          {
            "name": "siteId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Csv file of Cashier entities",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/Categories": {
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Creates a Category entity",
        "description": "Returns the id of the Category upon success",
        "operationId": "createCategory",
        "requestBody": {
          "description": "Details of the Category",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Gets a Category entity list sorted and filtered",
        "description": "Returns the Category list with the specified filters applied",
        "operationId": "getCategories",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of Category entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "BigManToys"
    },
    {
      "id": 2,
      "name": "TotallyUniqueExperiences"
    },
    {
      "id": 3,
      "name": "VintageMovies"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 5
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "BigManToys"
    },
    {
      "id": 2,
      "name": "TotallyUniqueExperiences"
    },
    {
      "id": 3,
      "name": "VintageMovies"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 5
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "BigManToys"
    },
    {
      "id": 2,
      "name": "TotallyUniqueExperiences"
    },
    {
      "id": 3,
      "name": "VintageMovies"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 5
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Gets a Category entity by Id",
        "description": "Returns the Category with the specified Id upon success",
        "operationId": "getCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Category",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the Category",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Category entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVm"
                },
                "example": {
  "id": 12,
  "name": "AmazingCategory"
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVm"
                },
                "example": {
  "id": 12,
  "name": "AmazingCategory"
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVm"
                },
                "example": {
  "id": 12,
  "name": "AmazingCategory"
}
              }
            }
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Updates a Category entity",
        "description": "Updates a Category entity with Id of \"id\" to entity \"category\"",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful update"
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Deletes a Category entity",
        "description": "Deletes the Category entity with Id of \"id\"",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        }
      }
    },
    "/api/Categories/ExportCategories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Exports a Category entity list sorted and filtered in a csv file",
        "description": "Exports the Category list with the specified filters applied in a csv file",
        "operationId": "exportCategories",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful export: Csv file of Category entities",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/Coupon/{couponId}/Comment": {
      "get": {
        "tags": [
          "CouponComments"
        ],
        "summary": "Gets the comments on a coupon",
        "description": "Returns the comment list on the coupon with an Id of \"couponId\"",
        "operationId": "getCouponComments",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "CouponId for comments",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "CouponId for comments",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: list of comments",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponCommentVm"
                  }
                },
                "example": [
  {
    "id": 1,
    "couponId": 1,
    "comment": "Mischief managed!",
    "from": "Harry Potter",
    "dateTime": "2020-07-28T10:11:12",
    "stateFrom": 300,
    "stateTo": 400
  },
  {
    "id": 2,
    "couponId": 2,
    "comment": "Dobby's free!",
    "from": "Dobby",
    "dateTime": "2020-04-20T12:10:42",
    "stateFrom": 0,
    "stateTo": 100
  },
  {
    "id": 3,
    "couponId": 3,
    "comment": "You're a wizard, harry!",
    "from": "Rubeus Hagrid",
    "dateTime": "2020-01-22T01:50:30",
    "stateFrom": 0,
    "stateTo": 300
  }
]
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponCommentVm"
                  }
                },
                "example": [
  {
    "id": 1,
    "couponId": 1,
    "comment": "Mischief managed!",
    "from": "Harry Potter",
    "dateTime": "2020-07-28T10:11:12",
    "stateFrom": 300,
    "stateTo": 400
  },
  {
    "id": 2,
    "couponId": 2,
    "comment": "Dobby's free!",
    "from": "Dobby",
    "dateTime": "2020-04-20T12:10:42",
    "stateFrom": 0,
    "stateTo": 100
  },
  {
    "id": 3,
    "couponId": 3,
    "comment": "You're a wizard, harry!",
    "from": "Rubeus Hagrid",
    "dateTime": "2020-01-22T01:50:30",
    "stateFrom": 0,
    "stateTo": 300
  }
]
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponCommentVm"
                  }
                },
                "example": [
  {
    "id": 1,
    "couponId": 1,
    "comment": "Mischief managed!",
    "from": "Harry Potter",
    "dateTime": "2020-07-28T10:11:12",
    "stateFrom": 300,
    "stateTo": 400
  },
  {
    "id": 2,
    "couponId": 2,
    "comment": "Dobby's free!",
    "from": "Dobby",
    "dateTime": "2020-04-20T12:10:42",
    "stateFrom": 0,
    "stateTo": 100
  },
  {
    "id": 3,
    "couponId": 3,
    "comment": "You're a wizard, harry!",
    "from": "Rubeus Hagrid",
    "dateTime": "2020-01-22T01:50:30",
    "stateFrom": 0,
    "stateTo": 300
  }
]
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CouponComments"
        ],
        "summary": "Adds a comment to a coupon",
        "description": "Appends a comment with details of \"comment\" to a coupon with an Id of \"couponId\"",
        "operationId": "addCouponComment",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "Id of Coupon to add a comment to",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of Coupon to add a comment to",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponCommentDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Validation error occurred: validation.error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Coupon not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Successful creation"
          }
        }
      }
    },
    "/api/Coupon/{couponId}/Comment/{commentId}": {
      "delete": {
        "tags": [
          "CouponComments"
        ],
        "summary": "Deletes a comment from a coupon",
        "description": "Deletes the comment with an Id of \"commentId\" from a coupon with Id of \"couponId\"",
        "operationId": "deleteCouponComment",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "Id of coupon to delete comment from",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of coupon to delete comment from",
              "format": "int32"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Id of comment to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of comment to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "200": {
            "description": "Successful deletion"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupons": {
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Creates a Coupon entity",
        "description": "Returns the id of the new Coupon upon success",
        "operationId": "createCoupon",
        "requestBody": {
          "description": "Details of the Coupon",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Gets a Coupon entity list sorted and filtered",
        "description": "Returns the Coupon list with the specified filters applied",
        "operationId": "getCoupons",
        "parameters": [
          {
            "name": "includeArchived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlyWaiting",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "rank",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponRank"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponType"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponState"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "expireDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "couponCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "minimumShoppingValue",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "discountValue",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "partnerName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "mode",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponMode"
            }
          },
          {
            "name": "discountType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponDiscountType"
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "preferredPosition",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "drawDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of Coupon entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Ingyen Túró Rudi!",
      "description": "Kaphatsz egy ingyen Túró Rudit!",
      "rank": 100,
      "type": 0,
      "state": 100,
      "startDate": "2020-08-01T10:00:00",
      "endDate": "2021-08-01T10:00:00",
      "expireDate": "2021-09-01T10:00:00",
      "couponCount": 50000,
      "minimumShoppingValue": 500,
      "discountType": 100,
      "discountValue": 100.0,
      "categoryId": 1,
      "partnerId": 1,
      "isActive": false,
      "isPartnerActive": false,
      "bigPictureId": "És nem is lesz",
      "smallPictureId": "Na meg ez se",
      "mode": 100,
      "createdBy": "Sales Ernő",
      "createdDate": "2020-04-11T13:42:50",
      "modifiedBy": "Kasszás Erzsi",
      "modifiedDate": null,
      "approvedBy": "Menedzser Endre",
      "approvedDate": "2020-07-12T20:30:40",
      "drawDate": null,
      "preferredPosition": 4,
      "predefinedCodesFileId": null,
      "onlineClaimLink": "https://isitchristmas.com/",
      "productDetails": "https://isitchristmas.today/",
      "prizeRulesFileId": "missingId",
      "itemPrice": 12,
      "previousYearAverageBasketValue": 123,
      "awardedCampaign": false,
      "prizeValue": 321,
      "tags": null,
      "comments": null,
      "partnerName": "Tesco",
      "showCount": 0,
      "clickCount": 0,
      "claimCount": 0,
      "discardCount": 21
    },
    {
      "id": 2,
      "name": "Pisztácia fagyi!",
      "description": "MissingDescription",
      "rank": 300,
      "type": 200,
      "state": 100,
      "startDate": "2020-09-01T10:00:00",
      "endDate": "2021-09-01T10:00:00",
      "expireDate": "2021-10-01T10:00:00",
      "couponCount": 50000,
      "minimumShoppingValue": 500,
      "discountType": 100,
      "discountValue": 100.0,
      "categoryId": 2,
      "partnerId": 76,
      "isActive": true,
      "isPartnerActive": true,
      "bigPictureId": "Pisztácia kifogyott",
      "smallPictureId": "Csokoládé nem is volt",
      "mode": 200,
      "createdBy": "Charlie Firpo",
      "createdDate": "2020-05-01T01:12:23",
      "modifiedBy": "Charlie Firpo",
      "modifiedDate": "2020-06-01T10:12:23",
      "approvedBy": "Johnny Firpo",
      "approvedDate": "2020-03-10T10:20:30",
      "drawDate": "2021-11-01T01:01:01",
      "preferredPosition": 3,
      "predefinedCodesFileId": "ASDF247GD8",
      "onlineClaimLink": null,
      "productDetails": "NoProductsHere",
      "prizeRulesFileId": null,
      "itemPrice": 9,
      "previousYearAverageBasketValue": 98,
      "awardedCampaign": true,
      "prizeValue": 987,
      "tags": null,
      "comments": null,
      "partnerName": "Firpo",
      "showCount": 50,
      "clickCount": 1225,
      "claimCount": 150,
      "discardCount": 9876
    }
  ],
  "page": 1,
  "from": 1,
  "to": 2,
  "size": 5
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Ingyen Túró Rudi!",
      "description": "Kaphatsz egy ingyen Túró Rudit!",
      "rank": 100,
      "type": 0,
      "state": 100,
      "startDate": "2020-08-01T10:00:00",
      "endDate": "2021-08-01T10:00:00",
      "expireDate": "2021-09-01T10:00:00",
      "couponCount": 50000,
      "minimumShoppingValue": 500,
      "discountType": 100,
      "discountValue": 100.0,
      "categoryId": 1,
      "partnerId": 1,
      "isActive": false,
      "isPartnerActive": false,
      "bigPictureId": "És nem is lesz",
      "smallPictureId": "Na meg ez se",
      "mode": 100,
      "createdBy": "Sales Ernő",
      "createdDate": "2020-04-11T13:42:50",
      "modifiedBy": "Kasszás Erzsi",
      "modifiedDate": null,
      "approvedBy": "Menedzser Endre",
      "approvedDate": "2020-07-12T20:30:40",
      "drawDate": null,
      "preferredPosition": 4,
      "predefinedCodesFileId": null,
      "onlineClaimLink": "https://isitchristmas.com/",
      "productDetails": "https://isitchristmas.today/",
      "prizeRulesFileId": "missingId",
      "itemPrice": 12,
      "previousYearAverageBasketValue": 123,
      "awardedCampaign": false,
      "prizeValue": 321,
      "tags": null,
      "comments": null,
      "partnerName": "Tesco",
      "showCount": 0,
      "clickCount": 0,
      "claimCount": 0,
      "discardCount": 21
    },
    {
      "id": 2,
      "name": "Pisztácia fagyi!",
      "description": "MissingDescription",
      "rank": 300,
      "type": 200,
      "state": 100,
      "startDate": "2020-09-01T10:00:00",
      "endDate": "2021-09-01T10:00:00",
      "expireDate": "2021-10-01T10:00:00",
      "couponCount": 50000,
      "minimumShoppingValue": 500,
      "discountType": 100,
      "discountValue": 100.0,
      "categoryId": 2,
      "partnerId": 76,
      "isActive": true,
      "isPartnerActive": true,
      "bigPictureId": "Pisztácia kifogyott",
      "smallPictureId": "Csokoládé nem is volt",
      "mode": 200,
      "createdBy": "Charlie Firpo",
      "createdDate": "2020-05-01T01:12:23",
      "modifiedBy": "Charlie Firpo",
      "modifiedDate": "2020-06-01T10:12:23",
      "approvedBy": "Johnny Firpo",
      "approvedDate": "2020-03-10T10:20:30",
      "drawDate": "2021-11-01T01:01:01",
      "preferredPosition": 3,
      "predefinedCodesFileId": "ASDF247GD8",
      "onlineClaimLink": null,
      "productDetails": "NoProductsHere",
      "prizeRulesFileId": null,
      "itemPrice": 9,
      "previousYearAverageBasketValue": 98,
      "awardedCampaign": true,
      "prizeValue": 987,
      "tags": null,
      "comments": null,
      "partnerName": "Firpo",
      "showCount": 50,
      "clickCount": 1225,
      "claimCount": 150,
      "discardCount": 9876
    }
  ],
  "page": 1,
  "from": 1,
  "to": 2,
  "size": 5
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Ingyen Túró Rudi!",
      "description": "Kaphatsz egy ingyen Túró Rudit!",
      "rank": 100,
      "type": 0,
      "state": 100,
      "startDate": "2020-08-01T10:00:00",
      "endDate": "2021-08-01T10:00:00",
      "expireDate": "2021-09-01T10:00:00",
      "couponCount": 50000,
      "minimumShoppingValue": 500,
      "discountType": 100,
      "discountValue": 100.0,
      "categoryId": 1,
      "partnerId": 1,
      "isActive": false,
      "isPartnerActive": false,
      "bigPictureId": "És nem is lesz",
      "smallPictureId": "Na meg ez se",
      "mode": 100,
      "createdBy": "Sales Ernő",
      "createdDate": "2020-04-11T13:42:50",
      "modifiedBy": "Kasszás Erzsi",
      "modifiedDate": null,
      "approvedBy": "Menedzser Endre",
      "approvedDate": "2020-07-12T20:30:40",
      "drawDate": null,
      "preferredPosition": 4,
      "predefinedCodesFileId": null,
      "onlineClaimLink": "https://isitchristmas.com/",
      "productDetails": "https://isitchristmas.today/",
      "prizeRulesFileId": "missingId",
      "itemPrice": 12,
      "previousYearAverageBasketValue": 123,
      "awardedCampaign": false,
      "prizeValue": 321,
      "tags": null,
      "comments": null,
      "partnerName": "Tesco",
      "showCount": 0,
      "clickCount": 0,
      "claimCount": 0,
      "discardCount": 21
    },
    {
      "id": 2,
      "name": "Pisztácia fagyi!",
      "description": "MissingDescription",
      "rank": 300,
      "type": 200,
      "state": 100,
      "startDate": "2020-09-01T10:00:00",
      "endDate": "2021-09-01T10:00:00",
      "expireDate": "2021-10-01T10:00:00",
      "couponCount": 50000,
      "minimumShoppingValue": 500,
      "discountType": 100,
      "discountValue": 100.0,
      "categoryId": 2,
      "partnerId": 76,
      "isActive": true,
      "isPartnerActive": true,
      "bigPictureId": "Pisztácia kifogyott",
      "smallPictureId": "Csokoládé nem is volt",
      "mode": 200,
      "createdBy": "Charlie Firpo",
      "createdDate": "2020-05-01T01:12:23",
      "modifiedBy": "Charlie Firpo",
      "modifiedDate": "2020-06-01T10:12:23",
      "approvedBy": "Johnny Firpo",
      "approvedDate": "2020-03-10T10:20:30",
      "drawDate": "2021-11-01T01:01:01",
      "preferredPosition": 3,
      "predefinedCodesFileId": "ASDF247GD8",
      "onlineClaimLink": null,
      "productDetails": "NoProductsHere",
      "prizeRulesFileId": null,
      "itemPrice": 9,
      "previousYearAverageBasketValue": 98,
      "awardedCampaign": true,
      "prizeValue": 987,
      "tags": null,
      "comments": null,
      "partnerName": "Firpo",
      "showCount": 50,
      "clickCount": 1225,
      "claimCount": 150,
      "discardCount": 9876
    }
  ],
  "page": 1,
  "from": 1,
  "to": 2,
  "size": 5
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Coupons/{id}": {
      "put": {
        "tags": [
          "Coupons"
        ],
        "summary": "Updates a Coupon entity",
        "description": "Updates a Coupon entity with Id of \"id\" to entity \"item\"",
        "operationId": "updateCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Successful update"
          }
        }
      },
      "delete": {
        "tags": [
          "Coupons"
        ],
        "summary": "Deletes a Coupon entity",
        "description": "Deletes the Coupon entity with Id of \"id\"",
        "operationId": "deleteCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        }
      },
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Gets a Coupon entity by Id",
        "description": "Returns the Coupon with the specified Id upon success",
        "operationId": "getCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Coupon",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the Coupon",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Coupon entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVm"
                },
                "example": {
  "id": 1,
  "name": "Ingyen Túró Rudi!",
  "description": "Ingyé túrós rudesz!",
  "rank": 100,
  "type": 0,
  "state": 100,
  "startDate": "2020-08-01T10:00:00",
  "endDate": "2021-08-01T10:00:00",
  "expireDate": "2021-09-01T10:00:00",
  "couponCount": 50000,
  "minimumShoppingValue": 500,
  "discountType": 100,
  "discountValue": 100.0,
  "categoryId": 1,
  "partnerId": 1,
  "isActive": true,
  "isPartnerActive": true,
  "bigPictureId": "És nem is lesz",
  "smallPictureId": "Na meg ez se",
  "mode": 100,
  "createdBy": "Sales Erno",
  "createdDate": "2020-04-11T13:42:50",
  "modifiedBy": "Kasszás Erzsi",
  "modifiedDate": null,
  "approvedBy": "Menedzser Endre",
  "approvedDate": "2020-07-12T20:30:40",
  "drawDate": null,
  "preferredPosition": 0,
  "predefinedCodesFileId": null,
  "onlineClaimLink": null,
  "productDetails": "Kapsz egy ingyen túrórudit!!!444négynégy",
  "prizeRulesFileId": "Majd lesz valahogy",
  "itemPrice": null,
  "previousYearAverageBasketValue": null,
  "awardedCampaign": false,
  "prizeValue": null,
  "tags": [
    1,
    3
  ],
  "comments": [],
  "partnerName": null,
  "showCount": 0,
  "clickCount": 0,
  "claimCount": 0,
  "discardCount": 0
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVm"
                },
                "example": {
  "id": 1,
  "name": "Ingyen Túró Rudi!",
  "description": "Ingyé túrós rudesz!",
  "rank": 100,
  "type": 0,
  "state": 100,
  "startDate": "2020-08-01T10:00:00",
  "endDate": "2021-08-01T10:00:00",
  "expireDate": "2021-09-01T10:00:00",
  "couponCount": 50000,
  "minimumShoppingValue": 500,
  "discountType": 100,
  "discountValue": 100.0,
  "categoryId": 1,
  "partnerId": 1,
  "isActive": true,
  "isPartnerActive": true,
  "bigPictureId": "És nem is lesz",
  "smallPictureId": "Na meg ez se",
  "mode": 100,
  "createdBy": "Sales Erno",
  "createdDate": "2020-04-11T13:42:50",
  "modifiedBy": "Kasszás Erzsi",
  "modifiedDate": null,
  "approvedBy": "Menedzser Endre",
  "approvedDate": "2020-07-12T20:30:40",
  "drawDate": null,
  "preferredPosition": 0,
  "predefinedCodesFileId": null,
  "onlineClaimLink": null,
  "productDetails": "Kapsz egy ingyen túrórudit!!!444négynégy",
  "prizeRulesFileId": "Majd lesz valahogy",
  "itemPrice": null,
  "previousYearAverageBasketValue": null,
  "awardedCampaign": false,
  "prizeValue": null,
  "tags": [
    1,
    3
  ],
  "comments": [],
  "partnerName": null,
  "showCount": 0,
  "clickCount": 0,
  "claimCount": 0,
  "discardCount": 0
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVm"
                },
                "example": {
  "id": 1,
  "name": "Ingyen Túró Rudi!",
  "description": "Ingyé túrós rudesz!",
  "rank": 100,
  "type": 0,
  "state": 100,
  "startDate": "2020-08-01T10:00:00",
  "endDate": "2021-08-01T10:00:00",
  "expireDate": "2021-09-01T10:00:00",
  "couponCount": 50000,
  "minimumShoppingValue": 500,
  "discountType": 100,
  "discountValue": 100.0,
  "categoryId": 1,
  "partnerId": 1,
  "isActive": true,
  "isPartnerActive": true,
  "bigPictureId": "És nem is lesz",
  "smallPictureId": "Na meg ez se",
  "mode": 100,
  "createdBy": "Sales Erno",
  "createdDate": "2020-04-11T13:42:50",
  "modifiedBy": "Kasszás Erzsi",
  "modifiedDate": null,
  "approvedBy": "Menedzser Endre",
  "approvedDate": "2020-07-12T20:30:40",
  "drawDate": null,
  "preferredPosition": 0,
  "predefinedCodesFileId": null,
  "onlineClaimLink": null,
  "productDetails": "Kapsz egy ingyen túrórudit!!!444négynégy",
  "prizeRulesFileId": "Majd lesz valahogy",
  "itemPrice": null,
  "previousYearAverageBasketValue": null,
  "awardedCampaign": false,
  "prizeValue": null,
  "tags": [
    1,
    3
  ],
  "comments": [],
  "partnerName": null,
  "showCount": 0,
  "clickCount": 0,
  "claimCount": 0,
  "discardCount": 0
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Coupons/ExportCoupons": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Exports a Coupon entity list sorted and filtered",
        "description": "Exports the Coupon list with the specified filters applied in a csv file",
        "operationId": "exportCoupons",
        "parameters": [
          {
            "name": "includeArchived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "onlyWaiting",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "rank",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponRank"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponType"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponState"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "expireDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "couponCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "minimumShoppingValue",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "discountValue",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "partnerName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "mode",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponMode"
            }
          },
          {
            "name": "discountType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponDiscountType"
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "preferredPosition",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "drawDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful export: Csv file of Coupon entities",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Ingyen Túró Rudi!",
      "description": "Kaphatsz egy ingyen Túró Rudit!",
      "rank": 100,
      "type": 0,
      "state": 100,
      "startDate": "2020-08-01T10:00:00",
      "endDate": "2021-08-01T10:00:00",
      "expireDate": "2021-09-01T10:00:00",
      "couponCount": 50000,
      "minimumShoppingValue": 500,
      "discountType": 100,
      "discountValue": 100.0,
      "categoryId": 1,
      "partnerId": 1,
      "isActive": false,
      "isPartnerActive": false,
      "bigPictureId": "És nem is lesz",
      "smallPictureId": "Na meg ez se",
      "mode": 100,
      "createdBy": "Sales Ernő",
      "createdDate": "2020-04-11T13:42:50",
      "modifiedBy": "Kasszás Erzsi",
      "modifiedDate": null,
      "approvedBy": "Menedzser Endre",
      "approvedDate": "2020-07-12T20:30:40",
      "drawDate": null,
      "preferredPosition": 4,
      "predefinedCodesFileId": null,
      "onlineClaimLink": "https://isitchristmas.com/",
      "productDetails": "https://isitchristmas.today/",
      "prizeRulesFileId": "missingId",
      "itemPrice": 12,
      "previousYearAverageBasketValue": 123,
      "awardedCampaign": false,
      "prizeValue": 321,
      "tags": null,
      "comments": null,
      "partnerName": "Tesco",
      "showCount": 0,
      "clickCount": 0,
      "claimCount": 0,
      "discardCount": 21
    },
    {
      "id": 2,
      "name": "Pisztácia fagyi!",
      "description": "MissingDescription",
      "rank": 300,
      "type": 200,
      "state": 100,
      "startDate": "2020-09-01T10:00:00",
      "endDate": "2021-09-01T10:00:00",
      "expireDate": "2021-10-01T10:00:00",
      "couponCount": 50000,
      "minimumShoppingValue": 500,
      "discountType": 100,
      "discountValue": 100.0,
      "categoryId": 2,
      "partnerId": 76,
      "isActive": true,
      "isPartnerActive": true,
      "bigPictureId": "Pisztácia kifogyott",
      "smallPictureId": "Csokoládé nem is volt",
      "mode": 200,
      "createdBy": "Charlie Firpo",
      "createdDate": "2020-05-01T01:12:23",
      "modifiedBy": "Charlie Firpo",
      "modifiedDate": "2020-06-01T10:12:23",
      "approvedBy": "Johnny Firpo",
      "approvedDate": "2020-03-10T10:20:30",
      "drawDate": "2021-11-01T01:01:01",
      "preferredPosition": 3,
      "predefinedCodesFileId": "ASDF247GD8",
      "onlineClaimLink": null,
      "productDetails": "NoProductsHere",
      "prizeRulesFileId": null,
      "itemPrice": 9,
      "previousYearAverageBasketValue": 98,
      "awardedCampaign": true,
      "prizeValue": 987,
      "tags": null,
      "comments": null,
      "partnerName": "Firpo",
      "showCount": 50,
      "clickCount": 1225,
      "claimCount": 150,
      "discardCount": 9876
    }
  ],
  "page": 1,
  "from": 1,
  "to": 2,
  "size": 5
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/Coupons/{id}/Status": {
      "put": {
        "tags": [
          "Coupons"
        ],
        "summary": "Updates a Coupon entity status only",
        "description": "Updates a Coupon entity status only with Id of \"id\" to entity \"changeCouponStateDto\"",
        "operationId": "updateCouponStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeCouponStateDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Coupons/{id}/Claim": {
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Claims a coupon for the logged in user",
        "description": "Claims a coupon to put it in the used up coupons for the user",
        "operationId": "claimCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of coupon to claim coupon code for",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of coupon to claim coupon code for",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful claim: coupon code returned",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCodeVm"
                },
                "example": {
  "couponCode": "UNIQUECODE"
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCodeVm"
                },
                "example": {
  "couponCode": "UNIQUECODE"
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCodeVm"
                },
                "example": {
  "couponCode": "UNIQUECODE"
}
              }
            }
          },
          "400": {
            "description": "Saving error: couponUserCode.error.cant-sav",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Coupons/{id}/Activate": {
      "put": {
        "tags": [
          "Coupons"
        ],
        "summary": "Changes the active status of a coupon",
        "description": "Changes the active status of a coupon to the given value",
        "operationId": "activateCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of coupon to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of coupon to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Active status of the coupon to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateCouponDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful claim: coupon code returned"
          },
          "400": {
            "description": "Saving error: couponUserCode.error.cant-sav",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Coupons/{couponId}/ClaimedCodes": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Returns the claimed coupon codes for a coupon",
        "description": "Returns a list of coupon codes that have been claimed for coupon with an Id of couponId",
        "operationId": "getCouponClaimedCodes",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "Id of coupon to get the codes for",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of coupon to get the codes for",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimedCouponCodeVm"
                },
                "example": {
  "couponCodes": [
    "SANA3983BS82",
    "AMD93H2NMK83",
    "AMMCBVLS839N",
    "AJGAW9832ONF",
    "JVMAAHJ9H22J",
    "MV8AW4JA4J92",
    "MSDOGASJ982N",
    "NMSADSE8A9H2",
    "MBMFDKSHA922",
    "MYNALKAJSHW2",
    "ASDN218312K2",
    "AMSD96574M2A",
    "DMVXYCALD783",
    "MDF3278ZSAN2",
    "ASJ98112MDLA",
    "013MDFVWED7B",
    "SNDV9S8H3KL3"
  ]
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimedCouponCodeVm"
                },
                "example": {
  "couponCodes": [
    "SANA3983BS82",
    "AMD93H2NMK83",
    "AMMCBVLS839N",
    "AJGAW9832ONF",
    "JVMAAHJ9H22J",
    "MV8AW4JA4J92",
    "MSDOGASJ982N",
    "NMSADSE8A9H2",
    "MBMFDKSHA922",
    "MYNALKAJSHW2",
    "ASDN218312K2",
    "AMSD96574M2A",
    "DMVXYCALD783",
    "MDF3278ZSAN2",
    "ASJ98112MDLA",
    "013MDFVWED7B",
    "SNDV9S8H3KL3"
  ]
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimedCouponCodeVm"
                },
                "example": {
  "couponCodes": [
    "SANA3983BS82",
    "AMD93H2NMK83",
    "AMMCBVLS839N",
    "AJGAW9832ONF",
    "JVMAAHJ9H22J",
    "MV8AW4JA4J92",
    "MSDOGASJ982N",
    "NMSADSE8A9H2",
    "MBMFDKSHA922",
    "MYNALKAJSHW2",
    "ASDN218312K2",
    "AMSD96574M2A",
    "DMVXYCALD783",
    "MDF3278ZSAN2",
    "ASJ98112MDLA",
    "013MDFVWED7B",
    "SNDV9S8H3KL3"
  ]
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Coupons/{couponId}/Codes": {
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Returns all possible coupon codes",
        "description": "Returns a list of coupon codes that could be claimed by users",
        "operationId": "getCouponCodes",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "Id of coupon to get the codes for",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of coupon to get the codes for",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupons/{couponId}/RedeemedCodes": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Returns the redeemed claimed coupon codes for a coupon",
        "description": "Returns a list of eedeemed coupon codes that have been used up by users",
        "operationId": "getCouponRedeemedCodes",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "Id of coupon to get the codes for",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of coupon to get the codes for",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/EmailSender/Test": {
      "post": {
        "tags": [
          "EmailSender"
        ],
        "summary": "Sends the email template out to the test recipients",
        "operationId": "sendTestEmail",
        "requestBody": {
          "description": "The list of the recipients and the email template id",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailsDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully sent"
          },
          "404": {
            "description": "EmailTemplate not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/EmailSender/Segment": {
      "post": {
        "tags": [
          "EmailSender"
        ],
        "summary": "Sends the email template to the selected segment defined in RTD",
        "operationId": "sendEmailToSegment",
        "requestBody": {
          "description": "The list of the recipients and the email template id",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailToSegmentDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "200": {
            "description": "The server accepted the command"
          }
        }
      }
    },
    "/api/EmailSender/InvitePartnerContact": {
      "post": {
        "tags": [
          "EmailSender"
        ],
        "summary": "Sends an invite partner contact email to the specified email address",
        "operationId": "invitePartnerContact",
        "requestBody": {
          "description": "The recipient email address and the partnerId",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitePartnerContactDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "200": {
            "description": "The server accepted the command"
          }
        }
      }
    },
    "/api/EmailTemplates": {
      "post": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Creates an email template",
        "description": "Returns the id of the new template",
        "operationId": "createEmailTemplate",
        "requestBody": {
          "description": "Details of the new template",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Gets all the available Email Templates",
        "operationId": "getEmailTemplates",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "modifiedAt",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "9GAG",
      "history": [
        {
          "id": 1,
          "content": "FreshPosting",
          "modifiedBy": "Mischevious Admin",
          "modifiedAt": "2020-06-15T10:00:00",
          "version": 1
        },
        {
          "id": 3,
          "content": "FreshPosting",
          "modifiedBy": "Rightful Admin",
          "modifiedAt": "2020-06-20T11:12:13",
          "version": 3
        }
      ],
      "modifiedBy": null,
      "modifiedAt": "0001-01-01T00:00:00",
      "version": 0
    },
    {
      "id": 2,
      "name": "nCore",
      "history": [
        {
          "id": 2,
          "content": "Christmas Game",
          "modifiedBy": "Main Admin",
          "modifiedAt": "2019-12-15T10:00:00",
          "version": 2
        },
        {
          "id": 4,
          "content": "Game Over",
          "modifiedBy": "Little Admin",
          "modifiedAt": "2019-12-31T10:00:00",
          "version": 4
        }
      ],
      "modifiedBy": null,
      "modifiedAt": "0001-01-01T00:00:00",
      "version": 0
    }
  ],
  "page": 1,
  "from": 1,
  "to": 2,
  "size": 4
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "9GAG",
      "history": [
        {
          "id": 1,
          "content": "FreshPosting",
          "modifiedBy": "Mischevious Admin",
          "modifiedAt": "2020-06-15T10:00:00",
          "version": 1
        },
        {
          "id": 3,
          "content": "FreshPosting",
          "modifiedBy": "Rightful Admin",
          "modifiedAt": "2020-06-20T11:12:13",
          "version": 3
        }
      ],
      "modifiedBy": null,
      "modifiedAt": "0001-01-01T00:00:00",
      "version": 0
    },
    {
      "id": 2,
      "name": "nCore",
      "history": [
        {
          "id": 2,
          "content": "Christmas Game",
          "modifiedBy": "Main Admin",
          "modifiedAt": "2019-12-15T10:00:00",
          "version": 2
        },
        {
          "id": 4,
          "content": "Game Over",
          "modifiedBy": "Little Admin",
          "modifiedAt": "2019-12-31T10:00:00",
          "version": 4
        }
      ],
      "modifiedBy": null,
      "modifiedAt": "0001-01-01T00:00:00",
      "version": 0
    }
  ],
  "page": 1,
  "from": 1,
  "to": 2,
  "size": 4
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "9GAG",
      "history": [
        {
          "id": 1,
          "content": "FreshPosting",
          "modifiedBy": "Mischevious Admin",
          "modifiedAt": "2020-06-15T10:00:00",
          "version": 1
        },
        {
          "id": 3,
          "content": "FreshPosting",
          "modifiedBy": "Rightful Admin",
          "modifiedAt": "2020-06-20T11:12:13",
          "version": 3
        }
      ],
      "modifiedBy": null,
      "modifiedAt": "0001-01-01T00:00:00",
      "version": 0
    },
    {
      "id": 2,
      "name": "nCore",
      "history": [
        {
          "id": 2,
          "content": "Christmas Game",
          "modifiedBy": "Main Admin",
          "modifiedAt": "2019-12-15T10:00:00",
          "version": 2
        },
        {
          "id": 4,
          "content": "Game Over",
          "modifiedBy": "Little Admin",
          "modifiedAt": "2019-12-31T10:00:00",
          "version": 4
        }
      ],
      "modifiedBy": null,
      "modifiedAt": "0001-01-01T00:00:00",
      "version": 0
    }
  ],
  "page": 1,
  "from": 1,
  "to": 2,
  "size": 4
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/EmailTemplates/{id}": {
      "get": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Gets an email template",
        "operationId": "getEmailTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the template",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the template",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVm"
                },
                "example": {
  "id": 1,
  "name": "StarWarsNews",
  "history": [
    {
      "id": 1,
      "content": "AnakinIsDead",
      "modifiedBy": "Obi-Wan",
      "modifiedAt": "2006-06-06T00:00:00",
      "version": 1
    },
    {
      "id": 2,
      "content": "VaderIsAlive",
      "modifiedBy": "Palpatine",
      "modifiedAt": "2007-06-06T00:00:00",
      "version": 2
    },
    {
      "id": 3,
      "content": "VaderIsDead",
      "modifiedBy": "Luke",
      "modifiedAt": "2008-06-06T00:00:00",
      "version": 3
    }
  ],
  "modifiedBy": "",
  "modifiedAt": "2008-07-07T00:00:00",
  "version": 1
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVm"
                },
                "example": {
  "id": 1,
  "name": "StarWarsNews",
  "history": [
    {
      "id": 1,
      "content": "AnakinIsDead",
      "modifiedBy": "Obi-Wan",
      "modifiedAt": "2006-06-06T00:00:00",
      "version": 1
    },
    {
      "id": 2,
      "content": "VaderIsAlive",
      "modifiedBy": "Palpatine",
      "modifiedAt": "2007-06-06T00:00:00",
      "version": 2
    },
    {
      "id": 3,
      "content": "VaderIsDead",
      "modifiedBy": "Luke",
      "modifiedAt": "2008-06-06T00:00:00",
      "version": 3
    }
  ],
  "modifiedBy": "",
  "modifiedAt": "2008-07-07T00:00:00",
  "version": 1
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVm"
                },
                "example": {
  "id": 1,
  "name": "StarWarsNews",
  "history": [
    {
      "id": 1,
      "content": "AnakinIsDead",
      "modifiedBy": "Obi-Wan",
      "modifiedAt": "2006-06-06T00:00:00",
      "version": 1
    },
    {
      "id": 2,
      "content": "VaderIsAlive",
      "modifiedBy": "Palpatine",
      "modifiedAt": "2007-06-06T00:00:00",
      "version": 2
    },
    {
      "id": 3,
      "content": "VaderIsDead",
      "modifiedBy": "Luke",
      "modifiedAt": "2008-06-06T00:00:00",
      "version": 3
    }
  ],
  "modifiedBy": "",
  "modifiedAt": "2008-07-07T00:00:00",
  "version": 1
}
              }
            }
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "NotAvailable",
        "operationId": "updateEmailTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Nothing",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nothing",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Nothing",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailTemplateDto"
              }
            }
          }
        },
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Deletes an email template",
        "operationId": "deleteEmailTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the template",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the template",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful"
          }
        }
      }
    },
    "/api/EmailTemplates/Export": {
      "get": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Exports an entity list sorted and filtered",
        "description": "Exports the entity list with the specified filters applied in a csv file",
        "operationId": "exportEmailTemplates",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "modifiedAt",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful export: Csv file of entities",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/EmailTemplates/{id}/Version": {
      "post": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Creates an email template",
        "description": "Returns the id of the new template",
        "operationId": "saveEmailTemplateVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the template",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the template",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the new template",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailTemplateVersionDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful"
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/EmailTemplates/{id}/Version/{version}/Restore": {
      "post": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Creates an email template",
        "description": "Returns the id of the new template",
        "operationId": "restoreEmailTemplateVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the template",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the template",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the template",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The version of the template",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful"
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Information": {
      "get": {
        "tags": [
          "Information"
        ],
        "summary": "Returns a list of all the exception errorkeys",
        "operationId": "getErrorKeys",
        "responses": {
          "200": {
            "description": "Successful query: string list of exception errorkeys",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
  "YBZQKDCZRP",
  "SESROIDJWE",
  "EYXIEOZMNZ",
  "ROWQQJSIRG",
  "IZCEABEZSP",
  "MMUSFSFXCT",
  "QQJKCCCKAG",
  "HOEOZNGIAN",
  "ZJVPCADPQA",
  "GEEVPEHMJE",
  "TNMELRQLID",
  "GHZQRFUJVD",
  "YQJEXVICPT",
  "OMKIJGGBJK",
  "KKDKVCQHXC",
  "GDJACJKQOW",
  "ELERXDMHWP",
  "PAHFNNGQCG",
  "YQQJFBVLXU",
  "CMJUAYDSCY"
]
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
  "YBZQKDCZRP",
  "SESROIDJWE",
  "EYXIEOZMNZ",
  "ROWQQJSIRG",
  "IZCEABEZSP",
  "MMUSFSFXCT",
  "QQJKCCCKAG",
  "HOEOZNGIAN",
  "ZJVPCADPQA",
  "GEEVPEHMJE",
  "TNMELRQLID",
  "GHZQRFUJVD",
  "YQJEXVICPT",
  "OMKIJGGBJK",
  "KKDKVCQHXC",
  "GDJACJKQOW",
  "ELERXDMHWP",
  "PAHFNNGQCG",
  "YQQJFBVLXU",
  "CMJUAYDSCY"
]
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
  "YBZQKDCZRP",
  "SESROIDJWE",
  "EYXIEOZMNZ",
  "ROWQQJSIRG",
  "IZCEABEZSP",
  "MMUSFSFXCT",
  "QQJKCCCKAG",
  "HOEOZNGIAN",
  "ZJVPCADPQA",
  "GEEVPEHMJE",
  "TNMELRQLID",
  "GHZQRFUJVD",
  "YQJEXVICPT",
  "OMKIJGGBJK",
  "KKDKVCQHXC",
  "GDJACJKQOW",
  "ELERXDMHWP",
  "PAHFNNGQCG",
  "YQQJFBVLXU",
  "CMJUAYDSCY"
]
              }
            }
          }
        }
      }
    },
    "/api/NotificationHub/TestCampaignMovedToWaitingStateNotification": {
      "post": {
        "tags": [
          "NotificationHub"
        ],
        "operationId": "testCampaignMovedToWaitingStateNotification",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/NotificationHub/Events": {
      "get": {
        "tags": [
          "NotificationHub"
        ],
        "operationId": "notificationHubEvents",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
  "YBZQKDCZRP",
  "SESROIDJWE",
  "EYXIEOZMNZ",
  "ROWQQJSIRG",
  "IZCEABEZSP",
  "MMUSFSFXCT",
  "QQJKCCCKAG",
  "HOEOZNGIAN",
  "ZJVPCADPQA",
  "GEEVPEHMJE",
  "TNMELRQLID",
  "GHZQRFUJVD",
  "YQJEXVICPT",
  "OMKIJGGBJK",
  "KKDKVCQHXC",
  "GDJACJKQOW",
  "ELERXDMHWP",
  "PAHFNNGQCG",
  "YQQJFBVLXU",
  "CMJUAYDSCY"
]
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
  "YBZQKDCZRP",
  "SESROIDJWE",
  "EYXIEOZMNZ",
  "ROWQQJSIRG",
  "IZCEABEZSP",
  "MMUSFSFXCT",
  "QQJKCCCKAG",
  "HOEOZNGIAN",
  "ZJVPCADPQA",
  "GEEVPEHMJE",
  "TNMELRQLID",
  "GHZQRFUJVD",
  "YQJEXVICPT",
  "OMKIJGGBJK",
  "KKDKVCQHXC",
  "GDJACJKQOW",
  "ELERXDMHWP",
  "PAHFNNGQCG",
  "YQQJFBVLXU",
  "CMJUAYDSCY"
]
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
  "YBZQKDCZRP",
  "SESROIDJWE",
  "EYXIEOZMNZ",
  "ROWQQJSIRG",
  "IZCEABEZSP",
  "MMUSFSFXCT",
  "QQJKCCCKAG",
  "HOEOZNGIAN",
  "ZJVPCADPQA",
  "GEEVPEHMJE",
  "TNMELRQLID",
  "GHZQRFUJVD",
  "YQJEXVICPT",
  "OMKIJGGBJK",
  "KKDKVCQHXC",
  "GDJACJKQOW",
  "ELERXDMHWP",
  "PAHFNNGQCG",
  "YQQJFBVLXU",
  "CMJUAYDSCY"
]
              }
            }
          }
        }
      }
    },
    "/api/Notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Gets a list of paginated/sorted notifications",
        "description": "Returns the Notifications with the specified filters applied",
        "operationId": "getNotifications",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/NotificationType"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of notifications",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationsPaginatedResponse"
                },
                "example": {
  "unseenCount": 8,
  "result": [
    {
      "id": 1,
      "isSeen": false,
      "type": 2,
      "createdDate": "2020-07-11T12:23:34",
      "parent": {
        "id": 2,
        "value": "Megybefőtt Üzem"
      },
      "actual": {
        "id": 3,
        "value": "Kis Józsika Kft."
      },
      "value": "Kis Józsika Kft. regisztrált"
    },
    {
      "id": 12,
      "isSeen": true,
      "type": 1,
      "createdDate": "2020-06-20T23:59:59",
      "parent": {
        "id": 23,
        "value": "Kisbolt kft."
      },
      "actual": {
        "id": 34,
        "value": "Túró Rudi"
      },
      "value": "Az ingyen túró rudinál valami baj van!"
    },
    {
      "id": 123,
      "isSeen": true,
      "type": 2,
      "createdDate": "2020-08-01T01:02:03",
      "parent": {
        "id": 234,
        "value": "Anonim szerencsejátékfüggők társulata"
      },
      "actual": {
        "id": 345,
        "value": "Marika néni Ltd."
      },
      "value": "Marika néni Ltd. regisztált"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 11
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationsPaginatedResponse"
                },
                "example": {
  "unseenCount": 8,
  "result": [
    {
      "id": 1,
      "isSeen": false,
      "type": 2,
      "createdDate": "2020-07-11T12:23:34",
      "parent": {
        "id": 2,
        "value": "Megybefőtt Üzem"
      },
      "actual": {
        "id": 3,
        "value": "Kis Józsika Kft."
      },
      "value": "Kis Józsika Kft. regisztrált"
    },
    {
      "id": 12,
      "isSeen": true,
      "type": 1,
      "createdDate": "2020-06-20T23:59:59",
      "parent": {
        "id": 23,
        "value": "Kisbolt kft."
      },
      "actual": {
        "id": 34,
        "value": "Túró Rudi"
      },
      "value": "Az ingyen túró rudinál valami baj van!"
    },
    {
      "id": 123,
      "isSeen": true,
      "type": 2,
      "createdDate": "2020-08-01T01:02:03",
      "parent": {
        "id": 234,
        "value": "Anonim szerencsejátékfüggők társulata"
      },
      "actual": {
        "id": 345,
        "value": "Marika néni Ltd."
      },
      "value": "Marika néni Ltd. regisztált"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 11
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationsPaginatedResponse"
                },
                "example": {
  "unseenCount": 8,
  "result": [
    {
      "id": 1,
      "isSeen": false,
      "type": 2,
      "createdDate": "2020-07-11T12:23:34",
      "parent": {
        "id": 2,
        "value": "Megybefőtt Üzem"
      },
      "actual": {
        "id": 3,
        "value": "Kis Józsika Kft."
      },
      "value": "Kis Józsika Kft. regisztrált"
    },
    {
      "id": 12,
      "isSeen": true,
      "type": 1,
      "createdDate": "2020-06-20T23:59:59",
      "parent": {
        "id": 23,
        "value": "Kisbolt kft."
      },
      "actual": {
        "id": 34,
        "value": "Túró Rudi"
      },
      "value": "Az ingyen túró rudinál valami baj van!"
    },
    {
      "id": 123,
      "isSeen": true,
      "type": 2,
      "createdDate": "2020-08-01T01:02:03",
      "parent": {
        "id": 234,
        "value": "Anonim szerencsejátékfüggők társulata"
      },
      "actual": {
        "id": 345,
        "value": "Marika néni Ltd."
      },
      "value": "Marika néni Ltd. regisztált"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 11
}
              }
            }
          }
        }
      }
    },
    "/api/Notifications/{id}/Seen": {
      "put": {
        "tags": [
          "Notifications"
        ],
        "summary": "Updates a notification to seen",
        "description": "Sets the notification with the given Id as seen",
        "operationId": "seenNotification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the notification",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the notification",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful update"
          },
          "404": {
            "description": "Notification not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error, the notification doesn't belong to the current user: error.auth.forbidden"
          }
        }
      }
    },
    "/api/Notifications/{id}/UnSeen": {
      "put": {
        "tags": [
          "Notifications"
        ],
        "summary": "Updates a notification to unseen",
        "description": "Sets the notification with the given Id as unseen",
        "operationId": "unSeenNotification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the notification",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the notification",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful update"
          },
          "404": {
            "description": "Notification not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Authentication error, the notification doesn't belong to the current user: error.auth.forbidden"
          }
        }
      }
    },
    "/api/Notifications/SeenAll": {
      "put": {
        "tags": [
          "Notifications"
        ],
        "summary": "Updates all notification to seen for the current user",
        "description": "Sets user unseen notifications to seen",
        "operationId": "seenAllNotifications",
        "responses": {
          "204": {
            "description": "Successful update"
          }
        }
      }
    },
    "/api/Notifications/Types": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Returns the possible notification types",
        "operationId": "NotificationTypes",
        "responses": {
          "200": {
            "description": "Returns the notification types",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
  "YBZQKDCZRP",
  "SESROIDJWE",
  "EYXIEOZMNZ",
  "ROWQQJSIRG",
  "IZCEABEZSP",
  "MMUSFSFXCT",
  "QQJKCCCKAG",
  "HOEOZNGIAN",
  "ZJVPCADPQA",
  "GEEVPEHMJE",
  "TNMELRQLID",
  "GHZQRFUJVD",
  "YQJEXVICPT",
  "OMKIJGGBJK",
  "KKDKVCQHXC",
  "GDJACJKQOW",
  "ELERXDMHWP",
  "PAHFNNGQCG",
  "YQQJFBVLXU",
  "CMJUAYDSCY"
]
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
  "YBZQKDCZRP",
  "SESROIDJWE",
  "EYXIEOZMNZ",
  "ROWQQJSIRG",
  "IZCEABEZSP",
  "MMUSFSFXCT",
  "QQJKCCCKAG",
  "HOEOZNGIAN",
  "ZJVPCADPQA",
  "GEEVPEHMJE",
  "TNMELRQLID",
  "GHZQRFUJVD",
  "YQJEXVICPT",
  "OMKIJGGBJK",
  "KKDKVCQHXC",
  "GDJACJKQOW",
  "ELERXDMHWP",
  "PAHFNNGQCG",
  "YQQJFBVLXU",
  "CMJUAYDSCY"
]
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
  "YBZQKDCZRP",
  "SESROIDJWE",
  "EYXIEOZMNZ",
  "ROWQQJSIRG",
  "IZCEABEZSP",
  "MMUSFSFXCT",
  "QQJKCCCKAG",
  "HOEOZNGIAN",
  "ZJVPCADPQA",
  "GEEVPEHMJE",
  "TNMELRQLID",
  "GHZQRFUJVD",
  "YQJEXVICPT",
  "OMKIJGGBJK",
  "KKDKVCQHXC",
  "GDJACJKQOW",
  "ELERXDMHWP",
  "PAHFNNGQCG",
  "YQQJFBVLXU",
  "CMJUAYDSCY"
]
              }
            }
          }
        }
      }
    },
    "/api/Notifications/TestNotification": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "For Testing purposes only",
        "operationId": "addTestNotification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNotificationTestCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Notification added"
          }
        }
      }
    },
    "/api/PartnerContacts/My": {
      "get": {
        "tags": [
          "PartnerContacts"
        ],
        "operationId": "getMyPartnerContact",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVm"
                },
                "example": {
  "id": 1,
  "name": "Frodo",
  "email": "Frogo.Baggins@shire.hu",
  "phone": "+36303030303",
  "partnerName": "Shire",
  "isActive": true,
  "role": 0
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVm"
                },
                "example": {
  "id": 1,
  "name": "Frodo",
  "email": "Frogo.Baggins@shire.hu",
  "phone": "+36303030303",
  "partnerName": "Shire",
  "isActive": true,
  "role": 0
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVm"
                },
                "example": {
  "id": 1,
  "name": "Frodo",
  "email": "Frogo.Baggins@shire.hu",
  "phone": "+36303030303",
  "partnerName": "Shire",
  "isActive": true,
  "role": 0
}
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PartnerContacts"
        ],
        "operationId": "updateMyPartnerContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerContactSelfDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/PartnerContacts/{id}": {
      "put": {
        "tags": [
          "PartnerContacts"
        ],
        "operationId": "updatePartnerContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerContactDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "PartnerContacts"
        ],
        "operationId": "getPartnerContact",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVm"
                },
                "example": {
  "id": 1,
  "name": "Frodo",
  "email": "Frogo.Baggins@shire.hu",
  "phone": "+36303030303",
  "partnerName": "Shire",
  "isActive": true,
  "role": 0
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVm"
                },
                "example": {
  "id": 1,
  "name": "Frodo",
  "email": "Frogo.Baggins@shire.hu",
  "phone": "+36303030303",
  "partnerName": "Shire",
  "isActive": true,
  "role": 0
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVm"
                },
                "example": {
  "id": 1,
  "name": "Frodo",
  "email": "Frogo.Baggins@shire.hu",
  "phone": "+36303030303",
  "partnerName": "Shire",
  "isActive": true,
  "role": 0
}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/PartnerContacts": {
      "get": {
        "tags": [
          "PartnerContacts"
        ],
        "operationId": "getPartnerPartnerContact",
        "parameters": [
          {
            "name": "partnerId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "role",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Roles"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 420,
      "name": "Snoop Dogg",
      "email": "SnoopyDoggo@cbd.hu",
      "phone": "+36204206969",
      "partnerName": "Blaze It!",
      "isActive": false,
      "role": 200
    },
    {
      "id": 42,
      "name": "Elon Musk",
      "email": "ElonGreatestMusk@tesla.hu",
      "phone": "+36204351488",
      "partnerName": "Stupid Company",
      "isActive": true,
      "role": 100
    },
    {
      "id": 666,
      "name": "Bruce Willis",
      "email": "Frank.Moses@red.hu",
      "phone": "+36201234567",
      "partnerName": "Hell",
      "isActive": true,
      "role": 1100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 3
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 420,
      "name": "Snoop Dogg",
      "email": "SnoopyDoggo@cbd.hu",
      "phone": "+36204206969",
      "partnerName": "Blaze It!",
      "isActive": false,
      "role": 200
    },
    {
      "id": 42,
      "name": "Elon Musk",
      "email": "ElonGreatestMusk@tesla.hu",
      "phone": "+36204351488",
      "partnerName": "Stupid Company",
      "isActive": true,
      "role": 100
    },
    {
      "id": 666,
      "name": "Bruce Willis",
      "email": "Frank.Moses@red.hu",
      "phone": "+36201234567",
      "partnerName": "Hell",
      "isActive": true,
      "role": 1100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 3
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 420,
      "name": "Snoop Dogg",
      "email": "SnoopyDoggo@cbd.hu",
      "phone": "+36204206969",
      "partnerName": "Blaze It!",
      "isActive": false,
      "role": 200
    },
    {
      "id": 42,
      "name": "Elon Musk",
      "email": "ElonGreatestMusk@tesla.hu",
      "phone": "+36204351488",
      "partnerName": "Stupid Company",
      "isActive": true,
      "role": 100
    },
    {
      "id": 666,
      "name": "Bruce Willis",
      "email": "Frank.Moses@red.hu",
      "phone": "+36201234567",
      "partnerName": "Hell",
      "isActive": true,
      "role": 1100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 3
}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/PartnerContacts/ExportPartnerPartnerContacts": {
      "get": {
        "tags": [
          "PartnerContacts"
        ],
        "operationId": "exportPartnerPartnerContact",
        "parameters": [
          {
            "name": "partnerId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "role",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Roles"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested file.",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Partners/My": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Returns the details about the logged in contact's partner",
        "operationId": "getMyPartner",
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                },
                "example": {
  "id": 1,
  "name": "Tesco",
  "address": "Budapest, Váci út 136",
  "mailingAddress": "Budapest, Váci út 136",
  "registrationNumber": "MBA31NZT9D3L",
  "taxNumber": "1236682-16337532",
  "bankAccount": "12345678-00000000-87654321",
  "registrationAllowed": "Kis Gábor",
  "registerCode": "JOLVANTESO",
  "majorPartner": true,
  "partnerState": 100,
  "partnerRegistrationState": 300
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                },
                "example": {
  "id": 1,
  "name": "Tesco",
  "address": "Budapest, Váci út 136",
  "mailingAddress": "Budapest, Váci út 136",
  "registrationNumber": "MBA31NZT9D3L",
  "taxNumber": "1236682-16337532",
  "bankAccount": "12345678-00000000-87654321",
  "registrationAllowed": "Kis Gábor",
  "registerCode": "JOLVANTESO",
  "majorPartner": true,
  "partnerState": 100,
  "partnerRegistrationState": 300
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                },
                "example": {
  "id": 1,
  "name": "Tesco",
  "address": "Budapest, Váci út 136",
  "mailingAddress": "Budapest, Váci út 136",
  "registrationNumber": "MBA31NZT9D3L",
  "taxNumber": "1236682-16337532",
  "bankAccount": "12345678-00000000-87654321",
  "registrationAllowed": "Kis Gábor",
  "registerCode": "JOLVANTESO",
  "majorPartner": true,
  "partnerState": 100,
  "partnerRegistrationState": 300
}
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Updates the logged in contact's partner",
        "operationId": "updateMyPartner",
        "requestBody": {
          "description": "New details of the partner to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occured: error.common.validation"
          }
        }
      }
    },
    "/api/Partners": {
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Creates an entity",
        "description": "Returns the id of the entity upon success",
        "operationId": "createPartner",
        "requestBody": {
          "description": "Details of the entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      },
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Gets an entity list sorted and filtered",
        "description": "Returns the entity list with the specified filters applied",
        "operationId": "getPartners",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "majorPartner",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "partnerState",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PartnerState"
            }
          },
          {
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "partnerRegistrationState",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PartnerRegistrationState"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Tesco",
      "address": "2040 Budaörs, Kinizsi u. 1-3.",
      "mailingAddress": "2040 Budaörs, Kinizsi u. 1-3.",
      "registrationNumber": "MBA31NZT9D3L",
      "taxNumber": "12366821-16337532",
      "bankAccount": "12345678-00000000-87654321",
      "registrationAllowed": "Kis Gabor",
      "registerCode": "JOLVANTESO",
      "majorPartner": true,
      "partnerState": 100,
      "partnerRegistrationState": 300
    },
    {
      "id": 12,
      "name": "Spar",
      "address": "2060 Bicske, SPAR út 0326/1.",
      "mailingAddress": "2060 Bicske, SPAR út 0326/1.",
      "registrationNumber": "ADF89243N9AC",
      "taxNumber": "34872961-41356743",
      "bankAccount": "87654321-00000000-12345678",
      "registrationAllowed": "Nap Pali",
      "registerCode": "LEGYENIGYSE",
      "majorPartner": false,
      "partnerState": 200,
      "partnerRegistrationState": 200
    },
    {
      "id": 123,
      "name": "Grape Solutions",
      "address": "H-1023 Budapest, Arpad fejedelem utja 26 – 28. I. floor",
      "mailingAddress": "H-1023 Budapest, Arpad fejedelem utja 26 – 28. I. floor",
      "registrationNumber": "MAE847893N28",
      "taxNumber": "12468523-49853547",
      "bankAccount": "91827364-88888888-55463728",
      "registrationAllowed": "Nagy Antal",
      "registerCode": "MEGADJUK",
      "majorPartner": false,
      "partnerState": 0,
      "partnerRegistrationState": 100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 11
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Tesco",
      "address": "2040 Budaörs, Kinizsi u. 1-3.",
      "mailingAddress": "2040 Budaörs, Kinizsi u. 1-3.",
      "registrationNumber": "MBA31NZT9D3L",
      "taxNumber": "12366821-16337532",
      "bankAccount": "12345678-00000000-87654321",
      "registrationAllowed": "Kis Gabor",
      "registerCode": "JOLVANTESO",
      "majorPartner": true,
      "partnerState": 100,
      "partnerRegistrationState": 300
    },
    {
      "id": 12,
      "name": "Spar",
      "address": "2060 Bicske, SPAR út 0326/1.",
      "mailingAddress": "2060 Bicske, SPAR út 0326/1.",
      "registrationNumber": "ADF89243N9AC",
      "taxNumber": "34872961-41356743",
      "bankAccount": "87654321-00000000-12345678",
      "registrationAllowed": "Nap Pali",
      "registerCode": "LEGYENIGYSE",
      "majorPartner": false,
      "partnerState": 200,
      "partnerRegistrationState": 200
    },
    {
      "id": 123,
      "name": "Grape Solutions",
      "address": "H-1023 Budapest, Arpad fejedelem utja 26 – 28. I. floor",
      "mailingAddress": "H-1023 Budapest, Arpad fejedelem utja 26 – 28. I. floor",
      "registrationNumber": "MAE847893N28",
      "taxNumber": "12468523-49853547",
      "bankAccount": "91827364-88888888-55463728",
      "registrationAllowed": "Nagy Antal",
      "registerCode": "MEGADJUK",
      "majorPartner": false,
      "partnerState": 0,
      "partnerRegistrationState": 100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 11
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Tesco",
      "address": "2040 Budaörs, Kinizsi u. 1-3.",
      "mailingAddress": "2040 Budaörs, Kinizsi u. 1-3.",
      "registrationNumber": "MBA31NZT9D3L",
      "taxNumber": "12366821-16337532",
      "bankAccount": "12345678-00000000-87654321",
      "registrationAllowed": "Kis Gabor",
      "registerCode": "JOLVANTESO",
      "majorPartner": true,
      "partnerState": 100,
      "partnerRegistrationState": 300
    },
    {
      "id": 12,
      "name": "Spar",
      "address": "2060 Bicske, SPAR út 0326/1.",
      "mailingAddress": "2060 Bicske, SPAR út 0326/1.",
      "registrationNumber": "ADF89243N9AC",
      "taxNumber": "34872961-41356743",
      "bankAccount": "87654321-00000000-12345678",
      "registrationAllowed": "Nap Pali",
      "registerCode": "LEGYENIGYSE",
      "majorPartner": false,
      "partnerState": 200,
      "partnerRegistrationState": 200
    },
    {
      "id": 123,
      "name": "Grape Solutions",
      "address": "H-1023 Budapest, Arpad fejedelem utja 26 – 28. I. floor",
      "mailingAddress": "H-1023 Budapest, Arpad fejedelem utja 26 – 28. I. floor",
      "registrationNumber": "MAE847893N28",
      "taxNumber": "12468523-49853547",
      "bankAccount": "91827364-88888888-55463728",
      "registrationAllowed": "Nagy Antal",
      "registerCode": "MEGADJUK",
      "majorPartner": false,
      "partnerState": 0,
      "partnerRegistrationState": 100
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 11
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/Partners/{id}": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Gets an entity by Id",
        "description": "Returns the entity with the specified Id upon success",
        "operationId": "getPartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the entity",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: entity details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                },
                "example": {
  "id": 1,
  "name": "Tesco",
  "address": "Budapest, Váci út 136",
  "mailingAddress": "Budapest, Váci út 136",
  "registrationNumber": "MBA31NZT9D3L",
  "taxNumber": "1236682-16337532",
  "bankAccount": "12345678-00000000-87654321",
  "registrationAllowed": "Kis Gábor",
  "registerCode": "JOLVANTESO",
  "majorPartner": true,
  "partnerState": 100,
  "partnerRegistrationState": 300
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                },
                "example": {
  "id": 1,
  "name": "Tesco",
  "address": "Budapest, Váci út 136",
  "mailingAddress": "Budapest, Váci út 136",
  "registrationNumber": "MBA31NZT9D3L",
  "taxNumber": "1236682-16337532",
  "bankAccount": "12345678-00000000-87654321",
  "registrationAllowed": "Kis Gábor",
  "registerCode": "JOLVANTESO",
  "majorPartner": true,
  "partnerState": 100,
  "partnerRegistrationState": 300
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                },
                "example": {
  "id": 1,
  "name": "Tesco",
  "address": "Budapest, Váci út 136",
  "mailingAddress": "Budapest, Váci út 136",
  "registrationNumber": "MBA31NZT9D3L",
  "taxNumber": "1236682-16337532",
  "bankAccount": "12345678-00000000-87654321",
  "registrationAllowed": "Kis Gábor",
  "registerCode": "JOLVANTESO",
  "majorPartner": true,
  "partnerState": 100,
  "partnerRegistrationState": 300
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Updates an entity",
        "description": "Updates an entity with Id of \"id\" to entity \"dto\"",
        "operationId": "updatePartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes an entity",
        "description": "Deletes an entity with Id of \"id\"",
        "operationId": "deletePartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Partners/ExportPartners": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Exports an entity list sorted and filtered",
        "description": "Exports the entity list with the specified filters applied in a csv file",
        "operationId": "exportPartners",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "majorPartner",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "partnerState",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PartnerState"
            }
          },
          {
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "partnerRegistrationState",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PartnerRegistrationState"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Csv file of entities",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/Partners/Activate/{id}": {
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Activates or inactivates a partner",
        "description": "Activates or inactivates a partner with Id of \"id\"",
        "operationId": "activatePartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to activate/inactivate",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to activate/inactivate",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Dto containing the new value of the partner active status",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivatePartnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful activation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Partners/ChangeRegState/{id}": {
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Changes the registration state of a partner",
        "description": "Changes the registration state of a partner with an Id of \"id\"",
        "operationId": "changeRegStatePartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to change registration state/inactivate",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to change registration state/inactivate",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Dto containing the new value of the partner registration state",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePartnerRegistrationStateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful registration state change"
          },
          "400": {
            "description": "Invalid state for state change"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Scoring": {
      "get": {
        "tags": [
          "Scoring"
        ],
        "summary": "Gets a scoreEvent entity list sorted and filtered",
        "description": "Returns the scoreEvent list with the specified filters applied",
        "operationId": "getMyScoring",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of scoreEvent Entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScoringEventPaginatedResponse"
                },
                "example": {
  "score": 877,
  "result": [
    {
      "evenType": 0,
      "dateTime": "2020-07-27T08:50:00",
      "score": 2
    },
    {
      "evenType": 0,
      "dateTime": "2020-07-28T08:50:00",
      "score": 2
    },
    {
      "evenType": 0,
      "dateTime": "2020-07-29T08:50:00",
      "score": 2
    },
    {
      "evenType": 0,
      "dateTime": "2020-07-30T08:50:00",
      "score": 2
    },
    {
      "evenType": 0,
      "dateTime": "2020-07-31T08:50:00",
      "score": 2
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 22
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScoringEventPaginatedResponse"
                },
                "example": {
  "score": 877,
  "result": [
    {
      "evenType": 0,
      "dateTime": "2020-07-27T08:50:00",
      "score": 2
    },
    {
      "evenType": 0,
      "dateTime": "2020-07-28T08:50:00",
      "score": 2
    },
    {
      "evenType": 0,
      "dateTime": "2020-07-29T08:50:00",
      "score": 2
    },
    {
      "evenType": 0,
      "dateTime": "2020-07-30T08:50:00",
      "score": 2
    },
    {
      "evenType": 0,
      "dateTime": "2020-07-31T08:50:00",
      "score": 2
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 22
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScoringEventPaginatedResponse"
                },
                "example": {
  "score": 877,
  "result": [
    {
      "evenType": 0,
      "dateTime": "2020-07-27T08:50:00",
      "score": 2
    },
    {
      "evenType": 0,
      "dateTime": "2020-07-28T08:50:00",
      "score": 2
    },
    {
      "evenType": 0,
      "dateTime": "2020-07-29T08:50:00",
      "score": 2
    },
    {
      "evenType": 0,
      "dateTime": "2020-07-30T08:50:00",
      "score": 2
    },
    {
      "evenType": 0,
      "dateTime": "2020-07-31T08:50:00",
      "score": 2
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 22
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Scoring/ExportMyScores": {
      "get": {
        "tags": [
          "Scoring"
        ],
        "summary": "Exports a scoreEvent entity list sorted and filtered",
        "description": "Exports the scoreEvent list with the specified filters applied in a csv file",
        "operationId": "exportMyScoring",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Csv file of scoreEvent Entities",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      }
    },
    "/api/Segments": {
      "get": {
        "tags": [
          "Segments"
        ],
        "operationId": "getSegments",
        "parameters": [
          {
            "name": "segmentName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "PKMLegitSegment",
      "segmentSize": 625
    },
    {
      "id": 12,
      "name": "PKMSomeOtherSegment",
      "segmentSize": 1625
    },
    {
      "id": 123,
      "name": "PKMNotLegitSegment",
      "segmentSize": 44
    },
    {
      "id": 1234,
      "name": "PKMNotEvenRealSegment",
      "segmentSize": 2
    },
    {
      "id": 12345,
      "name": "PKMSegmentSizeTest",
      "segmentSize": 61233
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 11
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "PKMLegitSegment",
      "segmentSize": 625
    },
    {
      "id": 12,
      "name": "PKMSomeOtherSegment",
      "segmentSize": 1625
    },
    {
      "id": 123,
      "name": "PKMNotLegitSegment",
      "segmentSize": 44
    },
    {
      "id": 1234,
      "name": "PKMNotEvenRealSegment",
      "segmentSize": 2
    },
    {
      "id": 12345,
      "name": "PKMSegmentSizeTest",
      "segmentSize": 61233
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 11
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "PKMLegitSegment",
      "segmentSize": 625
    },
    {
      "id": 12,
      "name": "PKMSomeOtherSegment",
      "segmentSize": 1625
    },
    {
      "id": 123,
      "name": "PKMNotLegitSegment",
      "segmentSize": 44
    },
    {
      "id": 1234,
      "name": "PKMNotEvenRealSegment",
      "segmentSize": 2
    },
    {
      "id": 12345,
      "name": "PKMSegmentSizeTest",
      "segmentSize": 61233
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 11
}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Segments"
        ],
        "operationId": "upsertSegments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "example": [
  1613,
  7761,
  2402,
  8319,
  6540,
  30,
  3239,
  9568,
  5638,
  4374,
  9699,
  8051,
  4596,
  6317,
  1254,
  9688,
  768,
  4498,
  6609,
  9993
]
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "example": [
  1613,
  7761,
  2402,
  8319,
  6540,
  30,
  3239,
  9568,
  5638,
  4374,
  9699,
  8051,
  4596,
  6317,
  1254,
  9688,
  768,
  4498,
  6609,
  9993
]
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "example": [
  1613,
  7761,
  2402,
  8319,
  6540,
  30,
  3239,
  9568,
  5638,
  4374,
  9699,
  8051,
  4596,
  6317,
  1254,
  9688,
  768,
  4498,
  6609,
  9993
]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Segments"
        ],
        "operationId": "deleteSegment",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Sites": {
      "post": {
        "tags": [
          "Sites"
        ],
        "summary": "Creates an entity",
        "description": "Returns the id of the entity upon success",
        "operationId": "createSite",
        "requestBody": {
          "description": "Details of the entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Gets an entity list sorted and filtered",
        "description": "Returns the entity list with the specified filters applied",
        "operationId": "getSites",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "partnerId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Otthon",
      "address": "AholLakniJo"
    },
    {
      "id": 12,
      "name": "Otthon",
      "address": "AholLakniJo"
    },
    {
      "id": 123,
      "name": "Otthon",
      "address": "AholLakniJo"
    },
    {
      "id": 1234,
      "name": "Otthon",
      "address": "AholLakniJo"
    },
    {
      "id": 12345,
      "name": "Otthon",
      "address": "AholLakniJo"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 13
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Otthon",
      "address": "AholLakniJo"
    },
    {
      "id": 12,
      "name": "Otthon",
      "address": "AholLakniJo"
    },
    {
      "id": 123,
      "name": "Otthon",
      "address": "AholLakniJo"
    },
    {
      "id": 1234,
      "name": "Otthon",
      "address": "AholLakniJo"
    },
    {
      "id": 12345,
      "name": "Otthon",
      "address": "AholLakniJo"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 13
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Otthon",
      "address": "AholLakniJo"
    },
    {
      "id": 12,
      "name": "Otthon",
      "address": "AholLakniJo"
    },
    {
      "id": 123,
      "name": "Otthon",
      "address": "AholLakniJo"
    },
    {
      "id": 1234,
      "name": "Otthon",
      "address": "AholLakniJo"
    },
    {
      "id": 12345,
      "name": "Otthon",
      "address": "AholLakniJo"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 13
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Sites/{id}": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Gets an entity by Id",
        "description": "Returns the entity with the specified Id upon success",
        "operationId": "getSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the entity",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: entity details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVm"
                },
                "example": {
  "id": 1,
  "name": "Otthon",
  "address": "AholLakniJo"
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVm"
                },
                "example": {
  "id": 1,
  "name": "Otthon",
  "address": "AholLakniJo"
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVm"
                },
                "example": {
  "id": 1,
  "name": "Otthon",
  "address": "AholLakniJo"
}
              }
            }
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sites"
        ],
        "summary": "Updates an entity",
        "description": "Updates an entity with Id of \"id\" to entity \"dto\"",
        "operationId": "updateSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful update"
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sites"
        ],
        "summary": "Deletes an entity",
        "description": "Deletes an entity with Id of \"id\"",
        "operationId": "deleteSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        }
      }
    },
    "/api/Sites/ExportSites": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Exports an entity list sorted and filtered",
        "description": "Exports the entity list with the specified filters applied in a csv file",
        "operationId": "exportSites",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "partnerId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: csv file of entities",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/SystemParameters/Keys": {
      "get": {
        "tags": [
          "SystemParameters"
        ],
        "summary": "Returns a list of all the system parameter keys",
        "operationId": "getSystemParameterKeys",
        "responses": {
          "200": {
            "description": "Successful query: string list of system parameter keys",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
  "YBZQKDCZRP",
  "SESROIDJWE",
  "EYXIEOZMNZ",
  "ROWQQJSIRG",
  "IZCEABEZSP",
  "MMUSFSFXCT",
  "QQJKCCCKAG",
  "HOEOZNGIAN",
  "ZJVPCADPQA",
  "GEEVPEHMJE",
  "TNMELRQLID",
  "GHZQRFUJVD",
  "YQJEXVICPT",
  "OMKIJGGBJK",
  "KKDKVCQHXC",
  "GDJACJKQOW",
  "ELERXDMHWP",
  "PAHFNNGQCG",
  "YQQJFBVLXU",
  "CMJUAYDSCY"
]
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
  "YBZQKDCZRP",
  "SESROIDJWE",
  "EYXIEOZMNZ",
  "ROWQQJSIRG",
  "IZCEABEZSP",
  "MMUSFSFXCT",
  "QQJKCCCKAG",
  "HOEOZNGIAN",
  "ZJVPCADPQA",
  "GEEVPEHMJE",
  "TNMELRQLID",
  "GHZQRFUJVD",
  "YQJEXVICPT",
  "OMKIJGGBJK",
  "KKDKVCQHXC",
  "GDJACJKQOW",
  "ELERXDMHWP",
  "PAHFNNGQCG",
  "YQQJFBVLXU",
  "CMJUAYDSCY"
]
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
  "YBZQKDCZRP",
  "SESROIDJWE",
  "EYXIEOZMNZ",
  "ROWQQJSIRG",
  "IZCEABEZSP",
  "MMUSFSFXCT",
  "QQJKCCCKAG",
  "HOEOZNGIAN",
  "ZJVPCADPQA",
  "GEEVPEHMJE",
  "TNMELRQLID",
  "GHZQRFUJVD",
  "YQJEXVICPT",
  "OMKIJGGBJK",
  "KKDKVCQHXC",
  "GDJACJKQOW",
  "ELERXDMHWP",
  "PAHFNNGQCG",
  "YQQJFBVLXU",
  "CMJUAYDSCY"
]
              }
            }
          }
        }
      }
    },
    "/api/SystemParameters/{id}": {
      "get": {
        "tags": [
          "SystemParameters"
        ],
        "summary": "Gets a SystemParameterVm entity by Id",
        "description": "Returns the SystemParameterVm with the specified Id upon success",
        "operationId": "getSystemParameter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the SystemParameterVm",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the SystemParameterVm",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: SystemParameterVm entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemParameterVm"
                },
                "example": {
  "key": "system.settings.partner-campaign-limit",
  "value": "50"
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemParameterVm"
                },
                "example": {
  "key": "system.settings.partner-campaign-limit",
  "value": "50"
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemParameterVm"
                },
                "example": {
  "key": "system.settings.partner-campaign-limit",
  "value": "50"
}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/SystemParameters": {
      "get": {
        "tags": [
          "SystemParameters"
        ],
        "summary": "Gets a SystemParameterVm entity list sorted and filtered",
        "description": "Returns the SystemParameterVm list with the specified filters applied",
        "operationId": "getSystemParameters",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of SystemParameterVm entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemParameterVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "key": "system.settings.partner-campaign-limit",
      "value": "50"
    },
    {
      "key": "system.settings.partner-campaign-limit",
      "value": "100"
    },
    {
      "key": "system.settings.partner-campaign-limit",
      "value": "15"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 5
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemParameterVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "key": "system.settings.partner-campaign-limit",
      "value": "50"
    },
    {
      "key": "system.settings.partner-campaign-limit",
      "value": "100"
    },
    {
      "key": "system.settings.partner-campaign-limit",
      "value": "15"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 5
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemParameterVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "key": "system.settings.partner-campaign-limit",
      "value": "50"
    },
    {
      "key": "system.settings.partner-campaign-limit",
      "value": "100"
    },
    {
      "key": "system.settings.partner-campaign-limit",
      "value": "15"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 3,
  "size": 5
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/SystemParameters/ExportSystemParameters": {
      "get": {
        "tags": [
          "SystemParameters"
        ],
        "summary": "Exports a SystemParameterVm entity list sorted and filtered in a csv file",
        "description": "Exports the SystemParameterVm list with the specified filters applied in a csv file",
        "operationId": "exportSystemParameters",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful export: Csv file of SystemParameterVm entities",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/SystemParameters/{key}": {
      "put": {
        "tags": [
          "SystemParameters"
        ],
        "summary": "Updates a SystemParameter entity",
        "description": "Updates a SystemParameter entity with Key of \"key\"",
        "operationId": "updateSystemParameter",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemParameterDto"
              },
              "example": {
  "value": "configuration"
}
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful update"
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/TagCategories": {
      "post": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Creates a TagCategory entity",
        "description": "Returns the id of the TagCategory upon success",
        "operationId": "createTagCategory",
        "requestBody": {
          "description": "Details of the TagCategory",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Gets a TagCategory entity list sorted and filtered",
        "description": "Returns the TagCategory list with the specified filters applied",
        "operationId": "getTagCategories",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of TagCategory entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Household"
    },
    {
      "id": 12,
      "name": "Entertainment"
    },
    {
      "id": 123,
      "name": "Electronics"
    },
    {
      "id": 1234,
      "name": "Kids"
    },
    {
      "id": 12345,
      "name": "Adults"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 17
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Household"
    },
    {
      "id": 12,
      "name": "Entertainment"
    },
    {
      "id": 123,
      "name": "Electronics"
    },
    {
      "id": 1234,
      "name": "Kids"
    },
    {
      "id": 12345,
      "name": "Adults"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 17
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "name": "Household"
    },
    {
      "id": 12,
      "name": "Entertainment"
    },
    {
      "id": 123,
      "name": "Electronics"
    },
    {
      "id": 1234,
      "name": "Kids"
    },
    {
      "id": 12345,
      "name": "Adults"
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 17
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/TagCategories/{id}": {
      "get": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Gets a TagCategory entity by Id",
        "description": "Returns the TagCategory with the specified Id upon success",
        "operationId": "getTagCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the TagCategory",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the TagCategory",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: TagCategory entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVm"
                },
                "example": {
  "id": 1,
  "name": "Household"
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVm"
                },
                "example": {
  "id": 1,
  "name": "Household"
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVm"
                },
                "example": {
  "id": 1,
  "name": "Household"
}
              }
            }
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Updates a TagCategory entity",
        "description": "Updates a TagCategory entity with Id of \"id\" to entity \"category\"",
        "operationId": "updateTagCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCategoryDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful update"
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Deletes a TagCategory entity",
        "description": "Deletes the TagCategory entity with Id of \"id\"",
        "operationId": "deleteTagCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        }
      }
    },
    "/api/TagCategories/ExportTagCategories": {
      "get": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Exports a Category entity list sorted and filtered",
        "description": "Exports the Category list with the specified filters applied in a csv file",
        "operationId": "exportTagCategories",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Csv file of Category entities",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/Tags": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Creates a Tag entity",
        "description": "Returns the id of the Tag upon success",
        "operationId": "createTag",
        "requestBody": {
          "description": "Details of the Tag",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                },
                "example": {
  "id": 42
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Gets a Tag entity list sorted and filtered",
        "description": "Returns the Tag list with the specified filters applied",
        "operationId": "getTags",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "tagCategory",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of Tag entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "value": "Book",
      "tagCategoryId": 12345,
      "isActive": true
    },
    {
      "id": 12,
      "value": "Computer Hardware",
      "tagCategoryId": 1234,
      "isActive": false
    },
    {
      "id": 123,
      "value": "Movies",
      "tagCategoryId": 123,
      "isActive": true
    },
    {
      "id": 1234,
      "value": "Kid toys",
      "tagCategoryId": 12,
      "isActive": false
    },
    {
      "id": 12345,
      "value": "Utensils",
      "tagCategoryId": 1,
      "isActive": true
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 19
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "value": "Book",
      "tagCategoryId": 12345,
      "isActive": true
    },
    {
      "id": 12,
      "value": "Computer Hardware",
      "tagCategoryId": 1234,
      "isActive": false
    },
    {
      "id": 123,
      "value": "Movies",
      "tagCategoryId": 123,
      "isActive": true
    },
    {
      "id": 1234,
      "value": "Kid toys",
      "tagCategoryId": 12,
      "isActive": false
    },
    {
      "id": 12345,
      "value": "Utensils",
      "tagCategoryId": 1,
      "isActive": true
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 19
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagVmPaginatedResponse"
                },
                "example": {
  "result": [
    {
      "id": 1,
      "value": "Book",
      "tagCategoryId": 12345,
      "isActive": true
    },
    {
      "id": 12,
      "value": "Computer Hardware",
      "tagCategoryId": 1234,
      "isActive": false
    },
    {
      "id": 123,
      "value": "Movies",
      "tagCategoryId": 123,
      "isActive": true
    },
    {
      "id": 1234,
      "value": "Kid toys",
      "tagCategoryId": 12,
      "isActive": false
    },
    {
      "id": 12345,
      "value": "Utensils",
      "tagCategoryId": 1,
      "isActive": true
    }
  ],
  "page": 1,
  "from": 1,
  "to": 5,
  "size": 19
}
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Tags/{id}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Gets a Tag entity by Id",
        "description": "Returns the Tag with the specified Id upon success",
        "operationId": "getTag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Tag",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the Tag",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Tag entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagVm"
                },
                "example": {
  "id": 1,
  "value": "Book",
  "tagCategoryId": 1,
  "isActive": true
}
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagVm"
                },
                "example": {
  "id": 1,
  "value": "Book",
  "tagCategoryId": 1,
  "isActive": true
}
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagVm"
                },
                "example": {
  "id": 1,
  "value": "Book",
  "tagCategoryId": 1,
  "isActive": true
}
              }
            }
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Updates a Tag entity",
        "description": "Updates a Tag entity with Id of \"id\" to entity \"category\"",
        "operationId": "updateTag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful update"
          },
          "404": {
            "description": "Entity not found: error.not-found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Deletes a Tag entity",
        "description": "Deletes the Tag entity with Id of \"id\"",
        "operationId": "deleteTag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful deletion"
          }
        }
      }
    },
    "/api/Tags/ExportTags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Exports a Tag entity list sorted and filtered",
        "description": "Exports the Tag list with the specified filters applied in a csv file",
        "operationId": "exportTags",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "tagCategory",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Csv file of Tag entities",
            "content": {
              "application/octet-stream;charset=utf-8": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/UserCoupons/MyCoupons": {
      "get": {
        "tags": [
          "UserCoupons"
        ],
        "summary": "Returns the coupons generated for the user",
        "description": "Returns a coupon list that contains up to 8 coupons for the user for today",
        "operationId": "getMyUserCoupons",
        "responses": {
          "200": {
            "description": "Successful query: list of coupons",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyCouponVm"
                  }
                },
                "example": [
  {
    "id": 1,
    "name": "The Phantom Menace",
    "expireDate": "1999-05-19T00:00:00",
    "description": "Jar-Jar appears",
    "isClaimed": false,
    "smallPictureId": "SmallJarJar.png",
    "bigPictureId": "BigJarJar.png"
  },
  {
    "id": 2,
    "name": "Attack of the clones",
    "expireDate": "2002-05-16T00:00:00",
    "description": "Jar-Jar disappears",
    "isClaimed": true,
    "smallPictureId": "SmallNoJarJar.png",
    "bigPictureId": "BigNoJarJar.png"
  },
  {
    "id": 3,
    "name": "Revenge of the sith",
    "expireDate": "2005-05-19T00:00:00",
    "description": "Jar-Jar reappears",
    "isClaimed": false,
    "smallPictureId": "SmallJarJarAgain.png",
    "bigPictureId": "BigJarJarAgain.png"
  }
]
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyCouponVm"
                  }
                },
                "example": [
  {
    "id": 1,
    "name": "The Phantom Menace",
    "expireDate": "1999-05-19T00:00:00",
    "description": "Jar-Jar appears",
    "isClaimed": false,
    "smallPictureId": "SmallJarJar.png",
    "bigPictureId": "BigJarJar.png"
  },
  {
    "id": 2,
    "name": "Attack of the clones",
    "expireDate": "2002-05-16T00:00:00",
    "description": "Jar-Jar disappears",
    "isClaimed": true,
    "smallPictureId": "SmallNoJarJar.png",
    "bigPictureId": "BigNoJarJar.png"
  },
  {
    "id": 3,
    "name": "Revenge of the sith",
    "expireDate": "2005-05-19T00:00:00",
    "description": "Jar-Jar reappears",
    "isClaimed": false,
    "smallPictureId": "SmallJarJarAgain.png",
    "bigPictureId": "BigJarJarAgain.png"
  }
]
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyCouponVm"
                  }
                },
                "example": [
  {
    "id": 1,
    "name": "The Phantom Menace",
    "expireDate": "1999-05-19T00:00:00",
    "description": "Jar-Jar appears",
    "isClaimed": false,
    "smallPictureId": "SmallJarJar.png",
    "bigPictureId": "BigJarJar.png"
  },
  {
    "id": 2,
    "name": "Attack of the clones",
    "expireDate": "2002-05-16T00:00:00",
    "description": "Jar-Jar disappears",
    "isClaimed": true,
    "smallPictureId": "SmallNoJarJar.png",
    "bigPictureId": "BigNoJarJar.png"
  },
  {
    "id": 3,
    "name": "Revenge of the sith",
    "expireDate": "2005-05-19T00:00:00",
    "description": "Jar-Jar reappears",
    "isClaimed": false,
    "smallPictureId": "SmallJarJarAgain.png",
    "bigPictureId": "BigJarJarAgain.png"
  }
]
              }
            }
          }
        }
      }
    },
    "/api/Wallet/Archive": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Archives all coupon codes",
        "description": "Archives every coupon code in the database",
        "operationId": "archiveWallet",
        "responses": {
          "204": {
            "description": "Successful archiving"
          }
        }
      }
    },
    "/api/Wallet/MyClaimedCoupons": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Returns claimed coupon codes",
        "operationId": "getMyClaimedCoupons",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyClaimedCouponVm"
                  }
                },
                "example": [
  {
    "id": 1,
    "name": "TheDarkSide",
    "expireDate": "1984-09-13T00:00:00",
    "couponCode": "82A1DARK1US9",
    "description": "NotVeryLight",
    "smallPictureId": "AnakinSkywalker.png",
    "bigPictureId": "DarthVader.png"
  },
  {
    "id": 2,
    "name": "TheLightSide",
    "expireDate": "1994-12-22T00:00:00",
    "couponCode": "MD9LIGHT1822",
    "description": "NotVeryDark",
    "smallPictureId": "NotAnakinSkywalker.png",
    "bigPictureId": "LukeSkywalker.png"
  }
]
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyClaimedCouponVm"
                  }
                },
                "example": [
  {
    "id": 1,
    "name": "TheDarkSide",
    "expireDate": "1984-09-13T00:00:00",
    "couponCode": "82A1DARK1US9",
    "description": "NotVeryLight",
    "smallPictureId": "AnakinSkywalker.png",
    "bigPictureId": "DarthVader.png"
  },
  {
    "id": 2,
    "name": "TheLightSide",
    "expireDate": "1994-12-22T00:00:00",
    "couponCode": "MD9LIGHT1822",
    "description": "NotVeryDark",
    "smallPictureId": "NotAnakinSkywalker.png",
    "bigPictureId": "LukeSkywalker.png"
  }
]
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyClaimedCouponVm"
                  }
                },
                "example": [
  {
    "id": 1,
    "name": "TheDarkSide",
    "expireDate": "1984-09-13T00:00:00",
    "couponCode": "82A1DARK1US9",
    "description": "NotVeryLight",
    "smallPictureId": "AnakinSkywalker.png",
    "bigPictureId": "DarthVader.png"
  },
  {
    "id": 2,
    "name": "TheLightSide",
    "expireDate": "1994-12-22T00:00:00",
    "couponCode": "MD9LIGHT1822",
    "description": "NotVeryDark",
    "smallPictureId": "NotAnakinSkywalker.png",
    "bigPictureId": "LukeSkywalker.png"
  }
]
              }
            }
          }
        }
      }
    },
    "/api/Wallet/{userId}/BurnCoupon/{couponCode}": {
      "post": {
        "tags": [
          "Wallet"
        ],
        "summary": "Used to delete a coupon code from user purse",
        "operationId": "burnCoupon",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User id",
              "nullable": true
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "description": "CouponCode to delete",
            "required": true,
            "schema": {
              "type": "string",
              "description": "CouponCode to delete",
              "nullable": true
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful coupon burn"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ServiceInfo": {
        "type": "object",
        "properties": {
          "serviceName": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "string",
            "nullable": true
          },
          "externalServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceInfo"
            },
            "nullable": true
          }
        }
      },
      "RegisterPartnerContactPersonDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RegisterPartnerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "taxNumber": {
            "type": "string",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "nullable": true
          },
          "addressStreet": {
            "type": "string",
            "nullable": true
          },
          "addressStreetNumber": {
            "type": "string",
            "nullable": true
          },
          "mailingAddressStreet": {
            "type": "string",
            "nullable": true
          },
          "mailingAddressStreetNumber": {
            "type": "string",
            "nullable": true
          },
          "contact": {
            "$ref": "#/components/schemas/RegisterPartnerContactPersonDto"
          }
        }
      },
      "RegisterPartnerContactDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "acceptUserAgreements": {
            "type": "boolean"
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "RegisterUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "placeOfBirth": {
            "type": "string",
            "nullable": true
          },
          "mothersMaidenName": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserVm": {
        "type": "object",
        "properties": {
          "jwtToken": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RefreshDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Roles": {
        "enum": [
          "Administrator",
          "CampaignManager",
          "PartnerManager",
          "BusinessPartnerManager",
          "PartnerContactApprover",
          "PartnerContactEditor",
          "User",
          "ServiceAccount",
          "KprServiceAccount",
          "MainPartnerContact",
          "NormalPartnerContact"
        ],
        "type": "string"
      },
      "PartnerContactStateVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/Roles"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "OrderByType": {
        "enum": [
          "Ascending",
          "Descending"
        ],
        "type": "string"
      },
      "PartnerContactVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "partnerName": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "role": {
            "$ref": "#/components/schemas/Roles"
          }
        }
      },
      "PartnerContactVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerContactVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PartnerContactStateDto": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/Roles"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "CashierDto": {
        "type": "object",
        "properties": {
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "cashierId": {
            "type": "string",
            "nullable": true
          },
          "digitalStampId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Int32EntityCreatedVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CashierVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "cashierId": {
            "type": "string",
            "nullable": true
          },
          "digitalStampId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CashierVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CashierVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CategoryVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CategoryVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CouponState": {
        "enum": [
          "Created",
          "Accepted",
          "Waiting",
          "Closed",
          "Archived"
        ],
        "type": "string"
      },
      "CouponCommentVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "couponId": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "stateFrom": {
            "$ref": "#/components/schemas/CouponState"
          },
          "stateTo": {
            "$ref": "#/components/schemas/CouponState"
          }
        }
      },
      "CouponCommentDto": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CouponRank": {
        "enum": [
          "Basic",
          "Standard",
          "Super",
          "Premium"
        ],
        "type": "string"
      },
      "CouponType": {
        "enum": [
          "Discount",
          "Prize",
          "Banner"
        ],
        "type": "string"
      },
      "CouponDiscountType": {
        "enum": [
          "FixValue",
          "PercentValue"
        ],
        "type": "string"
      },
      "CouponMode": {
        "enum": [
          "Physical",
          "Online"
        ],
        "type": "string"
      },
      "CouponDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rank": {
            "$ref": "#/components/schemas/CouponRank"
          },
          "type": {
            "$ref": "#/components/schemas/CouponType"
          },
          "state": {
            "$ref": "#/components/schemas/CouponState"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "expireDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "discountType": {
            "$ref": "#/components/schemas/CouponDiscountType"
          },
          "couponCount": {
            "type": "integer",
            "format": "int32"
          },
          "minimumShoppingValue": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "discountValue": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "mode": {
            "$ref": "#/components/schemas/CouponMode"
          },
          "predefinedCodesFileId": {
            "type": "string",
            "nullable": true
          },
          "partnerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "smallPictureId": {
            "type": "string",
            "nullable": true
          },
          "bigPictureId": {
            "type": "string",
            "nullable": true
          },
          "onlineClaimLink": {
            "type": "string",
            "nullable": true
          },
          "productDetails": {
            "type": "string",
            "nullable": true
          },
          "drawDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "prizeRulesFileId": {
            "type": "string",
            "nullable": true
          },
          "itemPrice": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "previousYearAverageBasketValue": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "awardedCampaign": {
            "type": "boolean"
          },
          "prizeValue": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "CouponVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rank": {
            "$ref": "#/components/schemas/CouponRank"
          },
          "type": {
            "$ref": "#/components/schemas/CouponType"
          },
          "state": {
            "$ref": "#/components/schemas/CouponState"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "expireDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "couponCount": {
            "type": "integer",
            "format": "int32"
          },
          "minimumShoppingValue": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "discountType": {
            "$ref": "#/components/schemas/CouponDiscountType"
          },
          "discountValue": {
            "type": "number",
            "format": "float",
            "nullable": true
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "partnerId": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          },
          "isPartnerActive": {
            "type": "boolean"
          },
          "bigPictureId": {
            "type": "string",
            "nullable": true
          },
          "smallPictureId": {
            "type": "string",
            "nullable": true
          },
          "mode": {
            "$ref": "#/components/schemas/CouponMode"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approvedBy": {
            "type": "string",
            "nullable": true
          },
          "approvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "drawDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "preferredPosition": {
            "type": "integer",
            "format": "int32"
          },
          "predefinedCodesFileId": {
            "type": "string",
            "nullable": true
          },
          "onlineClaimLink": {
            "type": "string",
            "nullable": true
          },
          "productDetails": {
            "type": "string",
            "nullable": true
          },
          "prizeRulesFileId": {
            "type": "string",
            "nullable": true
          },
          "itemPrice": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "previousYearAverageBasketValue": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "awardedCampaign": {
            "type": "boolean"
          },
          "prizeValue": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponCommentVm"
            },
            "nullable": true
          },
          "partnerName": {
            "type": "string",
            "nullable": true
          },
          "showCount": {
            "type": "integer",
            "format": "int32"
          },
          "clickCount": {
            "type": "integer",
            "format": "int32"
          },
          "claimCount": {
            "type": "integer",
            "format": "int32"
          },
          "discardCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CouponVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ChangeCouponStateDto": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/CouponState"
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CouponCodeVm": {
        "type": "object",
        "properties": {
          "couponCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ActivateCouponDto": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "ClaimedCouponCodeVm": {
        "type": "object",
        "properties": {
          "couponCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "FileVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "exstension": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SendEmailsDto": {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "emailTemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "emailSubject": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SendEmailToSegmentDto": {
        "type": "object",
        "properties": {
          "segmentId": {
            "type": "integer",
            "format": "int32"
          },
          "emailTemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "emailSubject": {
            "type": "string",
            "nullable": true
          },
          "isNotification": {
            "type": "boolean"
          }
        }
      },
      "InvitePartnerContactDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "partnerId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmailTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EmailTemplateHistoryVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmailTemplateVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailTemplateHistoryVm"
            },
            "nullable": true
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmailTemplateVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailTemplateVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmailTemplateVersionDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "NotificationType": {
        "enum": [
          "CampaignMovedToWaitingState",
          "PartnerContactRegistered",
          "CouponCountDepleted",
          "CouponClosed"
        ],
        "type": "string"
      },
      "UserNotificationDetailDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserNotificationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "isSeen": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "parent": {
            "$ref": "#/components/schemas/UserNotificationDetailDto"
          },
          "actual": {
            "$ref": "#/components/schemas/UserNotificationDetailDto"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "NotificationsPaginatedResponse": {
        "type": "object",
        "properties": {
          "unseenCount": {
            "type": "integer",
            "format": "int32"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserNotificationDto"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AddNotificationTestCommand": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "parentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "actualId": {
            "type": "integer",
            "format": "int32"
          },
          "isSeen": {
            "type": "boolean"
          }
        }
      },
      "PartnerContactSelfDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PartnerContactDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/Roles"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "PartnerState": {
        "enum": [
          "Inactive",
          "Active",
          "Deleted"
        ],
        "type": "string"
      },
      "PartnerRegistrationState": {
        "enum": [
          "Pending",
          "Rejected",
          "Approved"
        ],
        "type": "string"
      },
      "PartnerVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "mailingAddress": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "taxNumber": {
            "type": "string",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "nullable": true
          },
          "registrationAllowed": {
            "type": "string",
            "nullable": true
          },
          "registerCode": {
            "type": "string",
            "nullable": true
          },
          "majorPartner": {
            "type": "boolean"
          },
          "partnerState": {
            "$ref": "#/components/schemas/PartnerState"
          },
          "partnerRegistrationState": {
            "$ref": "#/components/schemas/PartnerRegistrationState"
          }
        }
      },
      "PartnerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "mailingAddress": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "taxNumber": {
            "type": "string",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "nullable": true
          },
          "registrationAllowed": {
            "type": "string",
            "nullable": true
          },
          "majorPartner": {
            "type": "boolean"
          },
          "partnerState": {
            "$ref": "#/components/schemas/PartnerState"
          }
        }
      },
      "PartnerVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ActivatePartnerDto": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/PartnerState"
          }
        }
      },
      "ChangePartnerRegistrationStateDto": {
        "type": "object",
        "properties": {
          "registrationState": {
            "$ref": "#/components/schemas/PartnerRegistrationState"
          }
        }
      },
      "ScoringEventType": {
        "enum": [
          "Login"
        ],
        "type": "string"
      },
      "ScoreEventVm": {
        "type": "object",
        "properties": {
          "evenType": {
            "$ref": "#/components/schemas/ScoringEventType"
          },
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "score": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ScoringEventPaginatedResponse": {
        "type": "object",
        "properties": {
          "score": {
            "type": "integer",
            "format": "int32"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoreEventVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SegmentVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "segmentSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SegmentVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmailSegmentDto": {
        "type": "object",
        "properties": {
          "segmentName": {
            "type": "string",
            "nullable": true
          },
          "emailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "CreateSegmentationCommand": {
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailSegmentDto"
            },
            "nullable": true
          },
          "oneTimeUse": {
            "type": "boolean"
          }
        }
      },
      "SiteDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "partnerId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SiteVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SiteVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SystemParameterVm": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SystemParameterVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SystemParameterVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SystemParameterDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TagCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TagCategoryVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TagCategoryVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagCategoryVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TagDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          },
          "tagCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "TagVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "tagCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "TagVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MyCouponVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isClaimed": {
            "type": "boolean"
          },
          "smallPictureId": {
            "type": "string",
            "nullable": true
          },
          "bigPictureId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MyClaimedCouponVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "couponCode": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "smallPictureId": {
            "type": "string",
            "nullable": true
          },
          "bigPictureId": {
            "type": "string",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}