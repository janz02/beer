/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ScoringEventPaginatedResponse,
    ScoringEventPaginatedResponseFromJSON,
    ScoringEventPaginatedResponseToJSON,
} from '../models';

export interface ExportMyScoringRequest {
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
    xRTDTransactionGuid?: string;
}

export interface GetMyScoringRequest {
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
    xRTDTransactionGuid?: string;
}

/**
 * no description
 */
export class ScoringApi extends runtime.BaseAPI {

    /**
     * Exports the scoreEvent list with the specified filters applied in a csv file
     * Exports a scoreEvent entity list sorted and filtered
     */
    async exportMyScoringRaw(requestParameters: ExportMyScoringRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Scoring/ExportMyScores`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Exports the scoreEvent list with the specified filters applied in a csv file
     * Exports a scoreEvent entity list sorted and filtered
     */
    async exportMyScoring(requestParameters: ExportMyScoringRequest): Promise<Blob> {
        const response = await this.exportMyScoringRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the scoreEvent list with the specified filters applied
     * Gets a scoreEvent entity list sorted and filtered
     */
    async getMyScoringRaw(requestParameters: GetMyScoringRequest): Promise<runtime.ApiResponse<ScoringEventPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Scoring`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScoringEventPaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns the scoreEvent list with the specified filters applied
     * Gets a scoreEvent entity list sorted and filtered
     */
    async getMyScoring(requestParameters: GetMyScoringRequest): Promise<ScoringEventPaginatedResponse> {
        const response = await this.getMyScoringRaw(requestParameters);
        return await response.value();
    }

}
