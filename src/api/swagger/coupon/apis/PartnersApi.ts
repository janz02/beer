/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ActivatePartnerDto,
    ActivatePartnerDtoFromJSON,
    ActivatePartnerDtoToJSON,
    ChangePartnerRegistrationStateDto,
    ChangePartnerRegistrationStateDtoFromJSON,
    ChangePartnerRegistrationStateDtoToJSON,
    Int32EntityCreatedVm,
    Int32EntityCreatedVmFromJSON,
    Int32EntityCreatedVmToJSON,
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
    PartnerDto,
    PartnerDtoFromJSON,
    PartnerDtoToJSON,
    PartnerRegistrationState,
    PartnerRegistrationStateFromJSON,
    PartnerRegistrationStateToJSON,
    PartnerState,
    PartnerStateFromJSON,
    PartnerStateToJSON,
    PartnerVm,
    PartnerVmFromJSON,
    PartnerVmToJSON,
    PartnerVmPaginatedResponse,
    PartnerVmPaginatedResponseFromJSON,
    PartnerVmPaginatedResponseToJSON,
} from '../models';

export interface ActivatePartnerRequest {
    id: number;
    activatePartnerDto?: ActivatePartnerDto;
}

export interface ChangeRegStatePartnerRequest {
    id: number;
    changePartnerRegistrationStateDto?: ChangePartnerRegistrationStateDto;
}

export interface CreatePartnerRequest {
    partnerDto?: PartnerDto;
}

export interface DeletePartnerRequest {
    id: number;
}

export interface ExportPartnersRequest {
    name?: string | null;
    majorPartner?: boolean | null;
    partnerState?: PartnerState;
    address?: string | null;
    partnerRegistrationState?: PartnerRegistrationState;
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
}

export interface GetPartnerRequest {
    id: number;
}

export interface GetPartnersRequest {
    name?: string | null;
    majorPartner?: boolean | null;
    partnerState?: PartnerState;
    address?: string | null;
    partnerRegistrationState?: PartnerRegistrationState;
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
}

export interface UpdateMyPartnerRequest {
    partnerDto?: PartnerDto;
}

export interface UpdatePartnerRequest {
    id: number;
    partnerDto?: PartnerDto;
}

/**
 * no description
 */
export class PartnersApi extends runtime.BaseAPI {

    /**
     * Activates or inactivates a partner with Id of \"id\"
     * Activates or inactivates a partner
     */
    async activatePartnerRaw(requestParameters: ActivatePartnerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling activatePartner.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/Activate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ActivatePartnerDtoToJSON(requestParameters.activatePartnerDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Activates or inactivates a partner with Id of \"id\"
     * Activates or inactivates a partner
     */
    async activatePartner(requestParameters: ActivatePartnerRequest): Promise<void> {
        await this.activatePartnerRaw(requestParameters);
    }

    /**
     * Changes the registration state of a partner with an Id of \"id\"
     * Changes the registration state of a partner
     */
    async changeRegStatePartnerRaw(requestParameters: ChangeRegStatePartnerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling changeRegStatePartner.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/ChangeRegState/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePartnerRegistrationStateDtoToJSON(requestParameters.changePartnerRegistrationStateDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Changes the registration state of a partner with an Id of \"id\"
     * Changes the registration state of a partner
     */
    async changeRegStatePartner(requestParameters: ChangeRegStatePartnerRequest): Promise<void> {
        await this.changeRegStatePartnerRaw(requestParameters);
    }

    /**
     * Returns the id of the entity upon success
     * Creates an entity
     */
    async createPartnerRaw(requestParameters: CreatePartnerRequest): Promise<runtime.ApiResponse<Int32EntityCreatedVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerDtoToJSON(requestParameters.partnerDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32EntityCreatedVmFromJSON(jsonValue));
    }

    /**
     * Returns the id of the entity upon success
     * Creates an entity
     */
    async createPartner(requestParameters: CreatePartnerRequest): Promise<Int32EntityCreatedVm> {
        const response = await this.createPartnerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an entity with Id of \"id\"
     * Deletes an entity
     */
    async deletePartnerRaw(requestParameters: DeletePartnerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePartner.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an entity with Id of \"id\"
     * Deletes an entity
     */
    async deletePartner(requestParameters: DeletePartnerRequest): Promise<void> {
        await this.deletePartnerRaw(requestParameters);
    }

    /**
     * Exports the entity list with the specified filters applied in a csv file
     * Exports an entity list sorted and filtered
     */
    async exportPartnersRaw(requestParameters: ExportPartnersRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.majorPartner !== undefined) {
            queryParameters['majorPartner'] = requestParameters.majorPartner;
        }

        if (requestParameters.partnerState !== undefined) {
            queryParameters['partnerState'] = requestParameters.partnerState;
        }

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.partnerRegistrationState !== undefined) {
            queryParameters['partnerRegistrationState'] = requestParameters.partnerRegistrationState;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/Export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Exports the entity list with the specified filters applied in a csv file
     * Exports an entity list sorted and filtered
     */
    async exportPartners(requestParameters: ExportPartnersRequest): Promise<Blob> {
        const response = await this.exportPartnersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the details about the logged in contact\'s partner
     */
    async getMyPartnerRaw(): Promise<runtime.ApiResponse<PartnerVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/My`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerVmFromJSON(jsonValue));
    }

    /**
     * Returns the details about the logged in contact\'s partner
     */
    async getMyPartner(): Promise<PartnerVm> {
        const response = await this.getMyPartnerRaw();
        return await response.value();
    }

    /**
     * Returns the entity with the specified Id upon success
     * Gets an entity by Id
     */
    async getPartnerRaw(requestParameters: GetPartnerRequest): Promise<runtime.ApiResponse<PartnerVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPartner.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerVmFromJSON(jsonValue));
    }

    /**
     * Returns the entity with the specified Id upon success
     * Gets an entity by Id
     */
    async getPartner(requestParameters: GetPartnerRequest): Promise<PartnerVm> {
        const response = await this.getPartnerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the entity list with the specified filters applied
     * Gets an entity list sorted and filtered
     */
    async getPartnersRaw(requestParameters: GetPartnersRequest): Promise<runtime.ApiResponse<PartnerVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.majorPartner !== undefined) {
            queryParameters['majorPartner'] = requestParameters.majorPartner;
        }

        if (requestParameters.partnerState !== undefined) {
            queryParameters['partnerState'] = requestParameters.partnerState;
        }

        if (requestParameters.address !== undefined) {
            queryParameters['address'] = requestParameters.address;
        }

        if (requestParameters.partnerRegistrationState !== undefined) {
            queryParameters['partnerRegistrationState'] = requestParameters.partnerRegistrationState;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns the entity list with the specified filters applied
     * Gets an entity list sorted and filtered
     */
    async getPartners(requestParameters: GetPartnersRequest): Promise<PartnerVmPaginatedResponse> {
        const response = await this.getPartnersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates the logged in contact\'s partner
     */
    async updateMyPartnerRaw(requestParameters: UpdateMyPartnerRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/My`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerDtoToJSON(requestParameters.partnerDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the logged in contact\'s partner
     */
    async updateMyPartner(requestParameters: UpdateMyPartnerRequest): Promise<void> {
        await this.updateMyPartnerRaw(requestParameters);
    }

    /**
     * Updates an entity with Id of \"id\" to entity \"dto\"
     * Updates an entity
     */
    async updatePartnerRaw(requestParameters: UpdatePartnerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePartner.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerDtoToJSON(requestParameters.partnerDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an entity with Id of \"id\" to entity \"dto\"
     * Updates an entity
     */
    async updatePartner(requestParameters: UpdatePartnerRequest): Promise<void> {
        await this.updatePartnerRaw(requestParameters);
    }

}
