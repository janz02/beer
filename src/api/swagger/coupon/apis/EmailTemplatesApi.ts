/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmailTemplateDto,
    EmailTemplateDtoFromJSON,
    EmailTemplateDtoToJSON,
    EmailTemplateVersionDto,
    EmailTemplateVersionDtoFromJSON,
    EmailTemplateVersionDtoToJSON,
    EmailTemplateVm,
    EmailTemplateVmFromJSON,
    EmailTemplateVmToJSON,
    EmailTemplateVmPaginatedResponse,
    EmailTemplateVmPaginatedResponseFromJSON,
    EmailTemplateVmPaginatedResponseToJSON,
    Int32EntityCreatedVm,
    Int32EntityCreatedVmFromJSON,
    Int32EntityCreatedVmToJSON,
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface CreateEmailTemplateRequest {
    xRTDTransactionGuid?: string;
    emailTemplateDto?: EmailTemplateDto;
}

export interface DeleteEmailTemplateRequest {
    id: number;
    xRTDTransactionGuid?: string;
}

export interface ExportEmailTemplatesRequest {
    name?: string | null;
    modifiedAt?: Date | null;
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
    xRTDTransactionGuid?: string;
}

export interface GetEmailTemplateRequest {
    id: number;
    xRTDTransactionGuid?: string;
}

export interface GetEmailTemplatesRequest {
    name?: string | null;
    modifiedAt?: Date | null;
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
    xRTDTransactionGuid?: string;
}

export interface RestoreEmailTemplateVersionRequest {
    id: number;
    version: number;
    xRTDTransactionGuid?: string;
}

export interface SaveEmailTemplateVersionRequest {
    id: number;
    xRTDTransactionGuid?: string;
    emailTemplateVersionDto?: EmailTemplateVersionDto;
}

export interface UpdateEmailTemplateRequest {
    id: number;
    xRTDTransactionGuid?: string;
    emailTemplateDto?: EmailTemplateDto;
}

/**
 * no description
 */
export class EmailTemplatesApi extends runtime.BaseAPI {

    /**
     * Returns the id of the new template
     * Creates an email template
     */
    async createEmailTemplateRaw(requestParameters: CreateEmailTemplateRequest): Promise<runtime.ApiResponse<Int32EntityCreatedVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/EmailTemplates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailTemplateDtoToJSON(requestParameters.emailTemplateDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32EntityCreatedVmFromJSON(jsonValue));
    }

    /**
     * Returns the id of the new template
     * Creates an email template
     */
    async createEmailTemplate(requestParameters: CreateEmailTemplateRequest): Promise<Int32EntityCreatedVm> {
        const response = await this.createEmailTemplateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an email template
     */
    async deleteEmailTemplateRaw(requestParameters: DeleteEmailTemplateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEmailTemplate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/EmailTemplates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an email template
     */
    async deleteEmailTemplate(requestParameters: DeleteEmailTemplateRequest): Promise<void> {
        await this.deleteEmailTemplateRaw(requestParameters);
    }

    /**
     * Exports the entity list with the specified filters applied in a csv file
     * Exports an entity list sorted and filtered
     */
    async exportEmailTemplatesRaw(requestParameters: ExportEmailTemplatesRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.modifiedAt !== undefined) {
            queryParameters['modifiedAt'] = (requestParameters.modifiedAt as any).toISOString();
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/EmailTemplates/Export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Exports the entity list with the specified filters applied in a csv file
     * Exports an entity list sorted and filtered
     */
    async exportEmailTemplates(requestParameters: ExportEmailTemplatesRequest): Promise<Blob> {
        const response = await this.exportEmailTemplatesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets an email template
     */
    async getEmailTemplateRaw(requestParameters: GetEmailTemplateRequest): Promise<runtime.ApiResponse<EmailTemplateVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEmailTemplate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/EmailTemplates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateVmFromJSON(jsonValue));
    }

    /**
     * Gets an email template
     */
    async getEmailTemplate(requestParameters: GetEmailTemplateRequest): Promise<EmailTemplateVm> {
        const response = await this.getEmailTemplateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets all the available Email Templates
     */
    async getEmailTemplatesRaw(requestParameters: GetEmailTemplatesRequest): Promise<runtime.ApiResponse<EmailTemplateVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.modifiedAt !== undefined) {
            queryParameters['modifiedAt'] = (requestParameters.modifiedAt as any).toISOString();
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/EmailTemplates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailTemplateVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Gets all the available Email Templates
     */
    async getEmailTemplates(requestParameters: GetEmailTemplatesRequest): Promise<EmailTemplateVmPaginatedResponse> {
        const response = await this.getEmailTemplatesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the id of the new template
     * Creates an email template
     */
    async restoreEmailTemplateVersionRaw(requestParameters: RestoreEmailTemplateVersionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling restoreEmailTemplateVersion.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling restoreEmailTemplateVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/EmailTemplates/{id}/Version/{version}/Restore`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the id of the new template
     * Creates an email template
     */
    async restoreEmailTemplateVersion(requestParameters: RestoreEmailTemplateVersionRequest): Promise<void> {
        await this.restoreEmailTemplateVersionRaw(requestParameters);
    }

    /**
     * Returns the id of the new template
     * Creates an email template
     */
    async saveEmailTemplateVersionRaw(requestParameters: SaveEmailTemplateVersionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling saveEmailTemplateVersion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/EmailTemplates/{id}/Version`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailTemplateVersionDtoToJSON(requestParameters.emailTemplateVersionDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns the id of the new template
     * Creates an email template
     */
    async saveEmailTemplateVersion(requestParameters: SaveEmailTemplateVersionRequest): Promise<void> {
        await this.saveEmailTemplateVersionRaw(requestParameters);
    }

    /**
     * NotAvailable
     */
    async updateEmailTemplateRaw(requestParameters: UpdateEmailTemplateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEmailTemplate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/EmailTemplates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailTemplateDtoToJSON(requestParameters.emailTemplateDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * NotAvailable
     */
    async updateEmailTemplate(requestParameters: UpdateEmailTemplateRequest): Promise<void> {
        await this.updateEmailTemplateRaw(requestParameters);
    }

}
