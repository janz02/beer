/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SystemParameterDto,
    SystemParameterDtoFromJSON,
    SystemParameterDtoToJSON,
    SystemParameterVm,
    SystemParameterVmFromJSON,
    SystemParameterVmToJSON,
    SystemParameterVmPaginatedResponse,
    SystemParameterVmPaginatedResponseFromJSON,
    SystemParameterVmPaginatedResponseToJSON,
} from '../models';

export interface ExportSystemParametersRequest {
    key?: string | null;
    value?: string | null;
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
    xRTDTransactionGuid?: string;
}

export interface GetSystemParameterRequest {
    id: string | null;
    xRTDTransactionGuid?: string;
}

export interface GetSystemParameterKeysRequest {
    xRTDTransactionGuid?: string;
}

export interface GetSystemParametersRequest {
    key?: string | null;
    value?: string | null;
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
    xRTDTransactionGuid?: string;
}

export interface UpdateSystemParameterRequest {
    key: string | null;
    xRTDTransactionGuid?: string;
    systemParameterDto?: SystemParameterDto;
}

/**
 * no description
 */
export class SystemParametersApi extends runtime.BaseAPI {

    /**
     * Exports the SystemParameterVm list with the specified filters applied in a csv file
     * Exports a SystemParameterVm entity list sorted and filtered in a csv file
     */
    async exportSystemParametersRaw(requestParameters: ExportSystemParametersRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.value !== undefined) {
            queryParameters['value'] = requestParameters.value;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SystemParameters/ExportSystemParameters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Exports the SystemParameterVm list with the specified filters applied in a csv file
     * Exports a SystemParameterVm entity list sorted and filtered in a csv file
     */
    async exportSystemParameters(requestParameters: ExportSystemParametersRequest): Promise<Blob> {
        const response = await this.exportSystemParametersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the SystemParameterVm with the specified Id upon success
     * Gets a SystemParameterVm entity by Id
     */
    async getSystemParameterRaw(requestParameters: GetSystemParameterRequest): Promise<runtime.ApiResponse<SystemParameterVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSystemParameter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SystemParameters/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemParameterVmFromJSON(jsonValue));
    }

    /**
     * Returns the SystemParameterVm with the specified Id upon success
     * Gets a SystemParameterVm entity by Id
     */
    async getSystemParameter(requestParameters: GetSystemParameterRequest): Promise<SystemParameterVm> {
        const response = await this.getSystemParameterRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of all the system parameter keys
     */
    async getSystemParameterKeysRaw(requestParameters: GetSystemParameterKeysRequest): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SystemParameters/Keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a list of all the system parameter keys
     */
    async getSystemParameterKeys(requestParameters: GetSystemParameterKeysRequest): Promise<Array<string>> {
        const response = await this.getSystemParameterKeysRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the SystemParameterVm list with the specified filters applied
     * Gets a SystemParameterVm entity list sorted and filtered
     */
    async getSystemParametersRaw(requestParameters: GetSystemParametersRequest): Promise<runtime.ApiResponse<SystemParameterVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.value !== undefined) {
            queryParameters['value'] = requestParameters.value;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SystemParameters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemParameterVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns the SystemParameterVm list with the specified filters applied
     * Gets a SystemParameterVm entity list sorted and filtered
     */
    async getSystemParameters(requestParameters: GetSystemParametersRequest): Promise<SystemParameterVmPaginatedResponse> {
        const response = await this.getSystemParametersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a SystemParameter entity with Key of \"key\"
     * Updates a SystemParameter entity
     */
    async updateSystemParameterRaw(requestParameters: UpdateSystemParameterRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling updateSystemParameter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SystemParameters/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SystemParameterDtoToJSON(requestParameters.systemParameterDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a SystemParameter entity with Key of \"key\"
     * Updates a SystemParameter entity
     */
    async updateSystemParameter(requestParameters: UpdateSystemParameterRequest): Promise<void> {
        await this.updateSystemParameterRaw(requestParameters);
    }

}
