/* tslint:disable */
/* eslint-disable */
/**
 * Optima CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MicrosoftAspNetCoreMvcProblemDetails,
    MicrosoftAspNetCoreMvcProblemDetailsFromJSON,
    MicrosoftAspNetCoreMvcProblemDetailsToJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsTreeNodeVm,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsTreeNodeVmFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsTreeNodeVmToJSON,
} from '../models';

export interface GetFileStructureRequest {
    withoutFile?: boolean;
}

export interface UploadFromSharePointRequest {
    body?: string;
}

/**
 * no description
 */
export class SharePointApi extends runtime.BaseAPI {

    /**
     * Returns a folder structure of a dedicated - configured SharePoint folder. The   mechanism can returns to file leaf and last folder leaf, depending upon the  withoutFile.
     */
    async getFileStructureRaw(requestParameters: GetFileStructureRequest): Promise<runtime.ApiResponse<Array<OptimaCampaignEditorApplicationCommonMessagesViewModelsTreeNodeVm>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.withoutFile !== undefined) {
            queryParameters['withoutFile'] = requestParameters.withoutFile;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SharePoint/GetFileStructure`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OptimaCampaignEditorApplicationCommonMessagesViewModelsTreeNodeVmFromJSON));
    }

    /**
     * Returns a folder structure of a dedicated - configured SharePoint folder. The   mechanism can returns to file leaf and last folder leaf, depending upon the  withoutFile.
     */
    async getFileStructure(requestParameters: GetFileStructureRequest): Promise<Array<OptimaCampaignEditorApplicationCommonMessagesViewModelsTreeNodeVm>> {
        const response = await this.getFileStructureRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates segmentation via Optima.CampaignEditor.Controllers.SegmentationsController used mechanism to  process CSV and create segment. The file which selected on SharePoint got to be   a CSV.
     */
    async uploadFromSharePointRaw(requestParameters: UploadFromSharePointRequest): Promise<runtime.ApiResponse<number>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/SharePoint/UploadFileFromSharePoint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates segmentation via Optima.CampaignEditor.Controllers.SegmentationsController used mechanism to  process CSV and create segment. The file which selected on SharePoint got to be   a CSV.
     */
    async uploadFromSharePoint(requestParameters: UploadFromSharePointRequest): Promise<number> {
        const response = await this.uploadFromSharePointRaw(requestParameters);
        return await response.value();
    }

}
