/* tslint:disable */
/* eslint-disable */
/**
 * Optima CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByType,
    OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByTypeFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByTypeToJSON,
    OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsJobRoleVm,
    OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsJobRoleVmFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsJobRoleVmToJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsJobRoleVm,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsJobRoleVmFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsJobRoleVmToJSON,
    OptimaCampaignEditorApplicationJobRolesCommandsCreateJobRoleCreateJobRoleCommand,
    OptimaCampaignEditorApplicationJobRolesCommandsCreateJobRoleCreateJobRoleCommandFromJSON,
    OptimaCampaignEditorApplicationJobRolesCommandsCreateJobRoleCreateJobRoleCommandToJSON,
    OptimaCampaignEditorApplicationJobRolesCommandsUpdateJobRoleUpdateJobRoleCommand,
    OptimaCampaignEditorApplicationJobRolesCommandsUpdateJobRoleUpdateJobRoleCommandFromJSON,
    OptimaCampaignEditorApplicationJobRolesCommandsUpdateJobRoleUpdateJobRoleCommandToJSON,
} from '../models';

export interface CreateJobRoleRequest {
    optimaCampaignEditorApplicationJobRolesCommandsCreateJobRoleCreateJobRoleCommand?: OptimaCampaignEditorApplicationJobRolesCommandsCreateJobRoleCreateJobRoleCommand;
}

export interface DeleteJobRoleRequest {
    id: number;
}

export interface ExportJobRolesRequest {
    name?: string;
    createdDate?: Date;
    createdBy?: string;
    profileCount?: number;
    groupCount?: number;
    companyCount?: number;
    skip?: number;
    take?: number;
    orderBy?: string;
    ids?: Array<number>;
    page?: number;
    pageSize?: number;
    orderByType?: OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByType;
}

export interface GetJobRoleRequest {
    id: number;
}

export interface GetJobRolesRequest {
    name?: string;
    createdDate?: Date;
    createdBy?: string;
    profileCount?: number;
    groupCount?: number;
    companyCount?: number;
    skip?: number;
    take?: number;
    orderBy?: string;
    ids?: Array<number>;
    page?: number;
    pageSize?: number;
    orderByType?: OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByType;
}

export interface UpdateJobRoleRequest {
    id: number;
    optimaCampaignEditorApplicationJobRolesCommandsUpdateJobRoleUpdateJobRoleCommand?: OptimaCampaignEditorApplicationJobRolesCommandsUpdateJobRoleUpdateJobRoleCommand;
}

/**
 * no description
 */
export class JobRolesApi extends runtime.BaseAPI {

    /**
     * Returns the id of the Job Role upon success
     * Creates a Job Role entity
     */
    async createJobRoleRaw(requestParameters: CreateJobRoleRequest): Promise<runtime.ApiResponse<number>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/JobRoles/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OptimaCampaignEditorApplicationJobRolesCommandsCreateJobRoleCreateJobRoleCommandToJSON(requestParameters.optimaCampaignEditorApplicationJobRolesCommandsCreateJobRoleCreateJobRoleCommand),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Returns the id of the Job Role upon success
     * Creates a Job Role entity
     */
    async createJobRole(requestParameters: CreateJobRoleRequest): Promise<number> {
        const response = await this.createJobRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes the Job Role  entity with Id of \"id\"
     * Deletes a Job Role entity
     */
    async deleteJobRoleRaw(requestParameters: DeleteJobRoleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteJobRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/JobRoles/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the Job Role  entity with Id of \"id\"
     * Deletes a Job Role entity
     */
    async deleteJobRole(requestParameters: DeleteJobRoleRequest): Promise<void> {
        await this.deleteJobRoleRaw(requestParameters);
    }

    /**
     * Exports the Job Role list with the specified filters applied in a csv file
     * Exports a Job Role entity list sorted and filtered in a csv file
     */
    async exportJobRolesRaw(requestParameters: ExportJobRolesRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['Name'] = requestParameters.name;
        }

        if (requestParameters.createdDate !== undefined) {
            queryParameters['CreatedDate'] = (requestParameters.createdDate as any).toISOString();
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['CreatedBy'] = requestParameters.createdBy;
        }

        if (requestParameters.profileCount !== undefined) {
            queryParameters['ProfileCount'] = requestParameters.profileCount;
        }

        if (requestParameters.groupCount !== undefined) {
            queryParameters['GroupCount'] = requestParameters.groupCount;
        }

        if (requestParameters.companyCount !== undefined) {
            queryParameters['CompanyCount'] = requestParameters.companyCount;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['OrderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.ids) {
            queryParameters['Ids'] = requestParameters.ids;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['OrderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/JobRoles/ExportAll/ExportCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Exports the Job Role list with the specified filters applied in a csv file
     * Exports a Job Role entity list sorted and filtered in a csv file
     */
    async exportJobRoles(requestParameters: ExportJobRolesRequest): Promise<Blob> {
        const response = await this.exportJobRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the Job Role with the specified Id upon success
     * Gets a Job Role entity by Id
     */
    async getJobRoleRaw(requestParameters: GetJobRoleRequest): Promise<runtime.ApiResponse<OptimaCampaignEditorApplicationCommonMessagesViewModelsJobRoleVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getJobRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/JobRoles/GetOne/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimaCampaignEditorApplicationCommonMessagesViewModelsJobRoleVmFromJSON(jsonValue));
    }

    /**
     * Returns the Job Role with the specified Id upon success
     * Gets a Job Role entity by Id
     */
    async getJobRole(requestParameters: GetJobRoleRequest): Promise<OptimaCampaignEditorApplicationCommonMessagesViewModelsJobRoleVm> {
        const response = await this.getJobRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the Job Role list with the specified filters applied
     * Gets a Job Role entity list sorted and filtered
     */
    async getJobRolesRaw(requestParameters: GetJobRolesRequest): Promise<runtime.ApiResponse<OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsJobRoleVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['Name'] = requestParameters.name;
        }

        if (requestParameters.createdDate !== undefined) {
            queryParameters['CreatedDate'] = (requestParameters.createdDate as any).toISOString();
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['CreatedBy'] = requestParameters.createdBy;
        }

        if (requestParameters.profileCount !== undefined) {
            queryParameters['ProfileCount'] = requestParameters.profileCount;
        }

        if (requestParameters.groupCount !== undefined) {
            queryParameters['GroupCount'] = requestParameters.groupCount;
        }

        if (requestParameters.companyCount !== undefined) {
            queryParameters['CompanyCount'] = requestParameters.companyCount;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['OrderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.ids) {
            queryParameters['Ids'] = requestParameters.ids;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['OrderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/JobRoles/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsJobRoleVmFromJSON(jsonValue));
    }

    /**
     * Returns the Job Role list with the specified filters applied
     * Gets a Job Role entity list sorted and filtered
     */
    async getJobRoles(requestParameters: GetJobRolesRequest): Promise<OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsJobRoleVm> {
        const response = await this.getJobRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a Job Role entity with Id of \"id\" to entity \"dto\"
     * Updates a Job Role entity
     */
    async updateJobRoleRaw(requestParameters: UpdateJobRoleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateJobRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/JobRoles/Update/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OptimaCampaignEditorApplicationJobRolesCommandsUpdateJobRoleUpdateJobRoleCommandToJSON(requestParameters.optimaCampaignEditorApplicationJobRolesCommandsUpdateJobRoleUpdateJobRoleCommand),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a Job Role entity with Id of \"id\" to entity \"dto\"
     * Updates a Job Role entity
     */
    async updateJobRole(requestParameters: UpdateJobRoleRequest): Promise<void> {
        await this.updateJobRoleRaw(requestParameters);
    }

}
