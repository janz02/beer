/* tslint:disable */
/* eslint-disable */
/**
 * NKM RTD CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CampaignResultEventModelPaginatedSearchResponse,
    CampaignResultEventModelPaginatedSearchResponseFromJSON,
    CampaignResultEventModelPaginatedSearchResponseToJSON,
    UploadCsvModel,
    UploadCsvModelFromJSON,
    UploadCsvModelToJSON,
} from '../models';

export interface DownloadCsvRequest {
    campaignId?: number;
    segmentationId?: number;
}

export interface GetEventsRequest {
    _queryParameters?: { [key: string]: string; };
}

export interface UploadCsvForCampaignResultRequest {
    uploadCsvModel?: UploadCsvModel;
}

/**
 * no description
 */
export class CampaignResultsApi extends runtime.BaseAPI {

    /**
     * Download a CSV structured file for a campaign with a given segmentation. Provides   infromations which are already processed only.
     */
    async downloadCsvRaw(requestParameters: DownloadCsvRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.campaignId !== undefined) {
            queryParameters['campaignId'] = requestParameters.campaignId;
        }

        if (requestParameters.segmentationId !== undefined) {
            queryParameters['segmentationId'] = requestParameters.segmentationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CampaignResults/DownloadCsv`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download a CSV structured file for a campaign with a given segmentation. Provides   infromations which are already processed only.
     */
    async downloadCsv(requestParameters: DownloadCsvRequest): Promise<void> {
        await this.downloadCsvRaw(requestParameters);
    }

    /**
     * Queries for the result infromations from the database with the given filters and parameters
     */
    async getEventsRaw(requestParameters: GetEventsRequest): Promise<runtime.ApiResponse<CampaignResultEventModelPaginatedSearchResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters._queryParameters !== undefined) {
            queryParameters['queryParameters'] = requestParameters._queryParameters;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CampaignResults/GetEvents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignResultEventModelPaginatedSearchResponseFromJSON(jsonValue));
    }

    /**
     * Queries for the result infromations from the database with the given filters and parameters
     */
    async getEvents(requestParameters: GetEventsRequest): Promise<CampaignResultEventModelPaginatedSearchResponse> {
        const response = await this.getEventsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Upload the results made for a M:NKM.RTD.CampaignEditor.Controllers.CampaignResultsController.DownloadCsv(System.Int32,System.Int32) request to  a given sharepoint folder. The basic sharepoint configured in the system startup.
     */
    async uploadCsvForCampaignResultRaw(requestParameters: UploadCsvForCampaignResultRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CampaignResults/UploadCsv`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadCsvModelToJSON(requestParameters.uploadCsvModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload the results made for a M:NKM.RTD.CampaignEditor.Controllers.CampaignResultsController.DownloadCsv(System.Int32,System.Int32) request to  a given sharepoint folder. The basic sharepoint configured in the system startup.
     */
    async uploadCsvForCampaignResult(requestParameters: UploadCsvForCampaignResultRequest): Promise<void> {
        await this.uploadCsvForCampaignResultRaw(requestParameters);
    }

}
