/* tslint:disable */
/* eslint-disable */
/**
 * Optima CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MicrosoftAspNetCoreMvcProblemDetails,
    MicrosoftAspNetCoreMvcProblemDetailsFromJSON,
    MicrosoftAspNetCoreMvcProblemDetailsToJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsEmailTemplateVm,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsEmailTemplateVmFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsEmailTemplateVmToJSON,
} from '../models';

export interface GetTemplateRequest {
    id: number;
}

export interface GetTemplateByGuidRequest {
    guid: string;
}

/**
 * no description
 */
export class TemplatesApi extends runtime.BaseAPI {

    /**
     * Gets the requested template, identified by id.
     */
    async getTemplateRaw(requestParameters: GetTemplateRequest): Promise<runtime.ApiResponse<OptimaCampaignEditorApplicationCommonMessagesViewModelsEmailTemplateVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTemplate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Templates/GetTemplateById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimaCampaignEditorApplicationCommonMessagesViewModelsEmailTemplateVmFromJSON(jsonValue));
    }

    /**
     * Gets the requested template, identified by id.
     */
    async getTemplate(requestParameters: GetTemplateRequest): Promise<OptimaCampaignEditorApplicationCommonMessagesViewModelsEmailTemplateVm> {
        const response = await this.getTemplateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the requested template, identified by guid.
     */
    async getTemplateByGuidRaw(requestParameters: GetTemplateByGuidRequest): Promise<runtime.ApiResponse<OptimaCampaignEditorApplicationCommonMessagesViewModelsEmailTemplateVm>> {
        if (requestParameters.guid === null || requestParameters.guid === undefined) {
            throw new runtime.RequiredError('guid','Required parameter requestParameters.guid was null or undefined when calling getTemplateByGuid.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Templates/GetTemplateByGuid/{guid}`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters.guid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimaCampaignEditorApplicationCommonMessagesViewModelsEmailTemplateVmFromJSON(jsonValue));
    }

    /**
     * Gets the requested template, identified by guid.
     */
    async getTemplateByGuid(requestParameters: GetTemplateByGuidRequest): Promise<OptimaCampaignEditorApplicationCommonMessagesViewModelsEmailTemplateVm> {
        const response = await this.getTemplateByGuidRaw(requestParameters);
        return await response.value();
    }

}
