/* tslint:disable */
/* eslint-disable */
/**
 * NKM RTD CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChannelVm,
    ChannelVmFromJSON,
    ChannelVmToJSON,
    ChannelVmPaginatedSearchResponse,
    ChannelVmPaginatedSearchResponseFromJSON,
    ChannelVmPaginatedSearchResponseToJSON,
} from '../models';

export interface GetChannelRequest {
    id: number;
}

export interface GetChannelsRequest {
    skip?: number;
    take?: number;
    orderBy?: string;
    ids?: Array<number>;
    page?: number;
    pageSize?: number;
}

export interface GetManyChannelsRequest {
    ids?: Array<number>;
}

/**
 * no description
 */
export class ChannelsApi extends runtime.BaseAPI {

    /**
     * Gets the requested channel, identified by id.
     */
    async getChannelRaw(requestParameters: GetChannelRequest): Promise<runtime.ApiResponse<ChannelVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChannel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Channels/GetOne/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelVmFromJSON(jsonValue));
    }

    /**
     * Gets the requested channel, identified by id.
     */
    async getChannel(requestParameters: GetChannelRequest): Promise<ChannelVm> {
        const response = await this.getChannelRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the channels for the actual query.
     */
    async getChannelsRaw(requestParameters: GetChannelsRequest): Promise<runtime.ApiResponse<ChannelVmPaginatedSearchResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['OrderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.ids) {
            queryParameters['Ids'] = requestParameters.ids;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Channels/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelVmPaginatedSearchResponseFromJSON(jsonValue));
    }

    /**
     * Returns the channels for the actual query.
     */
    async getChannels(requestParameters: GetChannelsRequest): Promise<ChannelVmPaginatedSearchResponse> {
        const response = await this.getChannelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the channels identified by the ids.
     */
    async getManyChannelsRaw(requestParameters: GetManyChannelsRequest): Promise<runtime.ApiResponse<Array<ChannelVm>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Channels/GetMany/many`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChannelVmFromJSON));
    }

    /**
     * Returns the channels identified by the ids.
     */
    async getManyChannels(requestParameters: GetManyChannelsRequest): Promise<Array<ChannelVm>> {
        const response = await this.getManyChannelsRaw(requestParameters);
        return await response.value();
    }

}
