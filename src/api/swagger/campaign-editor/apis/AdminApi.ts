/* tslint:disable */
/* eslint-disable */
/**
 * Optima CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OptimaCampaignEditorApplicationModelsAdminInt32EntityCreatedVm,
    OptimaCampaignEditorApplicationModelsAdminInt32EntityCreatedVmFromJSON,
    OptimaCampaignEditorApplicationModelsAdminInt32EntityCreatedVmToJSON,
    OptimaCampaignEditorApplicationModelsAdminProfileDto,
    OptimaCampaignEditorApplicationModelsAdminProfileDtoFromJSON,
    OptimaCampaignEditorApplicationModelsAdminProfileDtoToJSON,
} from '../models';

export interface CreateProfileRequest {
    optimaCampaignEditorApplicationModelsAdminProfileDto?: OptimaCampaignEditorApplicationModelsAdminProfileDto;
}

export interface UpdateProfileRequest {
    id: number;
    optimaCampaignEditorApplicationModelsAdminProfileDto?: OptimaCampaignEditorApplicationModelsAdminProfileDto;
}

/**
 * no description
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Returns the id of the Profile upon success
     * Creates a Profile entity
     */
    async createProfileRaw(requestParameters: CreateProfileRequest): Promise<runtime.ApiResponse<OptimaCampaignEditorApplicationModelsAdminInt32EntityCreatedVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Admin/Profile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OptimaCampaignEditorApplicationModelsAdminProfileDtoToJSON(requestParameters.optimaCampaignEditorApplicationModelsAdminProfileDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimaCampaignEditorApplicationModelsAdminInt32EntityCreatedVmFromJSON(jsonValue));
    }

    /**
     * Returns the id of the Profile upon success
     * Creates a Profile entity
     */
    async createProfile(requestParameters: CreateProfileRequest): Promise<OptimaCampaignEditorApplicationModelsAdminInt32EntityCreatedVm> {
        const response = await this.createProfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a Profile entity with Id of \"id\" to entity \"company\"
     * Updates a Profile entity
     */
    async updateProfileRaw(requestParameters: UpdateProfileRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Admin/Profile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OptimaCampaignEditorApplicationModelsAdminProfileDtoToJSON(requestParameters.optimaCampaignEditorApplicationModelsAdminProfileDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a Profile entity with Id of \"id\" to entity \"company\"
     * Updates a Profile entity
     */
    async updateProfile(requestParameters: UpdateProfileRequest): Promise<void> {
        await this.updateProfileRaw(requestParameters);
    }

}
