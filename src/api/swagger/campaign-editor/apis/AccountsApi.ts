/* tslint:disable */
/* eslint-disable */
/**
 * NKM RTD CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MicrosoftAspNetCoreMvcProblemDetails,
    MicrosoftAspNetCoreMvcProblemDetailsFromJSON,
    MicrosoftAspNetCoreMvcProblemDetailsToJSON,
    NKMRTDCampaignEditorApplicationAccountsCommandsLoginLoginCommand,
    NKMRTDCampaignEditorApplicationAccountsCommandsLoginLoginCommandFromJSON,
    NKMRTDCampaignEditorApplicationAccountsCommandsLoginLoginCommandToJSON,
    NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsAdGroupVm,
    NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsAdGroupVmFromJSON,
    NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsAdGroupVmToJSON,
    NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsFunctionPermissionVm,
    NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsFunctionPermissionVmFromJSON,
    NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsFunctionPermissionVmToJSON,
    NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsUserPermissionVm,
    NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsUserPermissionVmFromJSON,
    NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsUserPermissionVmToJSON,
    NKMRTDCampaignEditorApplicationCommonMessagesViewModelsProfileVm,
    NKMRTDCampaignEditorApplicationCommonMessagesViewModelsProfileVmFromJSON,
    NKMRTDCampaignEditorApplicationCommonMessagesViewModelsProfileVmToJSON,
    NKMRTDCampaignEditorApplicationCommonMessagesViewModelsUserVm,
    NKMRTDCampaignEditorApplicationCommonMessagesViewModelsUserVmFromJSON,
    NKMRTDCampaignEditorApplicationCommonMessagesViewModelsUserVmToJSON,
} from '../models';

export interface GetAdGroupsRequest {
    permissionId?: number;
}

export interface GetFunctionPermissionsRequest {
    permissionId?: number;
}

export interface GetUsersForPermissionRequest {
    permissionId?: number;
}

export interface LoginRequest {
    nKMRTDCampaignEditorApplicationAccountsCommandsLoginLoginCommand?: NKMRTDCampaignEditorApplicationAccountsCommandsLoginLoginCommand;
}

/**
 * no description
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * Query for groups in the system which were synchronized from the domain Active Directory
     */
    async getAdGroupsRaw(requestParameters: GetAdGroupsRequest): Promise<runtime.ApiResponse<NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsAdGroupVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.permissionId !== undefined) {
            queryParameters['permissionId'] = requestParameters.permissionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accounts/GetAllAdGroup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsAdGroupVmFromJSON(jsonValue));
    }

    /**
     * Query for groups in the system which were synchronized from the domain Active Directory
     */
    async getAdGroups(requestParameters: GetAdGroupsRequest): Promise<NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsAdGroupVm> {
        const response = await this.getAdGroupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Query for all function permission for the given permissionId.
     */
    async getFunctionPermissionsRaw(requestParameters: GetFunctionPermissionsRequest): Promise<runtime.ApiResponse<NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsFunctionPermissionVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.permissionId !== undefined) {
            queryParameters['permissionId'] = requestParameters.permissionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accounts/GetAllFunctionPermission`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsFunctionPermissionVmFromJSON(jsonValue));
    }

    /**
     * Query for all function permission for the given permissionId.
     */
    async getFunctionPermissions(requestParameters: GetFunctionPermissionsRequest): Promise<NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsFunctionPermissionVm> {
        const response = await this.getFunctionPermissionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Has only temporary implementation on service since there is no exact functional  requirement for the profile!
     * Returns basic information about the current user. The profile will be returned.
     */
    async getMyAccountRaw(): Promise<runtime.ApiResponse<NKMRTDCampaignEditorApplicationCommonMessagesViewModelsProfileVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accounts/Me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NKMRTDCampaignEditorApplicationCommonMessagesViewModelsProfileVmFromJSON(jsonValue));
    }

    /**
     * Has only temporary implementation on service since there is no exact functional  requirement for the profile!
     * Returns basic information about the current user. The profile will be returned.
     */
    async getMyAccount(): Promise<NKMRTDCampaignEditorApplicationCommonMessagesViewModelsProfileVm> {
        const response = await this.getMyAccountRaw();
        return await response.value();
    }

    /**
     * Returns all the users stored in the system.
     */
    async getUserAccountsRaw(): Promise<runtime.ApiResponse<Array<NKMRTDCampaignEditorApplicationCommonMessagesViewModelsUserVm>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accounts/GetUsers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NKMRTDCampaignEditorApplicationCommonMessagesViewModelsUserVmFromJSON));
    }

    /**
     * Returns all the users stored in the system.
     */
    async getUserAccounts(): Promise<Array<NKMRTDCampaignEditorApplicationCommonMessagesViewModelsUserVm>> {
        const response = await this.getUserAccountsRaw();
        return await response.value();
    }

    /**
     * Query for all directly referenced users for the given permissionId.
     */
    async getUsersForPermissionRaw(requestParameters: GetUsersForPermissionRequest): Promise<runtime.ApiResponse<NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsUserPermissionVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.permissionId !== undefined) {
            queryParameters['permissionId'] = requestParameters.permissionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accounts/GetUsersForPermission`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsUserPermissionVmFromJSON(jsonValue));
    }

    /**
     * Query for all directly referenced users for the given permissionId.
     */
    async getUsersForPermission(requestParameters: GetUsersForPermissionRequest): Promise<NKMRTDCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfNKMRTDCampaignEditorApplicationCommonMessagesViewModelsUserPermissionVm> {
        const response = await this.getUsersForPermissionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gives Microsoft.AspNetCore.Mvc.UnauthorizedResult in case user was not found and in case  any error occurs handles as Microsoft.AspNetCore.Mvc.BadRequestResult.
     * Tries to authenticate with the given information against the configured Active  Directory.
     */
    async loginRaw(requestParameters: LoginRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accounts/Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NKMRTDCampaignEditorApplicationAccountsCommandsLoginLoginCommandToJSON(requestParameters.nKMRTDCampaignEditorApplicationAccountsCommandsLoginLoginCommand),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gives Microsoft.AspNetCore.Mvc.UnauthorizedResult in case user was not found and in case  any error occurs handles as Microsoft.AspNetCore.Mvc.BadRequestResult.
     * Tries to authenticate with the given information against the configured Active  Directory.
     */
    async login(requestParameters: LoginRequest): Promise<string> {
        const response = await this.loginRaw(requestParameters);
        return await response.value();
    }

    /**
     * Removes the refresh token, effectively logging the user out.
     */
    async logoutRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accounts/Logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes the refresh token, effectively logging the user out.
     */
    async logout(): Promise<void> {
        await this.logoutRaw();
    }

    /**
     * Gives Microsoft.AspNetCore.Mvc.UnauthorizedResult in case user was not found and in case  any error occurs handles as Microsoft.AspNetCore.Mvc.BadRequestResult.
     * Returns refresh token for the current user, for long term session.
     */
    async refreshTokenRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Accounts/RefreshToken`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Gives Microsoft.AspNetCore.Mvc.UnauthorizedResult in case user was not found and in case  any error occurs handles as Microsoft.AspNetCore.Mvc.BadRequestResult.
     * Returns refresh token for the current user, for long term session.
     */
    async refreshToken(): Promise<string> {
        const response = await this.refreshTokenRaw();
        return await response.value();
    }

}
