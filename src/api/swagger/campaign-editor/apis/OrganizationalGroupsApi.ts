/* tslint:disable */
/* eslint-disable */
/**
 * Optima CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MicrosoftAspNetCoreMvcProblemDetails,
    MicrosoftAspNetCoreMvcProblemDetailsFromJSON,
    MicrosoftAspNetCoreMvcProblemDetailsToJSON,
    OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByType,
    OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByTypeFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByTypeToJSON,
    OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVm,
    OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVmFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVmToJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVm,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVmFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVmToJSON,
    OptimaCampaignEditorApplicationOrganizationalGroupsCommandsCreateOrganizationalGroupCreateOrganizationalGroupCommand,
    OptimaCampaignEditorApplicationOrganizationalGroupsCommandsCreateOrganizationalGroupCreateOrganizationalGroupCommandFromJSON,
    OptimaCampaignEditorApplicationOrganizationalGroupsCommandsCreateOrganizationalGroupCreateOrganizationalGroupCommandToJSON,
    OptimaCampaignEditorApplicationOrganizationalGroupsCommandsUpdateOrganizationalGroupUpdateOrganizationalGroupCommand,
    OptimaCampaignEditorApplicationOrganizationalGroupsCommandsUpdateOrganizationalGroupUpdateOrganizationalGroupCommandFromJSON,
    OptimaCampaignEditorApplicationOrganizationalGroupsCommandsUpdateOrganizationalGroupUpdateOrganizationalGroupCommandToJSON,
} from '../models';

export interface CreateOrganizationalGroupRequest {
    optimaCampaignEditorApplicationOrganizationalGroupsCommandsCreateOrganizationalGroupCreateOrganizationalGroupCommand?: OptimaCampaignEditorApplicationOrganizationalGroupsCommandsCreateOrganizationalGroupCreateOrganizationalGroupCommand;
}

export interface DeleteOrganizationalGroupRequest {
    id: number;
}

export interface GetManyOrganizationalGroupsRequest {
    ids?: Array<number>;
}

export interface GetOrganizationalGroupRequest {
    id: number;
}

export interface GetOrganizationalGroupsRequest {
    name?: string;
    skip?: number;
    take?: number;
    orderBy?: string;
    ids?: Array<number>;
    page?: number;
    pageSize?: number;
    orderByType?: OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByType;
}

export interface UpdateOrganizationalGroupRequest {
    id: number;
    optimaCampaignEditorApplicationOrganizationalGroupsCommandsUpdateOrganizationalGroupUpdateOrganizationalGroupCommand?: OptimaCampaignEditorApplicationOrganizationalGroupsCommandsUpdateOrganizationalGroupUpdateOrganizationalGroupCommand;
}

/**
 * no description
 */
export class OrganizationalGroupsApi extends runtime.BaseAPI {

    /**
     * Creates the dedicates organizational group. The creation will results in an identification,  assigned to the current instance.
     */
    async createOrganizationalGroupRaw(requestParameters: CreateOrganizationalGroupRequest): Promise<runtime.ApiResponse<number>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/OrganizationalGroups/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OptimaCampaignEditorApplicationOrganizationalGroupsCommandsCreateOrganizationalGroupCreateOrganizationalGroupCommandToJSON(requestParameters.optimaCampaignEditorApplicationOrganizationalGroupsCommandsCreateOrganizationalGroupCreateOrganizationalGroupCommand),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates the dedicates organizational group. The creation will results in an identification,  assigned to the current instance.
     */
    async createOrganizationalGroup(requestParameters: CreateOrganizationalGroupRequest): Promise<number> {
        const response = await this.createOrganizationalGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g.: Campaign assigned to the organizational group, result is   Microsoft.AspNetCore.Mvc.ForbidResult.
     * Delete the item signed with the id.
     */
    async deleteOrganizationalGroupRaw(requestParameters: DeleteOrganizationalGroupRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganizationalGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/OrganizationalGroups/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g.: Campaign assigned to the organizational group, result is   Microsoft.AspNetCore.Mvc.ForbidResult.
     * Delete the item signed with the id.
     */
    async deleteOrganizationalGroup(requestParameters: DeleteOrganizationalGroupRequest): Promise<void> {
        await this.deleteOrganizationalGroupRaw(requestParameters);
    }

    /**
     * Returns the organizational groups identified by the ids.
     */
    async getManyOrganizationalGroupsRaw(requestParameters: GetManyOrganizationalGroupsRequest): Promise<runtime.ApiResponse<Array<OptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVm>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/OrganizationalGroups/GetMany/many`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVmFromJSON));
    }

    /**
     * Returns the organizational groups identified by the ids.
     */
    async getManyOrganizationalGroups(requestParameters: GetManyOrganizationalGroupsRequest): Promise<Array<OptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVm>> {
        const response = await this.getManyOrganizationalGroupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the requested organizational group, identified by id.
     */
    async getOrganizationalGroupRaw(requestParameters: GetOrganizationalGroupRequest): Promise<runtime.ApiResponse<OptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationalGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/OrganizationalGroups/GetOne/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVmFromJSON(jsonValue));
    }

    /**
     * Gets the requested organizational group, identified by id.
     */
    async getOrganizationalGroup(requestParameters: GetOrganizationalGroupRequest): Promise<OptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVm> {
        const response = await this.getOrganizationalGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the organizational groups for the actual query.
     */
    async getOrganizationalGroupsRaw(requestParameters: GetOrganizationalGroupsRequest): Promise<runtime.ApiResponse<OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['Name'] = requestParameters.name;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['OrderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.ids) {
            queryParameters['Ids'] = requestParameters.ids;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['OrderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/OrganizationalGroups/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVmFromJSON(jsonValue));
    }

    /**
     * Returns the organizational groups for the actual query.
     */
    async getOrganizationalGroups(requestParameters: GetOrganizationalGroupsRequest): Promise<OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsOrganizationalGroupVm> {
        const response = await this.getOrganizationalGroupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason the result is Optima.CampaignEditor.Application.Common.Messages.Responses.ErrorContract.
     * Update the current instance with the fulfilled model
     */
    async updateOrganizationalGroupRaw(requestParameters: UpdateOrganizationalGroupRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrganizationalGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/OrganizationalGroups/Update/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OptimaCampaignEditorApplicationOrganizationalGroupsCommandsUpdateOrganizationalGroupUpdateOrganizationalGroupCommandToJSON(requestParameters.optimaCampaignEditorApplicationOrganizationalGroupsCommandsUpdateOrganizationalGroupUpdateOrganizationalGroupCommand),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason the result is Optima.CampaignEditor.Application.Common.Messages.Responses.ErrorContract.
     * Update the current instance with the fulfilled model
     */
    async updateOrganizationalGroup(requestParameters: UpdateOrganizationalGroupRequest): Promise<void> {
        await this.updateOrganizationalGroupRaw(requestParameters);
    }

}
