/* tslint:disable */
/* eslint-disable */
/**
 * Optima CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MicrosoftAspNetCoreMvcProblemDetails,
    MicrosoftAspNetCoreMvcProblemDetailsFromJSON,
    MicrosoftAspNetCoreMvcProblemDetailsToJSON,
    OptimaCampaignEditorApplicationCampaignsCommandsCreateCampaignCreateCampaignCommand,
    OptimaCampaignEditorApplicationCampaignsCommandsCreateCampaignCreateCampaignCommandFromJSON,
    OptimaCampaignEditorApplicationCampaignsCommandsCreateCampaignCreateCampaignCommandToJSON,
    OptimaCampaignEditorApplicationCampaignsCommandsSendCampaignToTestGroupsSendCampaignToTestGroupsCommand,
    OptimaCampaignEditorApplicationCampaignsCommandsSendCampaignToTestGroupsSendCampaignToTestGroupsCommandFromJSON,
    OptimaCampaignEditorApplicationCampaignsCommandsSendCampaignToTestGroupsSendCampaignToTestGroupsCommandToJSON,
    OptimaCampaignEditorApplicationCampaignsCommandsUpdateCampaignUpdateCampaignCommand,
    OptimaCampaignEditorApplicationCampaignsCommandsUpdateCampaignUpdateCampaignCommandFromJSON,
    OptimaCampaignEditorApplicationCampaignsCommandsUpdateCampaignUpdateCampaignCommandToJSON,
    OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByType,
    OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByTypeFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByTypeToJSON,
    OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignListItemVm,
    OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignListItemVmFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignListItemVmToJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignDetailVm,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignDetailVmFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignDetailVmToJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignSettingsVm,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignSettingsVmFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignSettingsVmToJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignVm,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignVmFromJSON,
    OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignVmToJSON,
} from '../models';

export interface ApproveCampaignRequest {
    body?: number;
}

export interface CampaignDetailRequest {
    campaignid: number;
}

export interface CreateCampaignRequest {
    optimaCampaignEditorApplicationCampaignsCommandsCreateCampaignCreateCampaignCommand?: OptimaCampaignEditorApplicationCampaignsCommandsCreateCampaignCreateCampaignCommand;
}

export interface DeleteCampaignRequest {
    id: number;
}

export interface DisapproveCampaignRequest {
    body?: number;
}

export interface GetCampaignRequest {
    id: number;
}

export interface GetCampaignsRequest {
    name?: string;
    isTechnical?: boolean;
    technicalName?: string;
    responsible?: string;
    createdBy?: string;
    startDateFrom?: string;
    realStartDateFrom?: string;
    startDateTo?: string;
    realStartDateTo?: string;
    endDateFrom?: string;
    realEndDateFrom?: string;
    endDateTo?: string;
    realEndDateTo?: string;
    createdDateFrom?: string;
    createdDateTo?: string;
    status?: string;
    productId?: string;
    channelId?: string;
    statuses?: Array<string>;
    skip?: number;
    take?: number;
    orderBy?: string;
    ids?: Array<number>;
    page?: number;
    pageSize?: number;
    orderByType?: OptimaCampaignEditorApplicationCommonMessagesEnumsOrderByType;
}

export interface SendCampaignToTestGroupRequest {
    campaignId: string;
    optimaCampaignEditorApplicationCampaignsCommandsSendCampaignToTestGroupsSendCampaignToTestGroupsCommand?: OptimaCampaignEditorApplicationCampaignsCommandsSendCampaignToTestGroupsSendCampaignToTestGroupsCommand;
}

export interface StartCampaignImmediatelyRequest {
    body?: number;
}

export interface StopCampaignImmediatelyRequest {
    body?: number;
}

export interface UpdateCampaignRequest {
    optimaCampaignEditorApplicationCampaignsCommandsUpdateCampaignUpdateCampaignCommand?: OptimaCampaignEditorApplicationCampaignsCommandsUpdateCampaignUpdateCampaignCommand;
}

/**
 * no description
 */
export class CampaignsApi extends runtime.BaseAPI {

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.
     * Dedicated endpoint for status change from Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Tested  to Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Approved for the indicated id identified  campaign.
     */
    async approveCampaignRaw(requestParameters: ApproveCampaignRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Campaigns/Approve`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.
     * Dedicated endpoint for status change from Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Tested  to Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Approved for the indicated id identified  campaign.
     */
    async approveCampaign(requestParameters: ApproveCampaignRequest): Promise<void> {
        await this.approveCampaignRaw(requestParameters);
    }

    /**
     * Query for a dedicates campaign detail identified by campaignid.
     */
    async campaignDetailRaw(requestParameters: CampaignDetailRequest): Promise<runtime.ApiResponse<OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignDetailVm>> {
        if (requestParameters.campaignid === null || requestParameters.campaignid === undefined) {
            throw new runtime.RequiredError('campaignid','Required parameter requestParameters.campaignid was null or undefined when calling campaignDetail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Campaigns/GetCampaignDetail/{campaignid}`.replace(`{${"campaignid"}}`, encodeURIComponent(String(requestParameters.campaignid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignDetailVmFromJSON(jsonValue));
    }

    /**
     * Query for a dedicates campaign detail identified by campaignid.
     */
    async campaignDetail(requestParameters: CampaignDetailRequest): Promise<OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignDetailVm> {
        const response = await this.campaignDetailRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates the dedicates campaign. The creation will results in an identification,  assigned to the current instance.
     */
    async createCampaignRaw(requestParameters: CreateCampaignRequest): Promise<runtime.ApiResponse<number>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Campaigns/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OptimaCampaignEditorApplicationCampaignsCommandsCreateCampaignCreateCampaignCommandToJSON(requestParameters.optimaCampaignEditorApplicationCampaignsCommandsCreateCampaignCreateCampaignCommand),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates the dedicates campaign. The creation will results in an identification,  assigned to the current instance.
     */
    async createCampaign(requestParameters: CreateCampaignRequest): Promise<number> {
        const response = await this.createCampaignRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete the signed campaign with the id.
     */
    async deleteCampaignRaw(requestParameters: DeleteCampaignRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCampaign.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Campaigns/DeleteCampaign/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete the signed campaign with the id.
     */
    async deleteCampaign(requestParameters: DeleteCampaignRequest): Promise<void> {
        await this.deleteCampaignRaw(requestParameters);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.
     * Dedicated endpoint for status change from Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Approved  to Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Content for the indicated id identified  campaign.
     */
    async disapproveCampaignRaw(requestParameters: DisapproveCampaignRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Campaigns/Disapprove`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.
     * Dedicated endpoint for status change from Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Approved  to Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Content for the indicated id identified  campaign.
     */
    async disapproveCampaign(requestParameters: DisapproveCampaignRequest): Promise<void> {
        await this.disapproveCampaignRaw(requestParameters);
    }

    /**
     * Query for a dedicates campaign identified by id.
     */
    async getCampaignRaw(requestParameters: GetCampaignRequest): Promise<runtime.ApiResponse<OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCampaign.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Campaigns/GetCampaignById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignVmFromJSON(jsonValue));
    }

    /**
     * Query for a dedicates campaign identified by id.
     */
    async getCampaign(requestParameters: GetCampaignRequest): Promise<OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignVm> {
        const response = await this.getCampaignRaw(requestParameters);
        return await response.value();
    }

    /**
     * Their is an implicit parameter which query Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Set  only for the user who created the draft state, in order to protect it from other users  and let a sandbox campaign designment for the end user.
     * Returns the campaigns for the actual query.
     */
    async getCampaignsRaw(requestParameters: GetCampaignsRequest): Promise<runtime.ApiResponse<OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignListItemVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['Name'] = requestParameters.name;
        }

        if (requestParameters.isTechnical !== undefined) {
            queryParameters['IsTechnical'] = requestParameters.isTechnical;
        }

        if (requestParameters.technicalName !== undefined) {
            queryParameters['TechnicalName'] = requestParameters.technicalName;
        }

        if (requestParameters.responsible !== undefined) {
            queryParameters['Responsible'] = requestParameters.responsible;
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['CreatedBy'] = requestParameters.createdBy;
        }

        if (requestParameters.startDateFrom !== undefined) {
            queryParameters['StartDateFrom'] = requestParameters.startDateFrom;
        }

        if (requestParameters.realStartDateFrom !== undefined) {
            queryParameters['RealStartDateFrom'] = requestParameters.realStartDateFrom;
        }

        if (requestParameters.startDateTo !== undefined) {
            queryParameters['StartDateTo'] = requestParameters.startDateTo;
        }

        if (requestParameters.realStartDateTo !== undefined) {
            queryParameters['RealStartDateTo'] = requestParameters.realStartDateTo;
        }

        if (requestParameters.endDateFrom !== undefined) {
            queryParameters['EndDateFrom'] = requestParameters.endDateFrom;
        }

        if (requestParameters.realEndDateFrom !== undefined) {
            queryParameters['RealEndDateFrom'] = requestParameters.realEndDateFrom;
        }

        if (requestParameters.endDateTo !== undefined) {
            queryParameters['EndDateTo'] = requestParameters.endDateTo;
        }

        if (requestParameters.realEndDateTo !== undefined) {
            queryParameters['RealEndDateTo'] = requestParameters.realEndDateTo;
        }

        if (requestParameters.createdDateFrom !== undefined) {
            queryParameters['CreatedDateFrom'] = requestParameters.createdDateFrom;
        }

        if (requestParameters.createdDateTo !== undefined) {
            queryParameters['CreatedDateTo'] = requestParameters.createdDateTo;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['Status'] = requestParameters.status;
        }

        if (requestParameters.productId !== undefined) {
            queryParameters['ProductId'] = requestParameters.productId;
        }

        if (requestParameters.channelId !== undefined) {
            queryParameters['ChannelId'] = requestParameters.channelId;
        }

        if (requestParameters.statuses) {
            queryParameters['Statuses'] = requestParameters.statuses;
        }

        if (requestParameters.skip !== undefined) {
            queryParameters['Skip'] = requestParameters.skip;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['Take'] = requestParameters.take;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['OrderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.ids) {
            queryParameters['Ids'] = requestParameters.ids;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['OrderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Campaigns/GetCampaigns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignListItemVmFromJSON(jsonValue));
    }

    /**
     * Their is an implicit parameter which query Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Set  only for the user who created the draft state, in order to protect it from other users  and let a sandbox campaign designment for the end user.
     * Returns the campaigns for the actual query.
     */
    async getCampaigns(requestParameters: GetCampaignsRequest): Promise<OptimaCampaignEditorApplicationCommonMessagesResponsesPaginatedSearchResponseOfOptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignListItemVm> {
        const response = await this.getCampaignsRaw(requestParameters);
        return await response.value();
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.
     * Dedicated endpoint for status change from Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Content  to Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Tested for the indicated command   identified campaign.
     */
    async sendCampaignToTestGroupRaw(requestParameters: SendCampaignToTestGroupRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.campaignId === null || requestParameters.campaignId === undefined) {
            throw new runtime.RequiredError('campaignId','Required parameter requestParameters.campaignId was null or undefined when calling sendCampaignToTestGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Campaigns/SendToTestGroup/{CampaignId}`.replace(`{${"CampaignId"}}`, encodeURIComponent(String(requestParameters.campaignId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OptimaCampaignEditorApplicationCampaignsCommandsSendCampaignToTestGroupsSendCampaignToTestGroupsCommandToJSON(requestParameters.optimaCampaignEditorApplicationCampaignsCommandsSendCampaignToTestGroupsSendCampaignToTestGroupsCommand),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.
     * Dedicated endpoint for status change from Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Content  to Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Tested for the indicated command   identified campaign.
     */
    async sendCampaignToTestGroup(requestParameters: SendCampaignToTestGroupRequest): Promise<void> {
        await this.sendCampaignToTestGroupRaw(requestParameters);
    }

    /**
     * Used in the first screen of campaign creation.
     * Returns selection lists of controls to help the user with the options.
     */
    async settingsRaw(): Promise<runtime.ApiResponse<OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignSettingsVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Campaigns/Settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignSettingsVmFromJSON(jsonValue));
    }

    /**
     * Used in the first screen of campaign creation.
     * Returns selection lists of controls to help the user with the options.
     */
    async settings(): Promise<OptimaCampaignEditorApplicationCommonMessagesViewModelsCampaignSettingsVm> {
        const response = await this.settingsRaw();
        return await response.value();
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.
     * Dedicated endpoint for status change from Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Approved  to Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.StartedManually for the indicated id identified  campaign.
     */
    async startCampaignImmediatelyRaw(requestParameters: StartCampaignImmediatelyRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Campaigns/StartNow`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.
     * Dedicated endpoint for status change from Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Approved  to Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.StartedManually for the indicated id identified  campaign.
     */
    async startCampaignImmediately(requestParameters: StartCampaignImmediatelyRequest): Promise<void> {
        await this.startCampaignImmediatelyRaw(requestParameters);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.
     * Dedicated endpoint for status change from Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Started or   Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.StartedManually to Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Closed   for the indicated id identified campaign.
     */
    async stopCampaignImmediatelyRaw(requestParameters: StopCampaignImmediatelyRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Campaigns/StopNow`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * The endpoint basic results in Microsoft.AspNetCore.Mvc.NoContentResult. If the process mechanism was  failed for some reason - e.g. bas initial status, then the result is Microsoft.AspNetCore.Mvc.ForbidResult.
     * Dedicated endpoint for status change from Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Started or   Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.StartedManually to Optima.CampaignEditor.Application.Common.Enums.CampaignStatus.Closed   for the indicated id identified campaign.
     */
    async stopCampaignImmediately(requestParameters: StopCampaignImmediatelyRequest): Promise<void> {
        await this.stopCampaignImmediatelyRaw(requestParameters);
    }

    /**
     * Update the current instance with the fulfilled model
     */
    async updateCampaignRaw(requestParameters: UpdateCampaignRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Campaigns/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OptimaCampaignEditorApplicationCampaignsCommandsUpdateCampaignUpdateCampaignCommandToJSON(requestParameters.optimaCampaignEditorApplicationCampaignsCommandsUpdateCampaignUpdateCampaignCommand),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the current instance with the fulfilled model
     */
    async updateCampaign(requestParameters: UpdateCampaignRequest): Promise<void> {
        await this.updateCampaignRaw(requestParameters);
    }

}
