/* tslint:disable */
/* eslint-disable */
/**
 * NKM RTD CampaignEditor API
 * <h5>UI handler and the main responsibility carrier of the application, the two step transaction handling owner. The API defines the public interface for the UI and all the user exposed functions are routed here. The actual methods are supports basic segmentation creation and CSV upload functionality. CSV upload is supported via sharepoint. Authentication and JWT token are generated here from <b>Active Directory</b> login. The substraction of public api descriptions are on the API descriptions.</h5>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A model to describe a user that belongs to permissions.
 * @export
 * @interface UserPermissionVm
 */
export interface UserPermissionVm {
    /**
     * Whether the connection between the user and the permission is \'live\' or \'active\'.  True means the user is given the permission. False means they are not.
     * @type {boolean}
     * @memberof UserPermissionVm
     */
    isSelected?: boolean;
    /**
     * The id of the user.
     * @type {number}
     * @memberof UserPermissionVm
     */
    id?: number;
    /**
     * The natural name of the user.
     * @type {string}
     * @memberof UserPermissionVm
     */
    name?: string | null;
    /**
     * The email of the user.
     * @type {string}
     * @memberof UserPermissionVm
     */
    email?: string | null;
}

export function UserPermissionVmFromJSON(json: any): UserPermissionVm {
    return UserPermissionVmFromJSONTyped(json, false);
}

export function UserPermissionVmFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserPermissionVm {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isSelected': !exists(json, 'isSelected') ? undefined : json['isSelected'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email': !exists(json, 'email') ? undefined : json['email'],
    };
}

export function UserPermissionVmToJSON(value?: UserPermissionVm | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'isSelected': value.isSelected,
        'id': value.id,
        'name': value.name,
        'email': value.email,
    };
}


