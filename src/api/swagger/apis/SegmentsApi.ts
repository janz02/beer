/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateSegmentationCommand,
    CreateSegmentationCommandFromJSON,
    CreateSegmentationCommandToJSON,
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
    SegmentVmPaginatedResponse,
    SegmentVmPaginatedResponseFromJSON,
    SegmentVmPaginatedResponseToJSON,
} from '../models';

export interface DeleteSegmentRequest {
    id?: number;
}

export interface GetSegmentsRequest {
    segmentName?: string;
    page?: number;
    pageSize?: number;
    orderBy?: string;
    orderByType?: OrderByType;
}

export interface UpsertSegmentsRequest {
    createSegmentationCommand?: CreateSegmentationCommand;
}

/**
 * no description
 */
export class SegmentsApi extends runtime.BaseAPI {

    /**
     */
    async deleteSegmentRaw(requestParameters: DeleteSegmentRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Segments`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteSegment(requestParameters: DeleteSegmentRequest): Promise<void> {
        await this.deleteSegmentRaw(requestParameters);
    }

    /**
     */
    async getSegmentsRaw(requestParameters: GetSegmentsRequest): Promise<runtime.ApiResponse<SegmentVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.segmentName !== undefined) {
            queryParameters['segmentName'] = requestParameters.segmentName;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Segments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SegmentVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     */
    async getSegments(requestParameters: GetSegmentsRequest): Promise<SegmentVmPaginatedResponse> {
        const response = await this.getSegmentsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async upsertSegmentsRaw(requestParameters: UpsertSegmentsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Segments`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSegmentationCommandToJSON(requestParameters.createSegmentationCommand),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async upsertSegments(requestParameters: UpsertSegmentsRequest): Promise<void> {
        await this.upsertSegmentsRaw(requestParameters);
    }

}
