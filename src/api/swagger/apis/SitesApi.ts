/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Int32EntityCreatedVm,
    Int32EntityCreatedVmFromJSON,
    Int32EntityCreatedVmToJSON,
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
    SiteDto,
    SiteDtoFromJSON,
    SiteDtoToJSON,
    SiteVm,
    SiteVmFromJSON,
    SiteVmToJSON,
    SiteVmPaginatedResponse,
    SiteVmPaginatedResponseFromJSON,
    SiteVmPaginatedResponseToJSON,
} from '../models';

export interface CreateSitesRequest {
    siteDto?: SiteDto;
}

export interface DeleteSitesRequest {
    id: number;
}

export interface GetSitesRequest {
    id: number;
}

export interface ListSitesRequest {
    name?: string;
    address?: string;
    partnerId?: number;
    page?: number;
    pageSize?: number;
    orderBy?: string;
    orderByType?: OrderByType;
}

export interface UpdateSitesRequest {
    id: number;
    siteDto?: SiteDto;
}

/**
 * no description
 */
export class SitesApi extends runtime.BaseAPI {

    /**
     */
    async createSitesRaw(requestParameters: CreateSitesRequest): Promise<runtime.ApiResponse<Int32EntityCreatedVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Sites`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteDtoToJSON(requestParameters.siteDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32EntityCreatedVmFromJSON(jsonValue));
    }

    /**
     */
    async createSites(requestParameters: CreateSitesRequest): Promise<Int32EntityCreatedVm> {
        const response = await this.createSitesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteSitesRaw(requestParameters: DeleteSitesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSites.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Sites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteSites(requestParameters: DeleteSitesRequest): Promise<void> {
        await this.deleteSitesRaw(requestParameters);
    }

    /**
     */
    async getSitesRaw(requestParameters: GetSitesRequest): Promise<runtime.ApiResponse<SiteVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSites.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Sites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteVmFromJSON(jsonValue));
    }

    /**
     */
    async getSites(requestParameters: GetSitesRequest): Promise<SiteVm> {
        const response = await this.getSitesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listSitesRaw(requestParameters: ListSitesRequest): Promise<runtime.ApiResponse<SiteVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['Name'] = requestParameters.name;
        }

        if (requestParameters.address !== undefined) {
            queryParameters['Address'] = requestParameters.address;
        }

        if (requestParameters.partnerId !== undefined) {
            queryParameters['PartnerId'] = requestParameters.partnerId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['OrderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['OrderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Sites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     */
    async listSites(requestParameters: ListSitesRequest): Promise<SiteVmPaginatedResponse> {
        const response = await this.listSitesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateSitesRaw(requestParameters: UpdateSitesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSites.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Sites/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SiteDtoToJSON(requestParameters.siteDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateSites(requestParameters: UpdateSitesRequest): Promise<void> {
        await this.updateSitesRaw(requestParameters);
    }

}
