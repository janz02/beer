/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ActivateCouponDto,
    ActivateCouponDtoFromJSON,
    ActivateCouponDtoToJSON,
    ChangeCouponStateDto,
    ChangeCouponStateDtoFromJSON,
    ChangeCouponStateDtoToJSON,
    CouponCodeVm,
    CouponCodeVmFromJSON,
    CouponCodeVmToJSON,
    CouponDiscountType,
    CouponDiscountTypeFromJSON,
    CouponDiscountTypeToJSON,
    CouponDto,
    CouponDtoFromJSON,
    CouponDtoToJSON,
    CouponMode,
    CouponModeFromJSON,
    CouponModeToJSON,
    CouponRank,
    CouponRankFromJSON,
    CouponRankToJSON,
    CouponState,
    CouponStateFromJSON,
    CouponStateToJSON,
    CouponType,
    CouponTypeFromJSON,
    CouponTypeToJSON,
    CouponVm,
    CouponVmFromJSON,
    CouponVmToJSON,
    DetailedCouponVmPaginatedResponse,
    DetailedCouponVmPaginatedResponseFromJSON,
    DetailedCouponVmPaginatedResponseToJSON,
    Int32EntityCreatedVm,
    Int32EntityCreatedVmFromJSON,
    Int32EntityCreatedVmToJSON,
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
} from '../models';

export interface ActivateCouponRequest {
    id: number;
    activateCouponDto?: ActivateCouponDto;
}

export interface ClaimCouponRequest {
    id: number;
}

export interface CreateCouponRequest {
    couponDto?: CouponDto;
}

export interface DeleteCouponRequest {
    id: number;
}

export interface GetCouponRequest {
    id: number;
}

export interface GetCouponsRequest {
    includeArchived?: boolean;
    onlyWaiting?: boolean;
    name?: string | null;
    rank?: CouponRank;
    type?: CouponType;
    state?: CouponState;
    startDate?: Date | null;
    endDate?: Date | null;
    expireDate?: Date | null;
    couponCount?: number | null;
    minimumShoppingValue?: number | null;
    discountValue?: number | null;
    categoryId?: number | null;
    isActive?: boolean | null;
    partnerName?: string | null;
    mode?: CouponMode;
    discountType?: CouponDiscountType;
    createdBy?: string | null;
    preferredPosition?: number | null;
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
}

export interface UpdateCouponRequest {
    id: number;
    couponDto?: CouponDto;
}

export interface UpdateCouponStatusRequest {
    id: number;
    changeCouponStateDto?: ChangeCouponStateDto;
}

/**
 * no description
 */
export class CouponsApi extends runtime.BaseAPI {

    /**
     * Changes the active status of a coupon to the given value
     * Changes the active status of a coupon
     */
    async activateCouponRaw(requestParameters: ActivateCouponRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling activateCoupon.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Coupons/{id}/Activate`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ActivateCouponDtoToJSON(requestParameters.activateCouponDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Changes the active status of a coupon to the given value
     * Changes the active status of a coupon
     */
    async activateCoupon(requestParameters: ActivateCouponRequest): Promise<void> {
        await this.activateCouponRaw(requestParameters);
    }

    /**
     * Claims a coupon to put it in the used up coupons for the user
     * Claims a coupon for the logged in user
     */
    async claimCouponRaw(requestParameters: ClaimCouponRequest): Promise<runtime.ApiResponse<CouponCodeVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling claimCoupon.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Coupons/{id}/Claim`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponCodeVmFromJSON(jsonValue));
    }

    /**
     * Claims a coupon to put it in the used up coupons for the user
     * Claims a coupon for the logged in user
     */
    async claimCoupon(requestParameters: ClaimCouponRequest): Promise<CouponCodeVm> {
        const response = await this.claimCouponRaw(requestParameters);
        return await response.value();
    }

    /**
     * Closes coupons when its accepted and either end date is passed or every coupon is claimed.
     * Closes coupons
     */
    async closeCouponsRaw(): Promise<runtime.ApiResponse<CouponCodeVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Coupons/CloseCoupons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponCodeVmFromJSON(jsonValue));
    }

    /**
     * Closes coupons when its accepted and either end date is passed or every coupon is claimed.
     * Closes coupons
     */
    async closeCoupons(): Promise<CouponCodeVm> {
        const response = await this.closeCouponsRaw();
        return await response.value();
    }

    /**
     * Returns the id of the new Coupon upon success
     * Creates a Coupon entity
     */
    async createCouponRaw(requestParameters: CreateCouponRequest): Promise<runtime.ApiResponse<Int32EntityCreatedVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Coupons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CouponDtoToJSON(requestParameters.couponDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32EntityCreatedVmFromJSON(jsonValue));
    }

    /**
     * Returns the id of the new Coupon upon success
     * Creates a Coupon entity
     */
    async createCoupon(requestParameters: CreateCouponRequest): Promise<Int32EntityCreatedVm> {
        const response = await this.createCouponRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes the Coupon entity with Id of \"id\"
     * Deletes a Coupon entity
     */
    async deleteCouponRaw(requestParameters: DeleteCouponRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCoupon.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Coupons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the Coupon entity with Id of \"id\"
     * Deletes a Coupon entity
     */
    async deleteCoupon(requestParameters: DeleteCouponRequest): Promise<void> {
        await this.deleteCouponRaw(requestParameters);
    }

    /**
     * Returns the Coupon with the specified Id upon success
     * Gets a Coupon entity by Id
     */
    async getCouponRaw(requestParameters: GetCouponRequest): Promise<runtime.ApiResponse<CouponVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCoupon.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Coupons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponVmFromJSON(jsonValue));
    }

    /**
     * Returns the Coupon with the specified Id upon success
     * Gets a Coupon entity by Id
     */
    async getCoupon(requestParameters: GetCouponRequest): Promise<CouponVm> {
        const response = await this.getCouponRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the Coupon list with the specified filters applied
     * Gets a Coupon entity list sorted and filtered
     */
    async getCouponsRaw(requestParameters: GetCouponsRequest): Promise<runtime.ApiResponse<DetailedCouponVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeArchived !== undefined) {
            queryParameters['includeArchived'] = requestParameters.includeArchived;
        }

        if (requestParameters.onlyWaiting !== undefined) {
            queryParameters['onlyWaiting'] = requestParameters.onlyWaiting;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.rank !== undefined) {
            queryParameters['rank'] = requestParameters.rank;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.expireDate !== undefined) {
            queryParameters['expireDate'] = (requestParameters.expireDate as any).toISOString();
        }

        if (requestParameters.couponCount !== undefined) {
            queryParameters['couponCount'] = requestParameters.couponCount;
        }

        if (requestParameters.minimumShoppingValue !== undefined) {
            queryParameters['minimumShoppingValue'] = requestParameters.minimumShoppingValue;
        }

        if (requestParameters.discountValue !== undefined) {
            queryParameters['discountValue'] = requestParameters.discountValue;
        }

        if (requestParameters.categoryId !== undefined) {
            queryParameters['categoryId'] = requestParameters.categoryId;
        }

        if (requestParameters.isActive !== undefined) {
            queryParameters['isActive'] = requestParameters.isActive;
        }

        if (requestParameters.partnerName !== undefined) {
            queryParameters['partnerName'] = requestParameters.partnerName;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.discountType !== undefined) {
            queryParameters['discountType'] = requestParameters.discountType;
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }

        if (requestParameters.preferredPosition !== undefined) {
            queryParameters['preferredPosition'] = requestParameters.preferredPosition;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Coupons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DetailedCouponVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns the Coupon list with the specified filters applied
     * Gets a Coupon entity list sorted and filtered
     */
    async getCoupons(requestParameters: GetCouponsRequest): Promise<DetailedCouponVmPaginatedResponse> {
        const response = await this.getCouponsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a Coupon entity with Id of \"id\" to entity \"item\"
     * Updates a Coupon entity
     */
    async updateCouponRaw(requestParameters: UpdateCouponRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCoupon.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Coupons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CouponDtoToJSON(requestParameters.couponDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a Coupon entity with Id of \"id\" to entity \"item\"
     * Updates a Coupon entity
     */
    async updateCoupon(requestParameters: UpdateCouponRequest): Promise<void> {
        await this.updateCouponRaw(requestParameters);
    }

    /**
     * Updates a Coupon entity status only with Id of \"id\" to entity \"changeCouponStateDto\"
     * Updates a Coupon entity status only
     */
    async updateCouponStatusRaw(requestParameters: UpdateCouponStatusRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCouponStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Coupons/{id}/Status`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCouponStateDtoToJSON(requestParameters.changeCouponStateDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a Coupon entity status only with Id of \"id\" to entity \"changeCouponStateDto\"
     * Updates a Coupon entity status only
     */
    async updateCouponStatus(requestParameters: UpdateCouponStatusRequest): Promise<void> {
        await this.updateCouponStatusRaw(requestParameters);
    }

}
