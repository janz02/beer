/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Int32EntityCreatedVm,
    Int32EntityCreatedVmFromJSON,
    Int32EntityCreatedVmToJSON,
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
    PartnerDto,
    PartnerDtoFromJSON,
    PartnerDtoToJSON,
    PartnerVm,
    PartnerVmFromJSON,
    PartnerVmToJSON,
    PartnerVmPaginatedResponse,
    PartnerVmPaginatedResponseFromJSON,
    PartnerVmPaginatedResponseToJSON,
} from '../models';

export interface CreatePartnersRequest {
    partnerDto?: PartnerDto;
}

export interface DeletePartnersRequest {
    id: number;
}

export interface GetPartnersRequest {
    id: number;
}

export interface ListPartnersRequest {
    name?: string;
    registrationNumber?: number;
    taxNumber?: number;
    bankAccount?: number;
    contactName?: string;
    contactEmail?: string;
    contactPhone?: number;
    page?: number;
    pageSize?: number;
    orderBy?: string;
    orderByType?: OrderByType;
}

export interface UpdatePartnersRequest {
    id: number;
    partnerDto?: PartnerDto;
}

/**
 * no description
 */
export class PartnersApi extends runtime.BaseAPI {

    /**
     */
    async createPartnersRaw(requestParameters: CreatePartnersRequest): Promise<runtime.ApiResponse<Int32EntityCreatedVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Partners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerDtoToJSON(requestParameters.partnerDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32EntityCreatedVmFromJSON(jsonValue));
    }

    /**
     */
    async createPartners(requestParameters: CreatePartnersRequest): Promise<Int32EntityCreatedVm> {
        const response = await this.createPartnersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deletePartnersRaw(requestParameters: DeletePartnersRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePartners.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePartners(requestParameters: DeletePartnersRequest): Promise<void> {
        await this.deletePartnersRaw(requestParameters);
    }

    /**
     */
    async getPartnersRaw(requestParameters: GetPartnersRequest): Promise<runtime.ApiResponse<PartnerVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPartners.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerVmFromJSON(jsonValue));
    }

    /**
     */
    async getPartners(requestParameters: GetPartnersRequest): Promise<PartnerVm> {
        const response = await this.getPartnersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listPartnersRaw(requestParameters: ListPartnersRequest): Promise<runtime.ApiResponse<PartnerVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['Name'] = requestParameters.name;
        }

        if (requestParameters.registrationNumber !== undefined) {
            queryParameters['RegistrationNumber'] = requestParameters.registrationNumber;
        }

        if (requestParameters.taxNumber !== undefined) {
            queryParameters['TaxNumber'] = requestParameters.taxNumber;
        }

        if (requestParameters.bankAccount !== undefined) {
            queryParameters['BankAccount'] = requestParameters.bankAccount;
        }

        if (requestParameters.contactName !== undefined) {
            queryParameters['ContactName'] = requestParameters.contactName;
        }

        if (requestParameters.contactEmail !== undefined) {
            queryParameters['ContactEmail'] = requestParameters.contactEmail;
        }

        if (requestParameters.contactPhone !== undefined) {
            queryParameters['ContactPhone'] = requestParameters.contactPhone;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['OrderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['OrderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Partners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     */
    async listPartners(requestParameters: ListPartnersRequest): Promise<PartnerVmPaginatedResponse> {
        const response = await this.listPartnersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updatePartnersRaw(requestParameters: UpdatePartnersRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePartners.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerDtoToJSON(requestParameters.partnerDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updatePartners(requestParameters: UpdatePartnersRequest): Promise<void> {
        await this.updatePartnersRaw(requestParameters);
    }

}
