/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Int32EntityCreatedVm,
    Int32EntityCreatedVmFromJSON,
    Int32EntityCreatedVmToJSON,
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
    PartnerDto,
    PartnerDtoFromJSON,
    PartnerDtoToJSON,
    PartnerVm,
    PartnerVmFromJSON,
    PartnerVmToJSON,
    PartnerVmPaginatedResponse,
    PartnerVmPaginatedResponseFromJSON,
    PartnerVmPaginatedResponseToJSON,
} from '../models';

export interface CreatePartnersRequest {
    partnerDto?: PartnerDto;
}

export interface DeletePartnersRequest {
    id: number;
}

export interface GetPartnersRequest {
    id: number;
}

export interface ListPartnersRequest {
    name?: string;
    page?: number;
    pageSize?: number;
    orderBy?: string;
    orderByType?: OrderByType;
}

export interface UpdateMyPartnerRequest {
    partnerDto?: PartnerDto;
}

export interface UpdatePartnersRequest {
    id: number;
    partnerDto?: PartnerDto;
}

/**
 * no description
 */
export class PartnersApi extends runtime.BaseAPI {

    /**
     * Returns the id of the entity upon success
     * Creates an entity
     */
    async createPartnersRaw(requestParameters: CreatePartnersRequest): Promise<runtime.ApiResponse<Int32EntityCreatedVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerDtoToJSON(requestParameters.partnerDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32EntityCreatedVmFromJSON(jsonValue));
    }

    /**
     * Returns the id of the entity upon success
     * Creates an entity
     */
    async createPartners(requestParameters: CreatePartnersRequest): Promise<Int32EntityCreatedVm> {
        const response = await this.createPartnersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an entity with Id of \"id\"
     * Deletes an entity
     */
    async deletePartnersRaw(requestParameters: DeletePartnersRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePartners.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an entity with Id of \"id\"
     * Deletes an entity
     */
    async deletePartners(requestParameters: DeletePartnersRequest): Promise<void> {
        await this.deletePartnersRaw(requestParameters);
    }

    /**
     * Returns the details about the logged in contact\'s partner
     */
    async getMyPartnerRaw(): Promise<runtime.ApiResponse<PartnerVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/GetSelf`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerVmFromJSON(jsonValue));
    }

    /**
     * Returns the details about the logged in contact\'s partner
     */
    async getMyPartner(): Promise<PartnerVm> {
        const response = await this.getMyPartnerRaw();
        return await response.value();
    }

    /**
     * Returns the entity with the specified Id upon success
     * Gets an entity by Id
     */
    async getPartnersRaw(requestParameters: GetPartnersRequest): Promise<runtime.ApiResponse<PartnerVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPartners.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerVmFromJSON(jsonValue));
    }

    /**
     * Returns the entity with the specified Id upon success
     * Gets an entity by Id
     */
    async getPartners(requestParameters: GetPartnersRequest): Promise<PartnerVm> {
        const response = await this.getPartnersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the entity list with the specified filters applied
     * Gets an entity list sorted and filtered
     */
    async listPartnersRaw(requestParameters: ListPartnersRequest): Promise<runtime.ApiResponse<PartnerVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PartnerVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns the entity list with the specified filters applied
     * Gets an entity list sorted and filtered
     */
    async listPartners(requestParameters: ListPartnersRequest): Promise<PartnerVmPaginatedResponse> {
        const response = await this.listPartnersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates the logged in contact\'s partner
     */
    async updateMyPartnerRaw(requestParameters: UpdateMyPartnerRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/UpdateSelf`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerDtoToJSON(requestParameters.partnerDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the logged in contact\'s partner
     */
    async updateMyPartner(requestParameters: UpdateMyPartnerRequest): Promise<void> {
        await this.updateMyPartnerRaw(requestParameters);
    }

    /**
     * Updates an entity with Id of \"id\" to entity \"dto\"
     * Updates an entity
     */
    async updatePartnersRaw(requestParameters: UpdatePartnersRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePartners.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Partners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PartnerDtoToJSON(requestParameters.partnerDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an entity with Id of \"id\" to entity \"dto\"
     * Updates an entity
     */
    async updatePartners(requestParameters: UpdatePartnersRequest): Promise<void> {
        await this.updatePartnersRaw(requestParameters);
    }

}
