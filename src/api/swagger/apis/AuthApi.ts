/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthRegistrationFailedException,
    AuthRegistrationFailedExceptionFromJSON,
    AuthRegistrationFailedExceptionToJSON,
    LoginDto,
    LoginDtoFromJSON,
    LoginDtoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RefreshDto,
    RefreshDtoFromJSON,
    RefreshDtoToJSON,
    RegisterPartnerContactDto,
    RegisterPartnerContactDtoFromJSON,
    RegisterPartnerContactDtoToJSON,
    RegisterUserDto,
    RegisterUserDtoFromJSON,
    RegisterUserDtoToJSON,
    UserVm,
    UserVmFromJSON,
    UserVmToJSON,
} from '../models';

export interface LoginRequest {
    loginDto?: LoginDto;
}

export interface RefreshRequest {
    refreshDto?: RefreshDto;
}

export interface RegisterPartnerContactRequest {
    registerPartnerContactDto?: RegisterPartnerContactDto;
}

export interface RegisterUserRequest {
    registerUserDto?: RegisterUserDto;
}

/**
 * no description
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Returns user info about the logged in user
     * Logs in a user
     */
    async loginRaw(requestParameters: LoginRequest): Promise<runtime.ApiResponse<UserVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Auth/Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters.loginDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserVmFromJSON(jsonValue));
    }

    /**
     * Returns user info about the logged in user
     * Logs in a user
     */
    async login(requestParameters: LoginRequest): Promise<UserVm> {
        const response = await this.loginRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns user info about the logged in user
     * Refreshes the JWT token
     */
    async refreshRaw(requestParameters: RefreshRequest): Promise<runtime.ApiResponse<UserVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Auth/Refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshDtoToJSON(requestParameters.refreshDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserVmFromJSON(jsonValue));
    }

    /**
     * Returns user info about the logged in user
     * Refreshes the JWT token
     */
    async refresh(requestParameters: RefreshRequest): Promise<UserVm> {
        const response = await this.refreshRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns nothing, but registers a contact for the partner
     * Registers a contact for a partner
     */
    async registerPartnerContactRaw(requestParameters: RegisterPartnerContactRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Auth/RegisterPartnerContact`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterPartnerContactDtoToJSON(requestParameters.registerPartnerContactDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns nothing, but registers a contact for the partner
     * Registers a contact for a partner
     */
    async registerPartnerContact(requestParameters: RegisterPartnerContactRequest): Promise<void> {
        await this.registerPartnerContactRaw(requestParameters);
    }

    /**
     * Returns nothing, but registers a user
     * Registers a user
     */
    async registerUserRaw(requestParameters: RegisterUserRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Auth/RegisterUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterUserDtoToJSON(requestParameters.registerUserDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns nothing, but registers a user
     * Registers a user
     */
    async registerUser(requestParameters: RegisterUserRequest): Promise<void> {
        await this.registerUserRaw(requestParameters);
    }

}
