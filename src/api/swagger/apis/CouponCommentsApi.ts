/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CouponCommentDto,
    CouponCommentDtoFromJSON,
    CouponCommentDtoToJSON,
    CouponCommentVm,
    CouponCommentVmFromJSON,
    CouponCommentVmToJSON,
} from '../models';

export interface CreateCouponCommentsRequest {
    couponId: number;
    couponCommentDto?: CouponCommentDto;
}

export interface DeleteCouponCommentsRequest {
    couponId: number;
    commentId: number;
}

export interface GetCouponCommentsRequest {
    couponId: number;
}

/**
 * no description
 */
export class CouponCommentsApi extends runtime.BaseAPI {

    /**
     */
    async createCouponCommentsRaw(requestParameters: CreateCouponCommentsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.couponId === null || requestParameters.couponId === undefined) {
            throw new runtime.RequiredError('couponId','Required parameter requestParameters.couponId was null or undefined when calling createCouponComments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Coupon/{couponId}/Comment`.replace(`{${"couponId"}}`, encodeURIComponent(String(requestParameters.couponId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CouponCommentDtoToJSON(requestParameters.couponCommentDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createCouponComments(requestParameters: CreateCouponCommentsRequest): Promise<void> {
        await this.createCouponCommentsRaw(requestParameters);
    }

    /**
     */
    async deleteCouponCommentsRaw(requestParameters: DeleteCouponCommentsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.couponId === null || requestParameters.couponId === undefined) {
            throw new runtime.RequiredError('couponId','Required parameter requestParameters.couponId was null or undefined when calling deleteCouponComments.');
        }

        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling deleteCouponComments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Coupon/{couponId}/Comment/{commentId}`.replace(`{${"couponId"}}`, encodeURIComponent(String(requestParameters.couponId))).replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteCouponComments(requestParameters: DeleteCouponCommentsRequest): Promise<void> {
        await this.deleteCouponCommentsRaw(requestParameters);
    }

    /**
     */
    async getCouponCommentsRaw(requestParameters: GetCouponCommentsRequest): Promise<runtime.ApiResponse<Array<CouponCommentVm>>> {
        if (requestParameters.couponId === null || requestParameters.couponId === undefined) {
            throw new runtime.RequiredError('couponId','Required parameter requestParameters.couponId was null or undefined when calling getCouponComments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Coupon/{couponId}/Comment`.replace(`{${"couponId"}}`, encodeURIComponent(String(requestParameters.couponId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CouponCommentVmFromJSON));
    }

    /**
     */
    async getCouponComments(requestParameters: GetCouponCommentsRequest): Promise<Array<CouponCommentVm>> {
        const response = await this.getCouponCommentsRaw(requestParameters);
        return await response.value();
    }

}
