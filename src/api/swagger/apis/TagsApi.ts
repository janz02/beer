/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKN Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Int32EntityCreatedVm,
    Int32EntityCreatedVmFromJSON,
    Int32EntityCreatedVmToJSON,
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
    TagDto,
    TagDtoFromJSON,
    TagDtoToJSON,
    TagVm,
    TagVmFromJSON,
    TagVmToJSON,
    TagVmPaginatedResponse,
    TagVmPaginatedResponseFromJSON,
    TagVmPaginatedResponseToJSON,
} from '../models';

export interface CreateTagsRequest {
    tagDto?: TagDto;
}

export interface DeleteTagsRequest {
    id: number;
}

export interface GetTagsRequest {
    id: number;
}

export interface ListTagsRequest {
    value?: string;
    tagCategory?: string;
    isActive?: boolean;
    page?: number;
    pageSize?: number;
    orderBy?: string;
    orderByType?: OrderByType;
}

export interface UpdateTagsRequest {
    id: number;
    tagDto?: TagDto;
}

/**
 * no description
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     */
    async createTagsRaw(requestParameters: CreateTagsRequest): Promise<runtime.ApiResponse<Int32EntityCreatedVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagDtoToJSON(requestParameters.tagDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32EntityCreatedVmFromJSON(jsonValue));
    }

    /**
     */
    async createTags(requestParameters: CreateTagsRequest): Promise<Int32EntityCreatedVm> {
        const response = await this.createTagsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteTagsRaw(requestParameters: DeleteTagsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTags.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTags(requestParameters: DeleteTagsRequest): Promise<void> {
        await this.deleteTagsRaw(requestParameters);
    }

    /**
     */
    async getTagsRaw(requestParameters: GetTagsRequest): Promise<runtime.ApiResponse<TagVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTags.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagVmFromJSON(jsonValue));
    }

    /**
     */
    async getTags(requestParameters: GetTagsRequest): Promise<TagVm> {
        const response = await this.getTagsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listTagsRaw(requestParameters: ListTagsRequest): Promise<runtime.ApiResponse<TagVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.value !== undefined) {
            queryParameters['Value'] = requestParameters.value;
        }

        if (requestParameters.tagCategory !== undefined) {
            queryParameters['TagCategory'] = requestParameters.tagCategory;
        }

        if (requestParameters.isActive !== undefined) {
            queryParameters['IsActive'] = requestParameters.isActive;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['OrderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['OrderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     */
    async listTags(requestParameters: ListTagsRequest): Promise<TagVmPaginatedResponse> {
        const response = await this.listTagsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateTagsRaw(requestParameters: UpdateTagsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTags.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagDtoToJSON(requestParameters.tagDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateTags(requestParameters: UpdateTagsRequest): Promise<void> {
        await this.updateTagsRaw(requestParameters);
    }

}
