/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CouponUserPairDto,
    CouponUserPairDtoFromJSON,
    CouponUserPairDtoToJSON,
    CouponUserPairVm,
    CouponUserPairVmFromJSON,
    CouponUserPairVmToJSON,
    CouponUserPairVmPaginatedResponse,
    CouponUserPairVmPaginatedResponseFromJSON,
    CouponUserPairVmPaginatedResponseToJSON,
    Int32EntityCreatedVm,
    Int32EntityCreatedVmFromJSON,
    Int32EntityCreatedVmToJSON,
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
} from '../models';

export interface CreateCouponUserPairsRequest {
    couponUserPairDto?: CouponUserPairDto;
}

export interface DeleteCouponUserPairsRequest {
    id: number;
}

export interface GetCouponUserPairsRequest {
    id: number;
}

export interface ListCouponUserPairsRequest {
    page?: number;
    pageSize?: number;
    orderBy?: string;
    orderByType?: OrderByType;
}

export interface UpdateCouponUserPairsRequest {
    id: number;
    couponUserPairDto?: CouponUserPairDto;
}

/**
 * no description
 */
export class CouponUserPairsApi extends runtime.BaseAPI {

    /**
     */
    async archiveCouponUserPairsRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CouponUserPairs/Archive`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async archiveCouponUserPairs(): Promise<void> {
        await this.archiveCouponUserPairsRaw();
    }

    /**
     */
    async createCouponUserPairsRaw(requestParameters: CreateCouponUserPairsRequest): Promise<runtime.ApiResponse<Int32EntityCreatedVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CouponUserPairs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CouponUserPairDtoToJSON(requestParameters.couponUserPairDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32EntityCreatedVmFromJSON(jsonValue));
    }

    /**
     */
    async createCouponUserPairs(requestParameters: CreateCouponUserPairsRequest): Promise<Int32EntityCreatedVm> {
        const response = await this.createCouponUserPairsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteCouponUserPairsRaw(requestParameters: DeleteCouponUserPairsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCouponUserPairs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CouponUserPairs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteCouponUserPairs(requestParameters: DeleteCouponUserPairsRequest): Promise<void> {
        await this.deleteCouponUserPairsRaw(requestParameters);
    }

    /**
     */
    async getCouponUserPairsRaw(requestParameters: GetCouponUserPairsRequest): Promise<runtime.ApiResponse<CouponUserPairVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCouponUserPairs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CouponUserPairs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponUserPairVmFromJSON(jsonValue));
    }

    /**
     */
    async getCouponUserPairs(requestParameters: GetCouponUserPairsRequest): Promise<CouponUserPairVm> {
        const response = await this.getCouponUserPairsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listCouponUserPairsRaw(requestParameters: ListCouponUserPairsRequest): Promise<runtime.ApiResponse<CouponUserPairVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CouponUserPairs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponUserPairVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     */
    async listCouponUserPairs(requestParameters: ListCouponUserPairsRequest): Promise<CouponUserPairVmPaginatedResponse> {
        const response = await this.listCouponUserPairsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateCouponUserPairsRaw(requestParameters: UpdateCouponUserPairsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCouponUserPairs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CouponUserPairs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CouponUserPairDtoToJSON(requestParameters.couponUserPairDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateCouponUserPairs(requestParameters: UpdateCouponUserPairsRequest): Promise<void> {
        await this.updateCouponUserPairsRaw(requestParameters);
    }

}
