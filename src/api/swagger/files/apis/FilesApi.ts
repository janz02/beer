/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Files Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AppendDto,
    AppendDtoFromJSON,
    AppendDtoToJSON,
    CreateFileDto,
    CreateFileDtoFromJSON,
    CreateFileDtoToJSON,
    FileAccess,
    FileAccessFromJSON,
    FileAccessToJSON,
    FileVm,
    FileVmFromJSON,
    FileVmToJSON,
    ThumbNailSize,
    ThumbNailSizeFromJSON,
    ThumbNailSizeToJSON,
} from '../models';

export interface AppendFileRequest {
    id: string | null;
    appendDto?: AppendDto;
}

export interface CloseFileRequest {
    id: string | null;
}

export interface CreateFileRequest {
    createFileDto?: CreateFileDto;
}

export interface DeleteFileRequest {
    id: string | null;
}

export interface DownloadFileRequest {
    id: string | null;
}

export interface DownloadThumbnailRequest {
    id?: string | null;
    size?: ThumbNailSize;
}

export interface InfoFileRequest {
    id: string | null;
}

export interface KeepFileRequest {
    id: string | null;
}

export interface UploadFileRequest {
    file?: Blob | null;
    fileAccess?: FileAccess;
}

/**
 * no description
 */
export class FilesApi extends runtime.BaseAPI {

    /**
     * Appends to a file on internal storage(not a new line)
     */
    async appendFileRaw(requestParameters: AppendFileRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling appendFile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Files/{id}/Append`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppendDtoToJSON(requestParameters.appendDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Appends to a file on internal storage(not a new line)
     */
    async appendFile(requestParameters: AppendFileRequest): Promise<void> {
        await this.appendFileRaw(requestParameters);
    }

    /**
     * Closes a file on the internal storage
     */
    async closeFileRaw(requestParameters: CloseFileRequest): Promise<runtime.ApiResponse<FileVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling closeFile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Files/{id}/Close`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileVmFromJSON(jsonValue));
    }

    /**
     * Closes a file on the internal storage
     */
    async closeFile(requestParameters: CloseFileRequest): Promise<FileVm> {
        const response = await this.closeFileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a file on internal storage and leaves it open to append
     */
    async createFileRaw(requestParameters: CreateFileRequest): Promise<runtime.ApiResponse<FileVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Files/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFileDtoToJSON(requestParameters.createFileDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileVmFromJSON(jsonValue));
    }

    /**
     * Creates a file on internal storage and leaves it open to append
     */
    async createFile(requestParameters: CreateFileRequest): Promise<FileVm> {
        const response = await this.createFileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets a file expired
     */
    async deleteFileRaw(requestParameters: DeleteFileRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets a file expired
     */
    async deleteFile(requestParameters: DeleteFileRequest): Promise<void> {
        await this.deleteFileRaw(requestParameters);
    }

    /**
     * Downloads a file from the server
     */
    async downloadFileRaw(requestParameters: DownloadFileRequest): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling downloadFile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads a file from the server
     */
    async downloadFile(requestParameters: DownloadFileRequest): Promise<Blob> {
        const response = await this.downloadFileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets the thumbnail of a file
     */
    async downloadThumbnailRaw(requestParameters: DownloadThumbnailRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Files/Thumbnail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Gets the thumbnail of a file
     */
    async downloadThumbnail(requestParameters: DownloadThumbnailRequest): Promise<Blob> {
        const response = await this.downloadThumbnailRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns info about the requested file
     */
    async infoFileRaw(requestParameters: InfoFileRequest): Promise<runtime.ApiResponse<FileVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling infoFile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Files/{id}/Info`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileVmFromJSON(jsonValue));
    }

    /**
     * Returns info about the requested file
     */
    async infoFile(requestParameters: InfoFileRequest): Promise<FileVm> {
        const response = await this.infoFileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a file expiration date
     */
    async keepFileRaw(requestParameters: KeepFileRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling keepFile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Files/{id}/Keep`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a file expiration date
     */
    async keepFile(requestParameters: KeepFileRequest): Promise<void> {
        await this.keepFileRaw(requestParameters);
    }

    /**
     * Deletes all expired files
     */
    async pruneFileRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Files/Prune`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes all expired files
     */
    async pruneFile(): Promise<void> {
        await this.pruneFileRaw();
    }

    /**
     * Uploads a file to the server
     */
    async uploadFileRaw(requestParameters: UploadFileRequest): Promise<runtime.ApiResponse<FileVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        if (requestParameters.fileAccess !== undefined) {
            formParams.append('fileAccess', requestParameters.fileAccess as any);
        }

        const response = await this.request({
            path: `/api/Files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileVmFromJSON(jsonValue));
    }

    /**
     * Uploads a file to the server
     */
    async uploadFile(requestParameters: UploadFileRequest): Promise<FileVm> {
        const response = await this.uploadFileRaw(requestParameters);
        return await response.value();
    }

}
