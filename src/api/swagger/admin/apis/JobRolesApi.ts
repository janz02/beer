/* tslint:disable */
/* eslint-disable */
/**
 * Optima Admin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Int32EntityCreatedVm,
    Int32EntityCreatedVmFromJSON,
    Int32EntityCreatedVmToJSON,
    JobRoleDto,
    JobRoleDtoFromJSON,
    JobRoleDtoToJSON,
    JobRoleVm,
    JobRoleVmFromJSON,
    JobRoleVmToJSON,
    JobRoleVmPaginatedResponse,
    JobRoleVmPaginatedResponseFromJSON,
    JobRoleVmPaginatedResponseToJSON,
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface CreateJobRoleRequest {
    xRTDTransactionGuid?: string;
    jobRoleDto?: JobRoleDto;
}

export interface DeleteJobRoleRequest {
    id: number;
    xRTDTransactionGuid?: string;
}

export interface ExportJobRolesRequest {
    name?: string | null;
    createdDate?: Date | null;
    createdBy?: string | null;
    profileCount?: number | null;
    groupCount?: number | null;
    companyCount?: number | null;
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
    xRTDTransactionGuid?: string;
}

export interface GetJobRoleRequest {
    id: number;
    xRTDTransactionGuid?: string;
}

export interface GetJobRolesRequest {
    name?: string | null;
    createdDate?: Date | null;
    createdBy?: string | null;
    profileCount?: number | null;
    groupCount?: number | null;
    companyCount?: number | null;
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
    xRTDTransactionGuid?: string;
}

export interface UpdateJobRoleRequest {
    id: number;
    xRTDTransactionGuid?: string;
    jobRoleDto?: JobRoleDto;
}

/**
 * no description
 */
export class JobRolesApi extends runtime.BaseAPI {

    /**
     * Returns the id of the Job Role upon success
     * Creates a Job Role entity
     */
    async createJobRoleRaw(requestParameters: CreateJobRoleRequest): Promise<runtime.ApiResponse<Int32EntityCreatedVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/JobRoles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobRoleDtoToJSON(requestParameters.jobRoleDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32EntityCreatedVmFromJSON(jsonValue));
    }

    /**
     * Returns the id of the Job Role upon success
     * Creates a Job Role entity
     */
    async createJobRole(requestParameters: CreateJobRoleRequest): Promise<Int32EntityCreatedVm> {
        const response = await this.createJobRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes the Job Role  entity with Id of \"id\"
     * Deletes a Job Role entity
     */
    async deleteJobRoleRaw(requestParameters: DeleteJobRoleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteJobRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/JobRoles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the Job Role  entity with Id of \"id\"
     * Deletes a Job Role entity
     */
    async deleteJobRole(requestParameters: DeleteJobRoleRequest): Promise<void> {
        await this.deleteJobRoleRaw(requestParameters);
    }

    /**
     * Exports the Job Role list with the specified filters applied in a csv file
     * Exports a Job Role entity list sorted and filtered in a csv file
     */
    async exportJobRolesRaw(requestParameters: ExportJobRolesRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.createdDate !== undefined) {
            queryParameters['createdDate'] = (requestParameters.createdDate as any).toISOString();
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }

        if (requestParameters.profileCount !== undefined) {
            queryParameters['profileCount'] = requestParameters.profileCount;
        }

        if (requestParameters.groupCount !== undefined) {
            queryParameters['groupCount'] = requestParameters.groupCount;
        }

        if (requestParameters.companyCount !== undefined) {
            queryParameters['companyCount'] = requestParameters.companyCount;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/JobRoles/ExportCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Exports the Job Role list with the specified filters applied in a csv file
     * Exports a Job Role entity list sorted and filtered in a csv file
     */
    async exportJobRoles(requestParameters: ExportJobRolesRequest): Promise<Blob> {
        const response = await this.exportJobRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the Job Role with the specified Id upon success
     * Gets a Job Role entity by Id
     */
    async getJobRoleRaw(requestParameters: GetJobRoleRequest): Promise<runtime.ApiResponse<JobRoleVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getJobRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/JobRoles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobRoleVmFromJSON(jsonValue));
    }

    /**
     * Returns the Job Role with the specified Id upon success
     * Gets a Job Role entity by Id
     */
    async getJobRole(requestParameters: GetJobRoleRequest): Promise<JobRoleVm> {
        const response = await this.getJobRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the Job Role list with the specified filters applied
     * Gets a Job Role entity list sorted and filtered
     */
    async getJobRolesRaw(requestParameters: GetJobRolesRequest): Promise<runtime.ApiResponse<JobRoleVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.createdDate !== undefined) {
            queryParameters['createdDate'] = (requestParameters.createdDate as any).toISOString();
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }

        if (requestParameters.profileCount !== undefined) {
            queryParameters['profileCount'] = requestParameters.profileCount;
        }

        if (requestParameters.groupCount !== undefined) {
            queryParameters['groupCount'] = requestParameters.groupCount;
        }

        if (requestParameters.companyCount !== undefined) {
            queryParameters['companyCount'] = requestParameters.companyCount;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/JobRoles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JobRoleVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns the Job Role list with the specified filters applied
     * Gets a Job Role entity list sorted and filtered
     */
    async getJobRoles(requestParameters: GetJobRolesRequest): Promise<JobRoleVmPaginatedResponse> {
        const response = await this.getJobRolesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a Job Role entity with Id of \"id\" to entity \"dto\"
     * Updates a Job Role entity
     */
    async updateJobRoleRaw(requestParameters: UpdateJobRoleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateJobRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/JobRoles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: JobRoleDtoToJSON(requestParameters.jobRoleDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a Job Role entity with Id of \"id\" to entity \"dto\"
     * Updates a Job Role entity
     */
    async updateJobRole(requestParameters: UpdateJobRoleRequest): Promise<void> {
        await this.updateJobRoleRaw(requestParameters);
    }

}
