/* tslint:disable */
/* eslint-disable */
/**
 * Optima Admin
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Int32EntityCreatedVm,
    Int32EntityCreatedVmFromJSON,
    Int32EntityCreatedVmToJSON,
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
    OrganizationGroupDto,
    OrganizationGroupDtoFromJSON,
    OrganizationGroupDtoToJSON,
    OrganizationGroupVm,
    OrganizationGroupVmFromJSON,
    OrganizationGroupVmToJSON,
    OrganizationGroupVmPaginatedResponse,
    OrganizationGroupVmPaginatedResponseFromJSON,
    OrganizationGroupVmPaginatedResponseToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface CreateOrganizationGroupRequest {
    xRTDTransactionGuid?: string;
    organizationGroupDto?: OrganizationGroupDto;
}

export interface DeleteOrganizationGroupRequest {
    id: number;
    xRTDTransactionGuid?: string;
}

export interface ExportOrganizationGroupsRequest {
    name?: string | null;
    createdDate?: Date | null;
    createdBy?: string | null;
    profileCount?: number | null;
    companyCount?: number | null;
    jobRoleCount?: number | null;
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
    xRTDTransactionGuid?: string;
}

export interface GetOrganizationGroupRequest {
    id: number;
    xRTDTransactionGuid?: string;
}

export interface GetOrganizationGroupsRequest {
    name?: string | null;
    createdDate?: Date | null;
    createdBy?: string | null;
    profileCount?: number | null;
    companyCount?: number | null;
    jobRoleCount?: number | null;
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
    xRTDTransactionGuid?: string;
}

export interface UpdateOrganizationGroupRequest {
    id: number;
    xRTDTransactionGuid?: string;
    organizationGroupDto?: OrganizationGroupDto;
}

/**
 * no description
 */
export class OrganizationGroupsApi extends runtime.BaseAPI {

    /**
     * Returns the id of the Organization Group upon success
     * Creates an Organization Group entity
     */
    async createOrganizationGroupRaw(requestParameters: CreateOrganizationGroupRequest): Promise<runtime.ApiResponse<Int32EntityCreatedVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/OrganizationGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationGroupDtoToJSON(requestParameters.organizationGroupDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32EntityCreatedVmFromJSON(jsonValue));
    }

    /**
     * Returns the id of the Organization Group upon success
     * Creates an Organization Group entity
     */
    async createOrganizationGroup(requestParameters: CreateOrganizationGroupRequest): Promise<Int32EntityCreatedVm> {
        const response = await this.createOrganizationGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes the Organization Group entity with Id of \"id\"
     * Deletes an Organization Group entity
     */
    async deleteOrganizationGroupRaw(requestParameters: DeleteOrganizationGroupRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteOrganizationGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/OrganizationGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the Organization Group entity with Id of \"id\"
     * Deletes an Organization Group entity
     */
    async deleteOrganizationGroup(requestParameters: DeleteOrganizationGroupRequest): Promise<void> {
        await this.deleteOrganizationGroupRaw(requestParameters);
    }

    /**
     * Exports the Organization Group list with the specified filters applied in a csv file
     * Exports an Organization Group entity list sorted and filtered in a csv file
     */
    async exportOrganizationGroupsRaw(requestParameters: ExportOrganizationGroupsRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.createdDate !== undefined) {
            queryParameters['createdDate'] = (requestParameters.createdDate as any).toISOString();
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }

        if (requestParameters.profileCount !== undefined) {
            queryParameters['profileCount'] = requestParameters.profileCount;
        }

        if (requestParameters.companyCount !== undefined) {
            queryParameters['companyCount'] = requestParameters.companyCount;
        }

        if (requestParameters.jobRoleCount !== undefined) {
            queryParameters['jobRoleCount'] = requestParameters.jobRoleCount;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/OrganizationGroups/ExportCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Exports the Organization Group list with the specified filters applied in a csv file
     * Exports an Organization Group entity list sorted and filtered in a csv file
     */
    async exportOrganizationGroups(requestParameters: ExportOrganizationGroupsRequest): Promise<Blob> {
        const response = await this.exportOrganizationGroupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the Organization Group with the specified Id upon success
     * Gets an Organization Group entity by Id
     */
    async getOrganizationGroupRaw(requestParameters: GetOrganizationGroupRequest): Promise<runtime.ApiResponse<OrganizationGroupVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getOrganizationGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/OrganizationGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationGroupVmFromJSON(jsonValue));
    }

    /**
     * Returns the Organization Group with the specified Id upon success
     * Gets an Organization Group entity by Id
     */
    async getOrganizationGroup(requestParameters: GetOrganizationGroupRequest): Promise<OrganizationGroupVm> {
        const response = await this.getOrganizationGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the Organization Group list with the specified filters applied
     * Gets an Organization Group entity list sorted and filtered
     */
    async getOrganizationGroupsRaw(requestParameters: GetOrganizationGroupsRequest): Promise<runtime.ApiResponse<OrganizationGroupVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.createdDate !== undefined) {
            queryParameters['createdDate'] = (requestParameters.createdDate as any).toISOString();
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }

        if (requestParameters.profileCount !== undefined) {
            queryParameters['profileCount'] = requestParameters.profileCount;
        }

        if (requestParameters.companyCount !== undefined) {
            queryParameters['companyCount'] = requestParameters.companyCount;
        }

        if (requestParameters.jobRoleCount !== undefined) {
            queryParameters['jobRoleCount'] = requestParameters.jobRoleCount;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/OrganizationGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationGroupVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns the Organization Group list with the specified filters applied
     * Gets an Organization Group entity list sorted and filtered
     */
    async getOrganizationGroups(requestParameters: GetOrganizationGroupsRequest): Promise<OrganizationGroupVmPaginatedResponse> {
        const response = await this.getOrganizationGroupsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an Organization Group entity with Id of \"id\" to entity \"dto\"
     * Updates an Organization Group entity
     */
    async updateOrganizationGroupRaw(requestParameters: UpdateOrganizationGroupRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateOrganizationGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRTDTransactionGuid !== undefined && requestParameters.xRTDTransactionGuid !== null) {
            headerParameters['X-RTD-Transaction-Guid'] = String(requestParameters.xRTDTransactionGuid);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/OrganizationGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationGroupDtoToJSON(requestParameters.organizationGroupDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an Organization Group entity with Id of \"id\" to entity \"dto\"
     * Updates an Organization Group entity
     */
    async updateOrganizationGroup(requestParameters: UpdateOrganizationGroupRequest): Promise<void> {
        await this.updateOrganizationGroupRaw(requestParameters);
    }

}
