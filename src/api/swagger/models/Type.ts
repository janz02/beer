/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Assembly,
    AssemblyFromJSON,
    AssemblyFromJSONTyped,
    AssemblyToJSON,
    ConstructorInfo,
    ConstructorInfoFromJSON,
    ConstructorInfoFromJSONTyped,
    ConstructorInfoToJSON,
    CustomAttributeData,
    CustomAttributeDataFromJSON,
    CustomAttributeDataFromJSONTyped,
    CustomAttributeDataToJSON,
    GenericParameterAttributes,
    GenericParameterAttributesFromJSON,
    GenericParameterAttributesFromJSONTyped,
    GenericParameterAttributesToJSON,
    MemberTypes,
    MemberTypesFromJSON,
    MemberTypesFromJSONTyped,
    MemberTypesToJSON,
    MethodBase,
    MethodBaseFromJSON,
    MethodBaseFromJSONTyped,
    MethodBaseToJSON,
    Module,
    ModuleFromJSON,
    ModuleFromJSONTyped,
    ModuleToJSON,
    RuntimeTypeHandle,
    RuntimeTypeHandleFromJSON,
    RuntimeTypeHandleFromJSONTyped,
    RuntimeTypeHandleToJSON,
    StructLayoutAttribute,
    StructLayoutAttributeFromJSON,
    StructLayoutAttributeFromJSONTyped,
    StructLayoutAttributeToJSON,
    TypeAttributes,
    TypeAttributesFromJSON,
    TypeAttributesFromJSONTyped,
    TypeAttributesToJSON,
} from './';

/**
 * 
 * @export
 * @interface Type
 */
export interface Type {
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isInterface?: boolean;
    /**
     * 
     * @type {MemberTypes}
     * @memberof Type
     */
    memberType?: MemberTypes;
    /**
     * 
     * @type {string}
     * @memberof Type
     */
    readonly namespace?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Type
     */
    readonly assemblyQualifiedName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Type
     */
    readonly fullName?: string | null;
    /**
     * 
     * @type {Assembly}
     * @memberof Type
     */
    assembly?: Assembly;
    /**
     * 
     * @type {Module}
     * @memberof Type
     */
    module?: Module;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isNested?: boolean;
    /**
     * 
     * @type {Type}
     * @memberof Type
     */
    declaringType?: Type;
    /**
     * 
     * @type {MethodBase}
     * @memberof Type
     */
    declaringMethod?: MethodBase;
    /**
     * 
     * @type {Type}
     * @memberof Type
     */
    reflectedType?: Type;
    /**
     * 
     * @type {Type}
     * @memberof Type
     */
    underlyingSystemType?: Type;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isTypeDefinition?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isArray?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isByRef?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isPointer?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isConstructedGenericType?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isGenericParameter?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isGenericTypeParameter?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isGenericMethodParameter?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isGenericType?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isGenericTypeDefinition?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isSZArray?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isVariableBoundArray?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isByRefLike?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly hasElementType?: boolean;
    /**
     * 
     * @type {Array<Type>}
     * @memberof Type
     */
    readonly genericTypeArguments?: Array<Type> | null;
    /**
     * 
     * @type {number}
     * @memberof Type
     */
    readonly genericParameterPosition?: number;
    /**
     * 
     * @type {GenericParameterAttributes}
     * @memberof Type
     */
    genericParameterAttributes?: GenericParameterAttributes;
    /**
     * 
     * @type {TypeAttributes}
     * @memberof Type
     */
    attributes?: TypeAttributes;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isAbstract?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isImport?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isSealed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isSpecialName?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isClass?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isNestedAssembly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isNestedFamANDAssem?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isNestedFamily?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isNestedFamORAssem?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isNestedPrivate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isNestedPublic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isNotPublic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isPublic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isAutoLayout?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isExplicitLayout?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isLayoutSequential?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isAnsiClass?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isAutoClass?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isUnicodeClass?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isCOMObject?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isContextful?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isEnum?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isMarshalByRef?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isPrimitive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isValueType?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isSignatureType?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isSecurityCritical?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isSecuritySafeCritical?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isSecurityTransparent?: boolean;
    /**
     * 
     * @type {StructLayoutAttribute}
     * @memberof Type
     */
    structLayoutAttribute?: StructLayoutAttribute;
    /**
     * 
     * @type {ConstructorInfo}
     * @memberof Type
     */
    typeInitializer?: ConstructorInfo;
    /**
     * 
     * @type {RuntimeTypeHandle}
     * @memberof Type
     */
    typeHandle?: RuntimeTypeHandle;
    /**
     * 
     * @type {string}
     * @memberof Type
     */
    readonly guid?: string;
    /**
     * 
     * @type {Type}
     * @memberof Type
     */
    baseType?: Type;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isSerializable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly containsGenericParameters?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isVisible?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Type
     */
    readonly name?: string | null;
    /**
     * 
     * @type {Array<CustomAttributeData>}
     * @memberof Type
     */
    readonly customAttributes?: Array<CustomAttributeData> | null;
    /**
     * 
     * @type {boolean}
     * @memberof Type
     */
    readonly isCollectible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Type
     */
    readonly metadataToken?: number;
}

export function TypeFromJSON(json: any): Type {
    return TypeFromJSONTyped(json, false);
}

export function TypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Type {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isInterface': !exists(json, 'isInterface') ? undefined : json['isInterface'],
        'memberType': !exists(json, 'memberType') ? undefined : MemberTypesFromJSON(json['memberType']),
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'assemblyQualifiedName': !exists(json, 'assemblyQualifiedName') ? undefined : json['assemblyQualifiedName'],
        'fullName': !exists(json, 'fullName') ? undefined : json['fullName'],
        'assembly': !exists(json, 'assembly') ? undefined : AssemblyFromJSON(json['assembly']),
        'module': !exists(json, 'module') ? undefined : ModuleFromJSON(json['module']),
        'isNested': !exists(json, 'isNested') ? undefined : json['isNested'],
        'declaringType': !exists(json, 'declaringType') ? undefined : TypeFromJSON(json['declaringType']),
        'declaringMethod': !exists(json, 'declaringMethod') ? undefined : MethodBaseFromJSON(json['declaringMethod']),
        'reflectedType': !exists(json, 'reflectedType') ? undefined : TypeFromJSON(json['reflectedType']),
        'underlyingSystemType': !exists(json, 'underlyingSystemType') ? undefined : TypeFromJSON(json['underlyingSystemType']),
        'isTypeDefinition': !exists(json, 'isTypeDefinition') ? undefined : json['isTypeDefinition'],
        'isArray': !exists(json, 'isArray') ? undefined : json['isArray'],
        'isByRef': !exists(json, 'isByRef') ? undefined : json['isByRef'],
        'isPointer': !exists(json, 'isPointer') ? undefined : json['isPointer'],
        'isConstructedGenericType': !exists(json, 'isConstructedGenericType') ? undefined : json['isConstructedGenericType'],
        'isGenericParameter': !exists(json, 'isGenericParameter') ? undefined : json['isGenericParameter'],
        'isGenericTypeParameter': !exists(json, 'isGenericTypeParameter') ? undefined : json['isGenericTypeParameter'],
        'isGenericMethodParameter': !exists(json, 'isGenericMethodParameter') ? undefined : json['isGenericMethodParameter'],
        'isGenericType': !exists(json, 'isGenericType') ? undefined : json['isGenericType'],
        'isGenericTypeDefinition': !exists(json, 'isGenericTypeDefinition') ? undefined : json['isGenericTypeDefinition'],
        'isSZArray': !exists(json, 'isSZArray') ? undefined : json['isSZArray'],
        'isVariableBoundArray': !exists(json, 'isVariableBoundArray') ? undefined : json['isVariableBoundArray'],
        'isByRefLike': !exists(json, 'isByRefLike') ? undefined : json['isByRefLike'],
        'hasElementType': !exists(json, 'hasElementType') ? undefined : json['hasElementType'],
        'genericTypeArguments': !exists(json, 'genericTypeArguments') ? undefined : (json['genericTypeArguments'] === null ? null : (json['genericTypeArguments'] as Array<any>).map(TypeFromJSON)),
        'genericParameterPosition': !exists(json, 'genericParameterPosition') ? undefined : json['genericParameterPosition'],
        'genericParameterAttributes': !exists(json, 'genericParameterAttributes') ? undefined : GenericParameterAttributesFromJSON(json['genericParameterAttributes']),
        'attributes': !exists(json, 'attributes') ? undefined : TypeAttributesFromJSON(json['attributes']),
        'isAbstract': !exists(json, 'isAbstract') ? undefined : json['isAbstract'],
        'isImport': !exists(json, 'isImport') ? undefined : json['isImport'],
        'isSealed': !exists(json, 'isSealed') ? undefined : json['isSealed'],
        'isSpecialName': !exists(json, 'isSpecialName') ? undefined : json['isSpecialName'],
        'isClass': !exists(json, 'isClass') ? undefined : json['isClass'],
        'isNestedAssembly': !exists(json, 'isNestedAssembly') ? undefined : json['isNestedAssembly'],
        'isNestedFamANDAssem': !exists(json, 'isNestedFamANDAssem') ? undefined : json['isNestedFamANDAssem'],
        'isNestedFamily': !exists(json, 'isNestedFamily') ? undefined : json['isNestedFamily'],
        'isNestedFamORAssem': !exists(json, 'isNestedFamORAssem') ? undefined : json['isNestedFamORAssem'],
        'isNestedPrivate': !exists(json, 'isNestedPrivate') ? undefined : json['isNestedPrivate'],
        'isNestedPublic': !exists(json, 'isNestedPublic') ? undefined : json['isNestedPublic'],
        'isNotPublic': !exists(json, 'isNotPublic') ? undefined : json['isNotPublic'],
        'isPublic': !exists(json, 'isPublic') ? undefined : json['isPublic'],
        'isAutoLayout': !exists(json, 'isAutoLayout') ? undefined : json['isAutoLayout'],
        'isExplicitLayout': !exists(json, 'isExplicitLayout') ? undefined : json['isExplicitLayout'],
        'isLayoutSequential': !exists(json, 'isLayoutSequential') ? undefined : json['isLayoutSequential'],
        'isAnsiClass': !exists(json, 'isAnsiClass') ? undefined : json['isAnsiClass'],
        'isAutoClass': !exists(json, 'isAutoClass') ? undefined : json['isAutoClass'],
        'isUnicodeClass': !exists(json, 'isUnicodeClass') ? undefined : json['isUnicodeClass'],
        'isCOMObject': !exists(json, 'isCOMObject') ? undefined : json['isCOMObject'],
        'isContextful': !exists(json, 'isContextful') ? undefined : json['isContextful'],
        'isEnum': !exists(json, 'isEnum') ? undefined : json['isEnum'],
        'isMarshalByRef': !exists(json, 'isMarshalByRef') ? undefined : json['isMarshalByRef'],
        'isPrimitive': !exists(json, 'isPrimitive') ? undefined : json['isPrimitive'],
        'isValueType': !exists(json, 'isValueType') ? undefined : json['isValueType'],
        'isSignatureType': !exists(json, 'isSignatureType') ? undefined : json['isSignatureType'],
        'isSecurityCritical': !exists(json, 'isSecurityCritical') ? undefined : json['isSecurityCritical'],
        'isSecuritySafeCritical': !exists(json, 'isSecuritySafeCritical') ? undefined : json['isSecuritySafeCritical'],
        'isSecurityTransparent': !exists(json, 'isSecurityTransparent') ? undefined : json['isSecurityTransparent'],
        'structLayoutAttribute': !exists(json, 'structLayoutAttribute') ? undefined : StructLayoutAttributeFromJSON(json['structLayoutAttribute']),
        'typeInitializer': !exists(json, 'typeInitializer') ? undefined : ConstructorInfoFromJSON(json['typeInitializer']),
        'typeHandle': !exists(json, 'typeHandle') ? undefined : RuntimeTypeHandleFromJSON(json['typeHandle']),
        'guid': !exists(json, 'guid') ? undefined : json['guid'],
        'baseType': !exists(json, 'baseType') ? undefined : TypeFromJSON(json['baseType']),
        'isSerializable': !exists(json, 'isSerializable') ? undefined : json['isSerializable'],
        'containsGenericParameters': !exists(json, 'containsGenericParameters') ? undefined : json['containsGenericParameters'],
        'isVisible': !exists(json, 'isVisible') ? undefined : json['isVisible'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'customAttributes': !exists(json, 'customAttributes') ? undefined : (json['customAttributes'] === null ? null : (json['customAttributes'] as Array<any>).map(CustomAttributeDataFromJSON)),
        'isCollectible': !exists(json, 'isCollectible') ? undefined : json['isCollectible'],
        'metadataToken': !exists(json, 'metadataToken') ? undefined : json['metadataToken'],
    };
}

export function TypeToJSON(value?: Type | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'memberType': MemberTypesToJSON(value.memberType),
        'assembly': AssemblyToJSON(value.assembly),
        'module': ModuleToJSON(value.module),
        'declaringType': TypeToJSON(value.declaringType),
        'declaringMethod': MethodBaseToJSON(value.declaringMethod),
        'reflectedType': TypeToJSON(value.reflectedType),
        'underlyingSystemType': TypeToJSON(value.underlyingSystemType),
        'genericParameterAttributes': GenericParameterAttributesToJSON(value.genericParameterAttributes),
        'attributes': TypeAttributesToJSON(value.attributes),
        'structLayoutAttribute': StructLayoutAttributeToJSON(value.structLayoutAttribute),
        'typeInitializer': ConstructorInfoToJSON(value.typeInitializer),
        'typeHandle': RuntimeTypeHandleToJSON(value.typeHandle),
        'baseType': TypeToJSON(value.baseType),
    };
}


