/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CallingConventions,
    CallingConventionsFromJSON,
    CallingConventionsFromJSONTyped,
    CallingConventionsToJSON,
    CustomAttributeData,
    CustomAttributeDataFromJSON,
    CustomAttributeDataFromJSONTyped,
    CustomAttributeDataToJSON,
    MemberTypes,
    MemberTypesFromJSON,
    MemberTypesFromJSONTyped,
    MemberTypesToJSON,
    MethodAttributes,
    MethodAttributesFromJSON,
    MethodAttributesFromJSONTyped,
    MethodAttributesToJSON,
    MethodImplAttributes,
    MethodImplAttributesFromJSON,
    MethodImplAttributesFromJSONTyped,
    MethodImplAttributesToJSON,
    Module,
    ModuleFromJSON,
    ModuleFromJSONTyped,
    ModuleToJSON,
    RuntimeMethodHandle,
    RuntimeMethodHandleFromJSON,
    RuntimeMethodHandleFromJSONTyped,
    RuntimeMethodHandleToJSON,
    Type,
    TypeFromJSON,
    TypeFromJSONTyped,
    TypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface ConstructorInfo
 */
export interface ConstructorInfo {
    /**
     * 
     * @type {MemberTypes}
     * @memberof ConstructorInfo
     */
    memberType?: MemberTypes;
    /**
     * 
     * @type {MethodAttributes}
     * @memberof ConstructorInfo
     */
    attributes?: MethodAttributes;
    /**
     * 
     * @type {MethodImplAttributes}
     * @memberof ConstructorInfo
     */
    methodImplementationFlags?: MethodImplAttributes;
    /**
     * 
     * @type {CallingConventions}
     * @memberof ConstructorInfo
     */
    callingConvention?: CallingConventions;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isAbstract?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isConstructor?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isFinal?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isHideBySig?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isSpecialName?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isStatic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isVirtual?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isAssembly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isFamily?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isFamilyAndAssembly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isFamilyOrAssembly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isPrivate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isPublic?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isConstructedGenericMethod?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isGenericMethod?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isGenericMethodDefinition?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly containsGenericParameters?: boolean;
    /**
     * 
     * @type {RuntimeMethodHandle}
     * @memberof ConstructorInfo
     */
    methodHandle?: RuntimeMethodHandle;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isSecurityCritical?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isSecuritySafeCritical?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isSecurityTransparent?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ConstructorInfo
     */
    readonly name?: string | null;
    /**
     * 
     * @type {Type}
     * @memberof ConstructorInfo
     */
    declaringType?: Type;
    /**
     * 
     * @type {Type}
     * @memberof ConstructorInfo
     */
    reflectedType?: Type;
    /**
     * 
     * @type {Module}
     * @memberof ConstructorInfo
     */
    module?: Module;
    /**
     * 
     * @type {Array<CustomAttributeData>}
     * @memberof ConstructorInfo
     */
    readonly customAttributes?: Array<CustomAttributeData> | null;
    /**
     * 
     * @type {boolean}
     * @memberof ConstructorInfo
     */
    readonly isCollectible?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ConstructorInfo
     */
    readonly metadataToken?: number;
}

export function ConstructorInfoFromJSON(json: any): ConstructorInfo {
    return ConstructorInfoFromJSONTyped(json, false);
}

export function ConstructorInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConstructorInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'memberType': !exists(json, 'memberType') ? undefined : MemberTypesFromJSON(json['memberType']),
        'attributes': !exists(json, 'attributes') ? undefined : MethodAttributesFromJSON(json['attributes']),
        'methodImplementationFlags': !exists(json, 'methodImplementationFlags') ? undefined : MethodImplAttributesFromJSON(json['methodImplementationFlags']),
        'callingConvention': !exists(json, 'callingConvention') ? undefined : CallingConventionsFromJSON(json['callingConvention']),
        'isAbstract': !exists(json, 'isAbstract') ? undefined : json['isAbstract'],
        'isConstructor': !exists(json, 'isConstructor') ? undefined : json['isConstructor'],
        'isFinal': !exists(json, 'isFinal') ? undefined : json['isFinal'],
        'isHideBySig': !exists(json, 'isHideBySig') ? undefined : json['isHideBySig'],
        'isSpecialName': !exists(json, 'isSpecialName') ? undefined : json['isSpecialName'],
        'isStatic': !exists(json, 'isStatic') ? undefined : json['isStatic'],
        'isVirtual': !exists(json, 'isVirtual') ? undefined : json['isVirtual'],
        'isAssembly': !exists(json, 'isAssembly') ? undefined : json['isAssembly'],
        'isFamily': !exists(json, 'isFamily') ? undefined : json['isFamily'],
        'isFamilyAndAssembly': !exists(json, 'isFamilyAndAssembly') ? undefined : json['isFamilyAndAssembly'],
        'isFamilyOrAssembly': !exists(json, 'isFamilyOrAssembly') ? undefined : json['isFamilyOrAssembly'],
        'isPrivate': !exists(json, 'isPrivate') ? undefined : json['isPrivate'],
        'isPublic': !exists(json, 'isPublic') ? undefined : json['isPublic'],
        'isConstructedGenericMethod': !exists(json, 'isConstructedGenericMethod') ? undefined : json['isConstructedGenericMethod'],
        'isGenericMethod': !exists(json, 'isGenericMethod') ? undefined : json['isGenericMethod'],
        'isGenericMethodDefinition': !exists(json, 'isGenericMethodDefinition') ? undefined : json['isGenericMethodDefinition'],
        'containsGenericParameters': !exists(json, 'containsGenericParameters') ? undefined : json['containsGenericParameters'],
        'methodHandle': !exists(json, 'methodHandle') ? undefined : RuntimeMethodHandleFromJSON(json['methodHandle']),
        'isSecurityCritical': !exists(json, 'isSecurityCritical') ? undefined : json['isSecurityCritical'],
        'isSecuritySafeCritical': !exists(json, 'isSecuritySafeCritical') ? undefined : json['isSecuritySafeCritical'],
        'isSecurityTransparent': !exists(json, 'isSecurityTransparent') ? undefined : json['isSecurityTransparent'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'declaringType': !exists(json, 'declaringType') ? undefined : TypeFromJSON(json['declaringType']),
        'reflectedType': !exists(json, 'reflectedType') ? undefined : TypeFromJSON(json['reflectedType']),
        'module': !exists(json, 'module') ? undefined : ModuleFromJSON(json['module']),
        'customAttributes': !exists(json, 'customAttributes') ? undefined : (json['customAttributes'] === null ? null : (json['customAttributes'] as Array<any>).map(CustomAttributeDataFromJSON)),
        'isCollectible': !exists(json, 'isCollectible') ? undefined : json['isCollectible'],
        'metadataToken': !exists(json, 'metadataToken') ? undefined : json['metadataToken'],
    };
}

export function ConstructorInfoToJSON(value?: ConstructorInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'memberType': MemberTypesToJSON(value.memberType),
        'attributes': MethodAttributesToJSON(value.attributes),
        'methodImplementationFlags': MethodImplAttributesToJSON(value.methodImplementationFlags),
        'callingConvention': CallingConventionsToJSON(value.callingConvention),
        'methodHandle': RuntimeMethodHandleToJSON(value.methodHandle),
        'declaringType': TypeToJSON(value.declaringType),
        'reflectedType': TypeToJSON(value.reflectedType),
        'module': ModuleToJSON(value.module),
    };
}


