{
  "openapi": "3.0.1",
  "info": {
    "title": "NKM PKM Coupon Api",
    "version": "v1"
  },
  "paths": {
    "/api/Auth/RegisterPartnerContact": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a contact for a partner",
        "description": "Returns nothing, but registers a contact for the partner",
        "operationId": "registerPartnerContact",
        "requestBody": {
          "description": "Data of the contact",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPartnerContactDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful registration"
          },
          "400": {
            "description": "Invalid e-mail: error.auth.invalid-email; \r\n                Invalid password: error.auth.password-format; \r\n                Error occured in registration: error.auth.registration-failed;\r\n                Invalid partner code: error.auth.invalid-partner-code; \r\n                User already exists: error.auth.user-exists",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/RegisterUser": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a user",
        "description": "Returns nothing, but registers a user",
        "operationId": "registerUser",
        "requestBody": {
          "description": "Data of the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful registration"
          },
          "400": {
            "description": "Invalid e-mail: error.auth.invalid-email; \r\n                Invalid password: error.auth.password-format; \r\n                Error occured in registration: error.auth.registration-failed;\r\n                User already exists: error.auth.user-exists",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/Login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs in a user",
        "description": "Returns user info about the logged in user",
        "operationId": "login",
        "requestBody": {
          "description": "Login data of the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                }
              }
            }
          },
          "400": {
            "description": "Login failed: error.auth.login-failed; \r\n                LDAP Login failed: error.auth.ldap",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/Refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refreshes the JWT token",
        "description": "Returns user info about the logged in user",
        "operationId": "refresh",
        "requestBody": {
          "description": "Refresh Token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful refresh",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                }
              }
            }
          },
          "400": {
            "description": "Expired Refresh Token: error.auth.expired-refresh-token; \r\n                Invalid Refresh Token: error.auth.invalid-refresh-token",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/ChangePassword": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Changes the password for the logged in User",
        "description": "Returns nothing",
        "operationId": "changePassword",
        "requestBody": {
          "description": "New Password",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful password change"
          },
          "400": {
            "description": "Validation Error: error.common.validation",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/GetOnePartnerContact/{id}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Returns the details of a partner contact",
        "description": "Returns the details of a partner contact",
        "operationId": "getPartnerContactInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Query id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Query id",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactStateVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactStateVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactStateVm"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: error.not-found"
          }
        }
      }
    },
    "/api/Auth/GetPartnerContacts": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Returns the details of partner contacts",
        "description": "Returns the details of partner contacts in paginated form",
        "operationId": "getPartnerContactsInfo",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "partnerName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error: validation.error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/GetNkmPartnerContacts": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Returns the details of elevated users",
        "description": "Returns the details of elevated users in paginated form",
        "operationId": "getNkmPartnerContactsInfo",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "partnerName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation Error: validation.error"
          }
        }
      }
    },
    "/api/Auth/UpdatePartnerContact/{id}": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Updates the details of an elevated user or partner contact",
        "description": "Updates the details of an elevated user or partner contact",
        "operationId": "updatePartnerContactInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the user",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New details of the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerContactStateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation Error: validation.error"
          },
          "404": {
            "description": "User not found error: error.not-found"
          }
        }
      }
    },
    "/api/Auth/SyncAdUsers": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Syncs in all the users from AD to be listed",
        "operationId": "syncAdUsers",
        "responses": {
          "200": {
            "description": "Successful syncing"
          },
          "400": {
            "description": "Registration error occured"
          }
        }
      }
    },
    "/api/Cashiers": {
      "post": {
        "tags": [
          "Cashiers"
        ],
        "summary": "Creates an entity",
        "description": "Returns the id of the entity upon success",
        "operationId": "createCashier",
        "requestBody": {
          "description": "Details of the entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCashierDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "CashierId not unique :error.cashier.cashier-id-not-unique"
          }
        }
      },
      "get": {
        "tags": [
          "Cashiers"
        ],
        "summary": "Gets a list of cashiers",
        "description": "Returns the cashier list with the specified filters applied",
        "operationId": "getCashiers",
        "parameters": [
          {
            "name": "siteId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CashierVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashierVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashierVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      }
    },
    "/api/Cashiers/{id}": {
      "get": {
        "tags": [
          "Cashiers"
        ],
        "summary": "Gets a cashier by Id",
        "description": "Returns the cashier with the specified Id upon success",
        "operationId": "getCashier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the cashier",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the cashier",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: cashier details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CashierVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashierVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CashierVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "Cashiers"
        ],
        "summary": "Updates a cashier",
        "description": "Updates a cashier with the given id",
        "operationId": "updateCashier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the cashier to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the cashier to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CashierDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "Cashiers"
        ],
        "summary": "Deletes a cashier",
        "description": "Deletes a cashier with the given id",
        "operationId": "deleteCashier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the cashier to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the cashier to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Categories": {
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Creates a Category entity",
        "description": "Returns the id of the Category upon success",
        "operationId": "createCategory",
        "requestBody": {
          "description": "Details of the Category",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      },
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Gets a Category entity list sorted and filtered",
        "description": "Returns the Category list with the specified filters applied",
        "operationId": "getCategories",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of Category entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/Categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Gets a Category entity by Id",
        "description": "Returns the Category with the specified Id upon success",
        "operationId": "getCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Category",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the Category",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Category entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Updates a Category entity",
        "description": "Updates a Category entity with Id of \"id\" to entity \"category\"",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Deletes a Category entity",
        "description": "Deletes the Category entity with Id of \"id\"",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupon/{couponId}/Comment": {
      "get": {
        "tags": [
          "CouponComments"
        ],
        "summary": "Gets the comments on a coupon",
        "description": "Returns the comment list on the coupon with an Id of \"couponId\"",
        "operationId": "getCouponComments",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "CouponId for comments",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "CouponId for comments",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: list of comments",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponCommentVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponCommentVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponCommentVm"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      },
      "post": {
        "tags": [
          "CouponComments"
        ],
        "summary": "Adds a comment to a coupon",
        "description": "Appends a comment with details of \"comment\" to a coupon with an Id of \"couponId\"",
        "operationId": "addCouponComment",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "Id of Coupon to add a comment to",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of Coupon to add a comment to",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Coupon not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupon/{couponId}/Comment/{commentId}": {
      "delete": {
        "tags": [
          "CouponComments"
        ],
        "summary": "Deletes a comment from a coupon",
        "description": "Deletes the comment with an Id of \"commentId\" from a coupon with Id of \"couponId\"",
        "operationId": "deleteCouponComment",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "Id of coupon to delete comment from",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of coupon to delete comment from",
              "format": "int32"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Id of comment to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of comment to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupons": {
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Creates a Coupon entity",
        "description": "Returns the id of the new Coupon upon success",
        "operationId": "createCoupon",
        "requestBody": {
          "description": "Details of the Coupon",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      },
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Gets a Coupon entity list sorted and filtered",
        "description": "Returns the Coupon list with the specified filters applied",
        "operationId": "getCoupons",
        "parameters": [
          {
            "name": "includeArchived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "rank",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponRank"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponType"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponState"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "expireDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "couponCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "minimumShoppingValue",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "discountValue",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "partnerName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "mode",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponMode"
            }
          },
          {
            "name": "discountType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponDiscountType"
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "preferredPosition",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of Coupon entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedCouponVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedCouponVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedCouponVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/Coupons/{id}": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Gets a Coupon entity by Id",
        "description": "Returns the Coupon with the specified Id upon success",
        "operationId": "getCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Coupon",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the Coupon",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Coupon entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "Coupons"
        ],
        "summary": "Updates a Coupon entity",
        "description": "Updates a Coupon entity with Id of \"id\" to entity \"item\"",
        "operationId": "updateCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "Coupons"
        ],
        "summary": "Deletes a Coupon entity",
        "description": "Deletes the Coupon entity with Id of \"id\"",
        "operationId": "deleteCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupons/Waiting": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Gets a Coupon entity list sorted and filtered with only Coupons that are in waiting state",
        "description": "Returns the Coupon list with the specified filters applied with only Coupons that are in waiting state",
        "operationId": "getWaitingCoupons",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponState"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "expireDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of Coupon entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WaitingCouponVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitingCouponVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitingCouponVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/Coupons/{id}/Status": {
      "put": {
        "tags": [
          "Coupons"
        ],
        "summary": "Updates a Coupon entity status only",
        "description": "Updates a Coupon entity status only with Id of \"id\" to entity \"changeCouponStateDto\"",
        "operationId": "updateCouponStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeCouponStateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupons/{id}/Claim": {
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Claims a coupon for the logged in user",
        "description": "Claims a coupon to put it in the used up coupons for the user",
        "operationId": "claimCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of coupon to claim coupon code for",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of coupon to claim coupon code for",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful claim: coupon code returned",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCodeVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCodeVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCodeVm"
                }
              }
            }
          },
          "400": {
            "description": "Saving error: couponUserCode.error.cant-sav"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupons/{id}/Activate": {
      "put": {
        "tags": [
          "Coupons"
        ],
        "summary": "Changes the active status of a coupon",
        "description": "Changes the active status of a coupon to the given value",
        "operationId": "activateCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of coupon to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of coupon to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Active status of the coupon to change",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateCouponDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful claim: coupon code returned"
          },
          "400": {
            "description": "Saving error: couponUserCode.error.cant-sav"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupons/CloseCoupons": {
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Closes coupons",
        "description": "Closes coupons when its accepted and either end date is passed or every coupon is claimed.",
        "operationId": "closeCoupons",
        "responses": {
          "200": {
            "description": "Successful closed coupons",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCodeVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCodeVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCodeVm"
                }
              }
            }
          }
        }
      }
    },
    "/api/CouponUserCodes/Coupon/{couponId}": {
      "get": {
        "tags": [
          "CouponUserCodes"
        ],
        "summary": "Returns the claimed coupon codes for a coupon",
        "description": "Returns a list of coupon codes that have been claimed for coupon with an Id of couponId",
        "operationId": "getClaimedCoupons",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "Id of coupon to get the codes for",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of coupon to get the codes for",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimedCouponCodeVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimedCouponCodeVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimedCouponCodeVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/CouponUserCodes/Archive": {
      "post": {
        "tags": [
          "CouponUserCodes"
        ],
        "summary": "Archives all coupon codes",
        "description": "Archives every coupon code in the database",
        "operationId": "archiveClaimedCoupons",
        "responses": {
          "200": {
            "description": "Successful archiving"
          }
        }
      }
    },
    "/api/CouponUserCodes/MyClaimedCoupons": {
      "get": {
        "tags": [
          "CouponUserCodes"
        ],
        "summary": "Returns claimed coupon codes",
        "operationId": "getMyClaimedCoupons",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyClaimedCouponVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyClaimedCouponVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyClaimedCouponVm"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/CouponUserCodes/{couponId}/CouponCodes": {
      "get": {
        "tags": [
          "CouponUserCodes"
        ],
        "summary": "",
        "operationId": "couponCodesCouponUserCode",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested file.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/CouponUserPairs/GeneratePairs": {
      "post": {
        "tags": [
          "CouponUserPairs"
        ],
        "summary": "Generates pairs of users and coupons",
        "description": "Generates 8 pairs for every user or as many coupons are available",
        "operationId": "generatePairs",
        "responses": {
          "200": {
            "description": "Successful generation"
          }
        }
      }
    },
    "/api/CouponUserPairs/ArchivePairs": {
      "post": {
        "tags": [
          "CouponUserPairs"
        ],
        "summary": "Archives every pair of coupons and users",
        "description": "Archives every pair of coupons and users, used before generating new pairs",
        "operationId": "archivePairs",
        "responses": {
          "200": {
            "description": "Successful archiving"
          }
        }
      }
    },
    "/api/CouponUserPairs/MyCoupons": {
      "get": {
        "tags": [
          "CouponUserPairs"
        ],
        "summary": "Returns the coupons generated for the user",
        "description": "Returns a coupon list that contains up to 8 coupons for the user for today",
        "operationId": "getMyCoupons",
        "responses": {
          "200": {
            "description": "Successful query: list of coupons",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyCouponVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyCouponVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyCouponVm"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/EmailSender/Test": {
      "post": {
        "tags": [
          "EmailSender"
        ],
        "summary": "Sends the email template out to the test recipients",
        "operationId": "sendTestEmail",
        "requestBody": {
          "description": "The list of the recipients and the email template id",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully sent"
          },
          "404": {
            "description": "EmailTemplate not found: error.not-found"
          }
        }
      }
    },
    "/api/EmailSender/Segment": {
      "post": {
        "tags": [
          "EmailSender"
        ],
        "summary": "Sends the email template to the selected segment defined in RTD",
        "operationId": "sendEmailToSegment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailToSegmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The server accepted the command"
          }
        }
      }
    },
    "/api/EmailTemplates": {
      "post": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Creates an email template",
        "description": "Returns the id of the new template",
        "operationId": "createTemplate",
        "requestBody": {
          "description": "Details of the new template",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      },
      "get": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Gets all the available Email Temmplates",
        "operationId": "getTemplates",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateSummaryVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateSummaryVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateSummaryVmPaginatedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/EmailTemplates/{id}": {
      "get": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Gets an email template",
        "operationId": "getTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the template",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the template",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailTemplateVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Deletes an email template",
        "operationId": "deleteTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the template",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the template",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/EmailTemplates/{id}/Version": {
      "post": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Creates an email template",
        "description": "Returns the id of the new template",
        "operationId": "saveTemplateVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the template",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the template",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the new template",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailTemplateVersionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/EmailTemplates/{id}/Version/{version}/Restore": {
      "post": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Creates an email template",
        "description": "Returns the id of the new template",
        "operationId": "restoreTemplateVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the template",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The id of the template",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of the template",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The version of the template",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Files": {
      "post": {
        "tags": [
          "Files"
        ],
        "operationId": "uploadFile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "file": {
                  "contentType": "multipart/form-data",
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVm"
                }
              }
            }
          }
        }
      }
    },
    "/api/Files/{id}": {
      "get": {
        "tags": [
          "Files"
        ],
        "operationId": "downloadFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested file.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/api/Information": {
      "get": {
        "tags": [
          "Information"
        ],
        "summary": "Returns a list of all the exception errorkeys",
        "operationId": "getErrorKeys",
        "responses": {
          "200": {
            "description": "Successful query: string list of exception errorkeys",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/PartnerContacts/GetSelf": {
      "get": {
        "tags": [
          "PartnerContacts"
        ],
        "operationId": "getSelfPartnerContact",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVm"
                }
              }
            }
          }
        }
      }
    },
    "/api/PartnerContacts": {
      "put": {
        "tags": [
          "PartnerContacts"
        ],
        "operationId": "updateSelfPartnerContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfPartnerContactDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/PartnerContacts/GetPartnerPartnerContacts": {
      "get": {
        "tags": [
          "PartnerContacts"
        ],
        "operationId": "getPartnerPartnerContact",
        "parameters": [
          {
            "name": "partnerId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "phone",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "email",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVmPaginatedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Partners/GetSelf": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Returns the details about the logged in contact's partner",
        "operationId": "getSelfPartner",
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                }
              }
            }
          }
        }
      }
    },
    "/api/Partners/UpdateSelf": {
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Updates the logged in contact's partner",
        "operationId": "updateSelfPartner",
        "requestBody": {
          "description": "New details of the partner to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occured: error.common.validation"
          }
        }
      }
    },
    "/api/Partners": {
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Creates an entity",
        "description": "Returns the id of the entity upon success",
        "operationId": "createPartner",
        "requestBody": {
          "description": "Details of the entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      },
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Gets an entity list sorted and filtered",
        "description": "Returns the entity list with the specified filters applied",
        "operationId": "getPartners",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "majorPartner",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "partnerState",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PartnerState"
            }
          },
          {
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/Partners/{id}": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Gets an entity by Id",
        "description": "Returns the entity with the specified Id upon success",
        "operationId": "getPartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the entity",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: entity details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Updates an entity",
        "description": "Updates an entity with Id of \"id\" to entity \"dto\"",
        "operationId": "updatePartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes an entity",
        "description": "Deletes an entity with Id of \"id\"",
        "operationId": "deletePartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Scoring": {
      "get": {
        "tags": [
          "Scoring"
        ],
        "summary": "Gets a scoreEvent entity list sorted and filtered",
        "description": "Returns the scoreEvent list with the specified filters applied",
        "operationId": "getMyScores",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of scoreEvent Entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ScoringEventPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScoringEventPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScoringEventPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      }
    },
    "/api/Segments": {
      "get": {
        "tags": [
          "Segments"
        ],
        "operationId": "getSegments",
        "parameters": [
          {
            "name": "segmentName",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentVmPaginatedResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Segments"
        ],
        "operationId": "upsertSegments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Segments"
        ],
        "operationId": "deleteSegment",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Sites": {
      "post": {
        "tags": [
          "Sites"
        ],
        "summary": "Creates an entity",
        "description": "Returns the id of the entity upon success",
        "operationId": "createSite",
        "requestBody": {
          "description": "Details of the entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      },
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Gets an entity list sorted and filtered",
        "description": "Returns the entity list with the specified filters applied",
        "operationId": "getSites",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "partnerId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/Sites/{id}": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Gets an entity by Id",
        "description": "Returns the entity with the specified Id upon success",
        "operationId": "getSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the entity",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: entity details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "Sites"
        ],
        "summary": "Updates an entity",
        "description": "Updates an entity with Id of \"id\" to entity \"dto\"",
        "operationId": "updateSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "Sites"
        ],
        "summary": "Deletes an entity",
        "description": "Deletes an entity with Id of \"id\"",
        "operationId": "deleteSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/TagCategories": {
      "post": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Creates a TagCategory entity",
        "description": "Returns the id of the TagCategory upon success",
        "operationId": "createTagCategory",
        "requestBody": {
          "description": "Details of the TagCategory",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      },
      "get": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Gets a TagCategory entity list sorted and filtered",
        "description": "Returns the TagCategory list with the specified filters applied",
        "operationId": "getTagCategories",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of TagCategory entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/TagCategories/{id}": {
      "get": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Gets a TagCategory entity by Id",
        "description": "Returns the TagCategory with the specified Id upon success",
        "operationId": "getTagCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the TagCategory",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the TagCategory",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: TagCategory entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Updates a TagCategory entity",
        "description": "Updates a TagCategory entity with Id of \"id\" to entity \"category\"",
        "operationId": "updateTagCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Deletes a TagCategory entity",
        "description": "Deletes the TagCategory entity with Id of \"id\"",
        "operationId": "deleteTagCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Tags": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Creates a Tag entity",
        "description": "Returns the id of the Tag upon success",
        "operationId": "createTag",
        "requestBody": {
          "description": "Details of the Tag",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      },
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Gets a Tag entity list sorted and filtered",
        "description": "Returns the Tag list with the specified filters applied",
        "operationId": "getTags",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "tagCategory",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of Tag entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          }
        }
      }
    },
    "/api/Tags/{id}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Gets a Tag entity by Id",
        "description": "Returns the Tag with the specified Id upon success",
        "operationId": "getTag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Tag",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of the Tag",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Tag entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Updates a Tag entity",
        "description": "Updates a Tag entity with Id of \"id\" to entity \"category\"",
        "operationId": "updateTag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to update",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: error.common.validation"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Deletes a Tag entity",
        "description": "Deletes the Tag entity with Id of \"id\"",
        "operationId": "deleteTag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id of entity to delete",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterPartnerContactDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "RegisterUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "placeOfBirth": {
            "type": "string",
            "nullable": true
          },
          "mothersMaidenName": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserVm": {
        "type": "object",
        "properties": {
          "jwtToken": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RefreshDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Roles": {
        "enum": [
          "Administrator",
          "CampaignManager",
          "PartnerManager",
          "BusinessPartnerManager",
          "PartnerContactApprover",
          "PartnerContactEditor",
          "User",
          "ServiceAccount"
        ],
        "type": "string"
      },
      "PartnerContactStateVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/Roles"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "OrderByType": {
        "enum": [
          "Ascending",
          "Descending"
        ],
        "type": "string"
      },
      "PartnerContactVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "partnerName": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "majorPartner": {
            "type": "boolean",
            "nullable": true
          },
          "role": {
            "$ref": "#/components/schemas/Roles"
          }
        }
      },
      "PartnerContactVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerContactVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PartnerContactStateDto": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/Roles"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "CreateCashierDto": {
        "type": "object",
        "properties": {
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "cashierId": {
            "type": "string",
            "nullable": true
          },
          "digitalStampId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Int32EntityCreatedVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CashierVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "cashierId": {
            "type": "string",
            "nullable": true
          },
          "digitalStampId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CashierVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CashierVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CashierDto": {
        "type": "object",
        "properties": {
          "cashierId": {
            "type": "string",
            "nullable": true
          },
          "digitalStampId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CategoryVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CategoryVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CouponState": {
        "enum": [
          "Created",
          "Accepted",
          "Waiting",
          "Closed",
          "Archived"
        ],
        "type": "string"
      },
      "CouponCommentVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "couponId": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "stateFrom": {
            "$ref": "#/components/schemas/CouponState"
          },
          "stateTo": {
            "$ref": "#/components/schemas/CouponState"
          }
        }
      },
      "CouponCommentDto": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CouponRank": {
        "enum": [
          "Bronze",
          "Silver",
          "Gold"
        ],
        "type": "string"
      },
      "CouponType": {
        "enum": [
          "Discount",
          "Prize",
          "Banner"
        ],
        "type": "string"
      },
      "CouponMode": {
        "enum": [
          "Physical",
          "Online"
        ],
        "type": "string"
      },
      "CouponDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rank": {
            "$ref": "#/components/schemas/CouponRank"
          },
          "type": {
            "$ref": "#/components/schemas/CouponType"
          },
          "state": {
            "$ref": "#/components/schemas/CouponState"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "couponCount": {
            "type": "integer",
            "format": "int32"
          },
          "minimumShoppingValue": {
            "type": "integer",
            "format": "int32"
          },
          "discountValue": {
            "type": "integer",
            "format": "int32"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "mode": {
            "$ref": "#/components/schemas/CouponMode"
          },
          "predefinedCodesFileId": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CouponDiscountType": {
        "enum": [
          "FixValue",
          "PercentValue"
        ],
        "type": "string"
      },
      "DetailedCouponVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "rank": {
            "$ref": "#/components/schemas/CouponRank"
          },
          "type": {
            "$ref": "#/components/schemas/CouponType"
          },
          "state": {
            "$ref": "#/components/schemas/CouponState"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "couponCount": {
            "type": "integer",
            "format": "int32"
          },
          "minimumShoppingValue": {
            "type": "integer",
            "format": "int32"
          },
          "discountValue": {
            "type": "integer",
            "format": "int32"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          },
          "partnerName": {
            "type": "string",
            "nullable": true
          },
          "showCount": {
            "type": "integer",
            "format": "int32"
          },
          "clickCount": {
            "type": "integer",
            "format": "int32"
          },
          "claimCount": {
            "type": "integer",
            "format": "int32"
          },
          "smallPicture": {
            "type": "integer",
            "format": "int32"
          },
          "mode": {
            "$ref": "#/components/schemas/CouponMode"
          },
          "discountType": {
            "$ref": "#/components/schemas/CouponDiscountType"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approvedBy": {
            "type": "string",
            "nullable": true
          },
          "approvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "preferredPosition": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DetailedCouponVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DetailedCouponVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CouponVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rank": {
            "$ref": "#/components/schemas/CouponRank"
          },
          "type": {
            "$ref": "#/components/schemas/CouponType"
          },
          "state": {
            "$ref": "#/components/schemas/CouponState"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "couponCount": {
            "type": "integer",
            "format": "int32"
          },
          "minimumShoppingValue": {
            "type": "integer",
            "format": "int32"
          },
          "discountValue": {
            "type": "integer",
            "format": "int32"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponCommentVm"
            },
            "nullable": true
          },
          "predefinedCodesFileId": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approvedBy": {
            "type": "string",
            "nullable": true
          },
          "approvedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "WaitingCouponVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/CouponState"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "WaitingCouponVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WaitingCouponVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ChangeCouponStateDto": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/CouponState"
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CouponCodeVm": {
        "type": "object",
        "properties": {
          "couponCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ActivateCouponDto": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "ClaimedCouponCodeVm": {
        "type": "object",
        "properties": {
          "couponCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "MyClaimedCouponVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "couponCode": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "MyCouponVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isClaimed": {
            "type": "boolean"
          }
        }
      },
      "SendEmailsDto": {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "emailTemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "emailSubject": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SendEmailToSegmentDto": {
        "type": "object",
        "properties": {
          "segmentId": {
            "type": "integer",
            "format": "int32"
          },
          "emailTemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "emailSubject": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateEmailTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "EmailTemplateSummaryVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmailTemplateSummaryVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailTemplateSummaryVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmailTemplateHistoryVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmailTemplateVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailTemplateHistoryVm"
            },
            "nullable": true
          }
        }
      },
      "EmailTemplateVersionDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FileVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SelfPartnerContactDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PartnerState": {
        "enum": [
          "Inactive",
          "Active",
          "Deleted"
        ],
        "type": "string"
      },
      "PartnerVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "mailingAddress": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "taxNumber": {
            "type": "string",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "nullable": true
          },
          "registrationAllowed": {
            "type": "string",
            "nullable": true
          },
          "registerCode": {
            "type": "string",
            "nullable": true
          },
          "majorPartner": {
            "type": "boolean"
          },
          "partnerState": {
            "$ref": "#/components/schemas/PartnerState"
          }
        }
      },
      "PartnerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "mailingAddress": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "string",
            "nullable": true
          },
          "taxNumber": {
            "type": "string",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "nullable": true
          },
          "registrationAllowed": {
            "type": "string",
            "nullable": true
          },
          "majorPartner": {
            "type": "boolean"
          },
          "partnerState": {
            "$ref": "#/components/schemas/PartnerState"
          }
        }
      },
      "PartnerVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ScoringEventType": {
        "enum": [
          "Login"
        ],
        "type": "string"
      },
      "ScoreEventVm": {
        "type": "object",
        "properties": {
          "evenType": {
            "$ref": "#/components/schemas/ScoringEventType"
          },
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "score": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ScoringEventPaginatedResponse": {
        "type": "object",
        "properties": {
          "score": {
            "type": "integer",
            "format": "int32"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScoreEventVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SegmentVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "segmentSize": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SegmentVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmailSegmentDto": {
        "type": "object",
        "properties": {
          "segmentName": {
            "type": "string",
            "nullable": true
          },
          "emailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "CreateSegmentationCommand": {
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailSegmentDto"
            },
            "nullable": true
          }
        }
      },
      "SiteDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "partnerId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SiteVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SiteVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TagCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TagCategoryVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TagCategoryVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagCategoryVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TagDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          },
          "tagCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "TagVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "tagCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "TagVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \\r\\n\\r\\n \n                      Enter 'Bearer' [space] and then your token in the text input below.\n                      \\r\\n\\r\\nExample: 'Bearer 12345abcdef'",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}