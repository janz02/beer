{
  "openapi": "3.0.1",
  "info": {
    "title": "NKM PKM Coupon Api",
    "version": "v1"
  },
  "paths": {
    "/api/ApiKeys/{id}": {
      "get": {
        "tags": [
          "ApiKeys"
        ],
        "summary": "Gets an entity by Id",
        "description": "Returns the entity with the specified Id upon success",
        "operationId": "getApiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: entity details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteApiKeyVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteApiKeyVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteApiKeyVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "ApiKeys"
        ],
        "summary": "Updates an entity",
        "description": "Updates an entity with Id of \"id\" to entity \"dto\"",
        "operationId": "updateApiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSiteApiKeyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "ApiKeys"
        ],
        "summary": "Deletes an entity",
        "description": "Deletes an entity with Id of \"id\"",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/ApiKeys": {
      "post": {
        "tags": [
          "ApiKeys"
        ],
        "summary": "Creates an entity",
        "description": "Returns the id of the entity upon success",
        "operationId": "createApiKey",
        "requestBody": {
          "description": "Details of the entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSiteApiKeyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32StringEntityCreatedCompositeVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32StringEntityCreatedCompositeVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32StringEntityCreatedCompositeVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      },
      "get": {
        "tags": [
          "ApiKeys"
        ],
        "summary": "Gets an entity list sorted and filtered",
        "description": "Returns the entity list with the specified filters applied",
        "operationId": "getApiKeys",
        "parameters": [
          {
            "name": "siteId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteApiKeyVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteApiKeyVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteApiKeyVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      }
    },
    "/api/Auth/RegisterPartnerContact": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a contact for a partner",
        "description": "Returns nothing, but registers a contact for the partner",
        "operationId": "registerPartnerContact",
        "requestBody": {
          "description": "Data of the contact",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterPartnerContactDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful registration"
          },
          "400": {
            "description": "Invalid e-mail: auth.error.invalid-email; \r\n                Invalid password: auth.error.password-format; \r\n                Error occured in registration: auth.error.registration-failed;\r\n                Invalid partner code: auth.error.invalid-partner-code; \r\n                User already exists: auth.error.user-exists",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/RegisterUser": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Registers a user",
        "description": "Returns nothing, but registers a user",
        "operationId": "registerUser",
        "requestBody": {
          "description": "Data of the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful registration"
          },
          "400": {
            "description": "Invalid e-mail: auth.error.invalid-email; \r\n                Invalid password: auth.error.password-format; \r\n                Error occured in registration: auth.error.registration-failed;\r\n                User already exists: auth.error.user-exists",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthRegistrationFailedException"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthRegistrationFailedException"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthRegistrationFailedException"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/Login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logs in a user",
        "description": "Returns user info about the logged in user",
        "operationId": "login",
        "requestBody": {
          "description": "Login data of the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                }
              }
            }
          },
          "400": {
            "description": "Login failed: auth.error.login-failed; \r\n                LDAP Login failed: auth.error.Ldap-Error",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Auth/Refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refreshes the JWT token",
        "description": "Returns user info about the logged in user",
        "operationId": "refresh",
        "requestBody": {
          "description": "Refresh Token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful refresh",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserVm"
                }
              }
            }
          },
          "400": {
            "description": "Expired Refresh Token: auth.error.expired-refreshToken; \r\n                Invalid Refresh Token: auth.error.invalid-refreshToken",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Categories": {
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Creates a Category entity",
        "description": "Returns the id of the Category upon success",
        "operationId": "createCategory",
        "requestBody": {
          "description": "Details of the Category",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      },
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Gets a Category entity list sorted and filtered",
        "description": "Returns the Category list with the specified filters applied",
        "operationId": "getCategories",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of Category entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      }
    },
    "/api/Categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Gets a Category entity by Id",
        "description": "Returns the Category with the specified Id upon success",
        "operationId": "getCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Category",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Category entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "Categories"
        ],
        "summary": "Updates a Category entity",
        "description": "Updates a Category entity with Id of \"id\" to entity \"category\"",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Deletes a Category entity",
        "description": "Deletes the Category entity with Id of \"id\"",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupon/{couponId}/Comment": {
      "get": {
        "tags": [
          "CouponComments"
        ],
        "summary": "Gets the comments on a coupon",
        "description": "Returns the comment list on the coupon with an Id of \"couponId\"",
        "operationId": "getCouponComments",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "CouponId for comments",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: list of comments",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponCommentVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponCommentVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponCommentVm"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      },
      "post": {
        "tags": [
          "CouponComments"
        ],
        "summary": "Adds a comment to a coupon",
        "description": "Appends a comment with details of \"comment\" to a coupon with an Id of \"couponId\"",
        "operationId": "addCouponComment",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "Id of Coupon to add a comment to",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Coupon not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupon/{couponId}/Comment/{commentId}": {
      "delete": {
        "tags": [
          "CouponComments"
        ],
        "summary": "Deletes a comment from a coupon",
        "description": "Deletes the comment with an Id of \"commentId\" from a coupon with Id of \"couponId\"",
        "operationId": "deleteCouponComment",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "Id of coupon to delete comment from",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "Id of comment to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupons": {
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Creates a Coupon entity",
        "description": "Returns the id of the new Coupon upon success",
        "operationId": "createCoupon",
        "requestBody": {
          "description": "Details of the Coupon",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      },
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Gets a Coupon entity list sorted and filtered",
        "description": "Returns the Coupon list with the specified filters applied",
        "operationId": "getCoupons",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeArchived",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of Coupon entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      }
    },
    "/api/Coupons/{id}": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Gets a Coupon entity by Id",
        "description": "Returns the Coupon with the specified Id upon success",
        "operationId": "getCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Coupon",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Coupon entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "Coupons"
        ],
        "summary": "Updates a Coupon entity",
        "description": "Updates a Coupon entity with Id of \"id\" to entity \"item\"",
        "operationId": "updateCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "Coupons"
        ],
        "summary": "Deletes a Coupon entity",
        "description": "Deletes the Coupon entity with Id of \"id\"",
        "operationId": "deleteCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupons/Waiting": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Gets a Coupon entity list sorted and filtered with only Coupons that are in waiting state",
        "description": "Returns the Coupon list with the specified filters applied with only Coupons that are in waiting state",
        "operationId": "getWaitingCoupons",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/CouponState"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "expireDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of Coupon entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WaitingCouponVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitingCouponVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaitingCouponVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      }
    },
    "/api/Coupons/{id}/Status": {
      "put": {
        "tags": [
          "Coupons"
        ],
        "summary": "Updates a Coupon entity status only",
        "description": "Updates a Coupon entity status only with Id of \"id\" to entity \"changeCouponStateDto\"",
        "operationId": "updateCouponStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeCouponStateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Coupons/{id}/Claim": {
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Claims a coupon for the logged in user",
        "description": "Claims a coupon to put it in the used up coupons for the user",
        "operationId": "claimCoupon",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of coupon to claim coupon code for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful claim: couponcode returned",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCodeVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCodeVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponCodeVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/CouponUserCodes/Coupon/{couponId}": {
      "get": {
        "tags": [
          "CouponUserCodes"
        ],
        "summary": "Returns the claimed couponcodes for a coupon",
        "description": "Returns a list of couponcodes that have been claimed for coupon with an Id of couponId",
        "operationId": "getClaimedCoupons",
        "parameters": [
          {
            "name": "couponId",
            "in": "path",
            "description": "Id of coupon to get the codes for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CouponUserCodeVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponUserCodeVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponUserCodeVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/CouponUserCodes/Archive": {
      "post": {
        "tags": [
          "CouponUserCodes"
        ],
        "summary": "Archives all couponcodes",
        "description": "Archives every couponcode in the database",
        "operationId": "archiveClaimedCoupons",
        "responses": {
          "200": {
            "description": "Successful archiving"
          }
        }
      }
    },
    "/api/CouponUserCodes/MyClaimedCoupons": {
      "get": {
        "tags": [
          "CouponUserCodes"
        ],
        "operationId": "getMyClaimedCoupons",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyClaimedCouponVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyClaimedCouponVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyClaimedCouponVm"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/CouponUserPairs/GeneratePairs": {
      "post": {
        "tags": [
          "CouponUserPairs"
        ],
        "summary": "Generates pairs of users and coupons",
        "description": "Generates 8 pairs for every user or as many coupons are available",
        "operationId": "generatePairs",
        "responses": {
          "200": {
            "description": "Successful generation"
          }
        }
      }
    },
    "/api/CouponUserPairs/ArchivePairs": {
      "post": {
        "tags": [
          "CouponUserPairs"
        ],
        "summary": "Archives every pair of coupons and users",
        "description": "Archives every pair of coupons and users, used before generating new pairs",
        "operationId": "archivePairs",
        "responses": {
          "200": {
            "description": "Successful archiving"
          }
        }
      }
    },
    "/api/CouponUserPairs/MyCoupons": {
      "get": {
        "tags": [
          "CouponUserPairs"
        ],
        "summary": "Returns the coupons generated for the user",
        "description": "Returns a coupon list that contains up to 8 coupons for the user for today",
        "operationId": "getMyCoupons",
        "responses": {
          "200": {
            "description": "Successful query: list of coupons",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyCouponVm"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyCouponVm"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MyCouponVm"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/EmailSender": {
      "post": {
        "tags": [
          "EmailSender"
        ],
        "operationId": "sendEmails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Information": {
      "get": {
        "tags": [
          "Information"
        ],
        "summary": "Returns a list of all the exception errorkeys",
        "operationId": "getExceptions",
        "responses": {
          "200": {
            "description": "Successful query: string list of exception errorkeys",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/PartnerContacts": {
      "get": {
        "tags": [
          "PartnerContacts"
        ],
        "operationId": "getMyPartnerContact",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerContactVm"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PartnerContacts"
        ],
        "operationId": "updateMyPartnerContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerContactDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/Partners/GetSelf": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Returns the details about the logged in contact's partner",
        "operationId": "getMyPartner",
        "responses": {
          "200": {
            "description": "Successful query",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                }
              }
            }
          }
        }
      }
    },
    "/api/Partners/UpdateSelf": {
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Updates the logged in contact's partner",
        "operationId": "updateMyPartner",
        "requestBody": {
          "description": "New details of the partner to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occured: validation.error"
          }
        }
      }
    },
    "/api/Partners": {
      "post": {
        "tags": [
          "Partners"
        ],
        "summary": "Creates an entity",
        "description": "Returns the id of the entity upon success",
        "operationId": "createPartner",
        "requestBody": {
          "description": "Details of the entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      },
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Gets an entity list sorted and filtered",
        "description": "Returns the entity list with the specified filters applied",
        "operationId": "getPartners",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      }
    },
    "/api/Partners/{id}": {
      "get": {
        "tags": [
          "Partners"
        ],
        "summary": "Gets an entity by Id",
        "description": "Returns the entity with the specified Id upon success",
        "operationId": "getPartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: entity details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "Partners"
        ],
        "summary": "Updates an entity",
        "description": "Updates an entity with Id of \"id\" to entity \"dto\"",
        "operationId": "updatePartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "Partners"
        ],
        "summary": "Deletes an entity",
        "description": "Deletes an entity with Id of \"id\"",
        "operationId": "deletePartner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Sites": {
      "post": {
        "tags": [
          "Sites"
        ],
        "summary": "Creates an entity",
        "description": "Returns the id of the entity upon success",
        "operationId": "createSite",
        "requestBody": {
          "description": "Details of the entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      },
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Gets an entity list sorted and filtered",
        "description": "Returns the entity list with the specified filters applied",
        "operationId": "getSites",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partnerId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      }
    },
    "/api/Sites/{id}": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Gets an entity by Id",
        "description": "Returns the entity with the specified Id upon success",
        "operationId": "getSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: entity details",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "Sites"
        ],
        "summary": "Updates an entity",
        "description": "Updates an entity with Id of \"id\" to entity \"dto\"",
        "operationId": "updateSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "Sites"
        ],
        "summary": "Deletes an entity",
        "description": "Deletes an entity with Id of \"id\"",
        "operationId": "deleteSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/TagCategories": {
      "post": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Creates a TagCategory entity",
        "description": "Returns the id of the TagCategory upon success",
        "operationId": "createTagCategory",
        "requestBody": {
          "description": "Details of the TagCategory",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      },
      "get": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Gets a TagCategory entity list sorted and filtered",
        "description": "Returns the TagCategory list with the specified filters applied",
        "operationId": "getTagCategories",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of TagCategory entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      }
    },
    "/api/TagCategories/{id}": {
      "get": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Gets a TagCategory entity by Id",
        "description": "Returns the TagCategory with the specified Id upon success",
        "operationId": "getTagCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the TagCategory",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: TagCategory entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagCategoryVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Updates a TagCategory entity",
        "description": "Updates a TagCategory entity with Id of \"id\" to entity \"category\"",
        "operationId": "updateTagCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "TagCategories"
        ],
        "summary": "Deletes a TagCategory entity",
        "description": "Deletes the TagCategory entity with Id of \"id\"",
        "operationId": "deleteTagCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    },
    "/api/Tags": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Creates a Tag entity",
        "description": "Returns the id of the Tag upon success",
        "operationId": "createTag",
        "requestBody": {
          "description": "Details of the Tag",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful creation: Id of the new entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32EntityCreatedVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      },
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Gets a Tag entity list sorted and filtered",
        "description": "Returns the Tag list with the specified filters applied",
        "operationId": "getTags",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagCategory",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderByType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/OrderByType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: List of Tag entities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagVmPaginatedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagVmPaginatedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagVmPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          }
        }
      }
    },
    "/api/Tags/{id}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Gets a Tag entity by Id",
        "description": "Returns the Tag with the specified Id upon success",
        "operationId": "getTag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the Tag",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful query: Tag entity",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TagVm"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagVm"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagVm"
                }
              }
            }
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Updates a Tag entity",
        "description": "Updates a Tag entity with Id of \"id\" to entity \"category\"",
        "operationId": "updateTag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New entity details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful update"
          },
          "400": {
            "description": "Validation error occurred: validation.error"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Deletes a Tag entity",
        "description": "Deletes the Tag entity with Id of \"id\"",
        "operationId": "deleteTag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of entity to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion"
          },
          "404": {
            "description": "Entity not found: error.not-found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SiteApiKeyVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateSiteApiKeyDto": {
        "type": "object",
        "properties": {
          "siteId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Int32StringEntityCreatedCompositeVm": {
        "type": "object",
        "properties": {
          "id2": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OrderByType": {
        "enum": [
          "Ascending",
          "Descending"
        ],
        "type": "string"
      },
      "SiteApiKeyVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteApiKeyVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RegisterPartnerContactDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RegisterUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time"
          },
          "placeOfBirth": {
            "type": "string",
            "nullable": true
          },
          "mothersMaidenName": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthRegistrationFailedException": {
        "type": "object",
        "properties": {
          "errorKey": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "stackTrace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          },
          "innerException": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "helpLink": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "hResult": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserVm": {
        "type": "object",
        "properties": {
          "jwtToken": {
            "type": "string",
            "nullable": true
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RefreshDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Int32EntityCreatedVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CategoryVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CategoryVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "CouponState": {
        "enum": [
          "Created",
          "Accepted",
          "Rejected",
          "Waiting",
          "Closed",
          "Archived"
        ],
        "type": "string"
      },
      "CouponCommentVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "couponId": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "stateFrom": {
            "$ref": "#/components/schemas/CouponState"
          },
          "stateTo": {
            "$ref": "#/components/schemas/CouponState"
          }
        },
        "additionalProperties": false
      },
      "CouponCommentDto": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CouponRank": {
        "enum": [
          "Bronze",
          "Silver",
          "Gold"
        ],
        "type": "string"
      },
      "CouponType": {
        "enum": [
          "FixValue",
          "PercentValue",
          "Gift"
        ],
        "type": "string"
      },
      "CouponDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rank": {
            "$ref": "#/components/schemas/CouponRank"
          },
          "type": {
            "$ref": "#/components/schemas/CouponType"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "couponCount": {
            "type": "integer",
            "format": "int32"
          },
          "minimumShoppingValue": {
            "type": "integer",
            "format": "int32"
          },
          "discountValue": {
            "type": "integer",
            "format": "int32"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "isDrawable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CouponVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "rank": {
            "$ref": "#/components/schemas/CouponRank"
          },
          "type": {
            "$ref": "#/components/schemas/CouponType"
          },
          "state": {
            "$ref": "#/components/schemas/CouponState"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "couponCount": {
            "type": "integer",
            "format": "int32"
          },
          "minimumShoppingValue": {
            "type": "integer",
            "format": "int32"
          },
          "discountValue": {
            "type": "integer",
            "format": "int32"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponCommentVm"
            },
            "nullable": true
          },
          "isDrawable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CouponVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WaitingCouponVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/CouponState"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "WaitingCouponVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WaitingCouponVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ChangeCouponStateDto": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/CouponState"
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CouponCodeVm": {
        "type": "object",
        "properties": {
          "couponCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CouponUserCodeVm": {
        "type": "object",
        "properties": {
          "couponId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "couponCode": {
            "type": "string",
            "nullable": true
          },
          "claimDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CouponUserCodeVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponUserCodeVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MyClaimedCouponVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "couponCode": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MyCouponVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "expireDate": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isClaimed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SendEmailsDto": {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "content": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PartnerContactVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "partnerId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PartnerContactDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PartnerState": {
        "enum": [
          "Inactive",
          "Active"
        ],
        "type": "string"
      },
      "SiteVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "apiKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteApiKeyVm"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PartnerVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "integer",
            "format": "int32"
          },
          "taxNumber": {
            "type": "integer",
            "format": "int32"
          },
          "bankAccount": {
            "type": "integer",
            "format": "int32"
          },
          "registerCode": {
            "type": "string",
            "nullable": true
          },
          "majorPartner": {
            "type": "boolean"
          },
          "partnerState": {
            "$ref": "#/components/schemas/PartnerState"
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerContactVm"
            },
            "nullable": true
          },
          "sites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteVm"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PartnerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "registrationNumber": {
            "type": "integer",
            "format": "int32"
          },
          "taxNumber": {
            "type": "integer",
            "format": "int32"
          },
          "bankAccount": {
            "type": "integer",
            "format": "int32"
          },
          "majorPartner": {
            "type": "boolean"
          },
          "partnerState": {
            "$ref": "#/components/schemas/PartnerState"
          }
        },
        "additionalProperties": false
      },
      "PartnerVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartnerVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SiteDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "partnerId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SiteVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TagCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagCategoryVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagCategoryVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagCategoryVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TagDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          },
          "tagCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TagVm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "tagCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TagVmPaginatedResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagVm"
            },
            "nullable": true
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "format": "int32"
          },
          "to": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \\r\\n\\r\\n \n                      Enter 'Bearer' [space] and then your token in the text input below.\n                      \\r\\n\\r\\nExample: 'Bearer 12345abcdef'",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}