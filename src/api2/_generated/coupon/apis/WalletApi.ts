/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MyClaimedCouponVm,
    MyClaimedCouponVmFromJSON,
    MyClaimedCouponVmToJSON,
} from '../models';

export interface BurnCouponRequest {
    userId: string | null;
    couponCode: string | null;
}

/**
 * no description
 */
export class WalletApi extends runtime.BaseAPI {

    /**
     * Archives every coupon code in the database
     * Archives all coupon codes
     */
    async archiveWalletRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Wallet/Archive`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Archives every coupon code in the database
     * Archives all coupon codes
     */
    async archiveWallet(): Promise<void> {
        await this.archiveWalletRaw();
    }

    /**
     * Used to delete a coupon code from user purse
     */
    async burnCouponRaw(requestParameters: BurnCouponRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling burnCoupon.');
        }

        if (requestParameters.couponCode === null || requestParameters.couponCode === undefined) {
            throw new runtime.RequiredError('couponCode','Required parameter requestParameters.couponCode was null or undefined when calling burnCoupon.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Wallet/{userId}/BurnCoupon/{couponCode}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"couponCode"}}`, encodeURIComponent(String(requestParameters.couponCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Used to delete a coupon code from user purse
     */
    async burnCoupon(requestParameters: BurnCouponRequest): Promise<void> {
        await this.burnCouponRaw(requestParameters);
    }

    /**
     * Returns claimed coupon codes
     */
    async getMyClaimedCouponsRaw(): Promise<runtime.ApiResponse<Array<MyClaimedCouponVm>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Wallet/MyClaimedCoupons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MyClaimedCouponVmFromJSON));
    }

    /**
     * Returns claimed coupon codes
     */
    async getMyClaimedCoupons(): Promise<Array<MyClaimedCouponVm>> {
        const response = await this.getMyClaimedCouponsRaw();
        return await response.value();
    }

}
