/* tslint:disable */
/* eslint-disable */
/**
 * NKM PKM Coupon Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Int32EntityCreatedVm,
    Int32EntityCreatedVmFromJSON,
    Int32EntityCreatedVmToJSON,
    OrderByType,
    OrderByTypeFromJSON,
    OrderByTypeToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TagCategoryDto,
    TagCategoryDtoFromJSON,
    TagCategoryDtoToJSON,
    TagCategoryVm,
    TagCategoryVmFromJSON,
    TagCategoryVmToJSON,
    TagCategoryVmPaginatedResponse,
    TagCategoryVmPaginatedResponseFromJSON,
    TagCategoryVmPaginatedResponseToJSON,
} from '../models';

export interface CreateTagCategoryRequest {
    tagCategoryDto?: TagCategoryDto;
}

export interface DeleteTagCategoryRequest {
    id: number;
}

export interface GetTagCategoriesRequest {
    name?: string | null;
    page?: number;
    pageSize?: number;
    orderBy?: string | null;
    orderByType?: OrderByType;
}

export interface GetTagCategoryRequest {
    id: number;
}

export interface UpdateTagCategoryRequest {
    id: number;
    tagCategoryDto?: TagCategoryDto;
}

/**
 * no description
 */
export class TagCategoriesApi extends runtime.BaseAPI {

    /**
     * Returns the id of the TagCategory upon success
     * Creates a TagCategory entity
     */
    async createTagCategoryRaw(requestParameters: CreateTagCategoryRequest): Promise<runtime.ApiResponse<Int32EntityCreatedVm>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TagCategories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagCategoryDtoToJSON(requestParameters.tagCategoryDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Int32EntityCreatedVmFromJSON(jsonValue));
    }

    /**
     * Returns the id of the TagCategory upon success
     * Creates a TagCategory entity
     */
    async createTagCategory(requestParameters: CreateTagCategoryRequest): Promise<Int32EntityCreatedVm> {
        const response = await this.createTagCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes the TagCategory entity with Id of \"id\"
     * Deletes a TagCategory entity
     */
    async deleteTagCategoryRaw(requestParameters: DeleteTagCategoryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTagCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TagCategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the TagCategory entity with Id of \"id\"
     * Deletes a TagCategory entity
     */
    async deleteTagCategory(requestParameters: DeleteTagCategoryRequest): Promise<void> {
        await this.deleteTagCategoryRaw(requestParameters);
    }

    /**
     * Returns the TagCategory list with the specified filters applied
     * Gets a TagCategory entity list sorted and filtered
     */
    async getTagCategoriesRaw(requestParameters: GetTagCategoriesRequest): Promise<runtime.ApiResponse<TagCategoryVmPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.orderByType !== undefined) {
            queryParameters['orderByType'] = requestParameters.orderByType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TagCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagCategoryVmPaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Returns the TagCategory list with the specified filters applied
     * Gets a TagCategory entity list sorted and filtered
     */
    async getTagCategories(requestParameters: GetTagCategoriesRequest): Promise<TagCategoryVmPaginatedResponse> {
        const response = await this.getTagCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the TagCategory with the specified Id upon success
     * Gets a TagCategory entity by Id
     */
    async getTagCategoryRaw(requestParameters: GetTagCategoryRequest): Promise<runtime.ApiResponse<TagCategoryVm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTagCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TagCategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagCategoryVmFromJSON(jsonValue));
    }

    /**
     * Returns the TagCategory with the specified Id upon success
     * Gets a TagCategory entity by Id
     */
    async getTagCategory(requestParameters: GetTagCategoryRequest): Promise<TagCategoryVm> {
        const response = await this.getTagCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a TagCategory entity with Id of \"id\" to entity \"category\"
     * Updates a TagCategory entity
     */
    async updateTagCategoryRaw(requestParameters: UpdateTagCategoryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTagCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TagCategories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagCategoryDtoToJSON(requestParameters.tagCategoryDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a TagCategory entity with Id of \"id\" to entity \"category\"
     * Updates a TagCategory entity
     */
    async updateTagCategory(requestParameters: UpdateTagCategoryRequest): Promise<void> {
        await this.updateTagCategoryRaw(requestParameters);
    }

}
